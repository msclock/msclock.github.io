<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AI 实践</title>
    <url>/posts/c21efe28/</url>
    <content><![CDATA[<!--
todo 待整理

https://www.zhihu.com/question/524022812/answer/2434021943
https://github.com/mli

## tensorflow

- https://tensorflow.google.cn/learn?hl=zh-cn
- https://tensorflow.google.cn/guide/gpu?hl=zh-cn

## ncnn

- https://zhuanlan.zhihu.com/p/449765328
- https://github.com/DefTruth/lite.ai.toolkit
- https://cloud.tencent.com/developer/salon/live-1346
- https://www.zhihu.com/question/441269200
- https://github.com/zchrissirhcz/awesome-ncnn

## 参考 AI 教程

[d2l](https://github.com/d2l-ai/d2l-zh)
[paper reading](https://github.com/mli/paper-reading)
[zhihu share](https://zhuanlan.zhihu.com/p/106712512)

## AI Paper With Code

- [CV PR 2023](https://github.com/amusi/CVPR2023-Papers-with-Code)

 -->
<span id="more"></span>
<h2 id="AI-资源">AI 资源</h2>
<hr>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://huggingface.co/">Hugging Face</a></td>
<td>Hugging Face</td>
<td>Community/Model</td>
</tr>
<tr>
<td><a href="https://hub.docker.com/r/nvidia/cuda">Cuda Image Hub</a></td>
<td>Nvidia</td>
<td>Image/Cuda</td>
</tr>
<tr>
<td><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/overview.html">Container Toolkit</a></td>
<td>Nvidia</td>
<td>Runtime/Dev</td>
</tr>
<tr>
<td><a href="https://www.mage.space/">mega.space</a></td>
<td>Mega</td>
<td>AI Image Generator</td>
</tr>
<tr>
<td><a href="https://drive.google.com/">Colab</a></td>
<td>Google</td>
<td>Tools</td>
</tr>
<tr>
<td><a href="https://image.delivery/">Image Delivery</a></td>
<td>image.delivery</td>
<td>Images(Stable Diffusions)</td>
</tr>
<tr>
<td><a href="https://www.tutorialspoint.com/machine_learning_tutorials.htm">dl tutorialspoint</a></td>
<td>tutorialspoint</td>
<td>tutorial</td>
</tr>
<tr>
<td><a href="https://agentgpt.reworkd.ai/zh">agentgpt</a></td>
<td>AgentGPT</td>
<td>Application</td>
</tr>
<tr>
<td><a href="https://github.com/EwingYangs/awesome-open-gpt">awesome-open-gpt resource</a></td>
<td>EwingYangs</td>
<td>GPT  resource</td>
</tr>
</tbody>
</table>
<h2 id="Beginner">Beginner</h2>
<hr>
<!-- https://www.youtube.com/watch?v=wm9yR1VspPs
https://www.bilibili.com/video/BV1m3411p7wD?p=1
https://www.bilibili.com/video/BV16r4y1Y7jv

 -->
<h3 id="机器如何学习">机器如何学习</h3>
<p>从数据中找出规则（通过数学和程序）。</p>
<p>例如，通过图片识别出狗还是猫，只要足够的数据给到模型生成规则，那么再遇到类似的问题，就能够得到相对的答案，当正确率达到一定程度后，就代码这个模型相对稳定了。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>模型，由各种数学和方程组成的规则构成。</p>
</li>
<li class="lvl-2">
<p>相对正确的答案，达到一定正确率。</p>
</li>
</ul>
<p><a href="https://drive.google.com/drive/folders/1_XZqvbhH7P0UbAH-epk-ThkV9Y6LtQwp">Colab 实验</a>.</p>
<h3 id="Colab">Colab</h3>
<p>谷歌提供的免费 <a href="https://drive.google.com/">ML</a> 验证工具。</p>
<h3 id="ipynb-notebook">ipynb notebook</h3>
<h4 id="转为文件">转为文件</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>type: 转为的类型，包括 html、markdown、pdf、rst</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">jupyter nbconvert --to <span class="built_in">type</span> filename/as/ipynb</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Math-in-AI">Math in AI</h3>
<!-- https://blog.csdn.net/hy592070616/article/details/81707766 -->
<h3 id="激活函数">激活函数</h3>
<!-- https://blog.csdn.net/hy592070616/article/details/120617176 -->
<!-- https://blog.csdn.net/leo_xu06/article/details/53708647 -->
<h4 id="sigmoid">sigmoid</h4>
<!-- https://zhuanlan.zhihu.com/p/424858561 -->
<h3 id="Palm-Detection">Palm Detection</h3>
<!-- https://www.youtube.com/watch?v=x4eeX7WJIuA -->
<h3 id="NHWC-to-NCHW">NHWC to NCHW</h3>
<p>在深度学习中，NHWC 和 NCHW 是两种常见的张量格式。NHWC 表示通道维度在最后一个维度，即 (batchsize, height, width, channels)，而 NCHW 表示通道维度在第二个维度，即 (batchsize, channels, height, width)。</p>
<p>将输入形状从 HWC 格式转换为 CHW 格式。具体来说，将输入形状从 (height, width, channels) 转换为 (channels, height, width)。这是因为在 PyTorch 中，张量的默认格式是 NCHW，而在 TensorFlow 中，张量的默认格式是 NHWC。因此，将输入形状从 HWC 格式转换为 CHW 格式可以使代码更易于在 PyTorch 中使用。</p>
<p>要将张量从 NHWC 格式转换为 NCHW 格式，可以使用以下代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert from NHWC to NCHW with torch.Tensor.permute</span></span><br><span class="line">tensor_nchw = tensor_nhwc.permute(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>在这里，tensor_nhwc 是一个形状为 (batch_size, height, width, channels) 的张量。tensor_nchw 是一个形状为 (batch_size, channels, height, width) 的张量，其中通道维度在第二个维度。tensor_nchw.permute (0, 3, 1, 2) 将张量的维度重新排列，以将通道维度移动到第二个维度。</p>
<h2 id="ml-in-c">ml in c</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=PGSba51aRYU">https://www.youtube.com/watch?v=PGSba51aRYU</a></p>
</li>
</ul>
<h2 id="AI-copilot">AI copilot</h2>
<h3 id="cursor">cursor</h3>
<h3 id="connect-to-wsl">connect to wsl</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/getcursor/cursor/issues/660#issuecomment-1678308600">https://github.com/getcursor/cursor/issues/660#issuecomment-1678308600</a></p>
</li>
</ul>
<h3 id="cocopilot">cocopilot</h3>
<p>patch the code copilot over the common IDE.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/pengzhile/cocopilot">https://github.com/pengzhile/cocopilot</a></p>
</li>
</ul>
<h3 id="open-interpreter">open-interpreter</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/KillianLucas/open-interpreter">https://github.com/KillianLucas/open-interpreter</a></p>
</li>
</ul>
<h2 id="numpy">numpy</h2>
<hr>
<p><a href="https://numpy.org/doc/stable/index.html">numpy</a> 是一个 Python 库，用于处理多维数组和矩阵，以及用于数学计算的函数集合。它是 Python 科学计算的核心库之一，因为它提供了高效的数据结构和计算工具，使得 Python 成为了一种流行的科学计算语言。</p>
<h3 id="Tips">Tips</h3>
<h4 id="增删维度">增删维度</h4>
<p>图片数据经常 batch 处理，此时的维度为 <code>[batch, c, h, w]</code> 或 <code>[batch, h, w, c]</code>，为适配输入输出，需要增加和删除 batch</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">image_origin = np.from_file(file, np.uint8)</span><br><span class="line"><span class="comment"># 增加维度</span></span><br><span class="line">with_batch = np.expand_dims(image_origin, axis=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 删除维度</span></span><br><span class="line">without_batch = np.squeeze(with_batch, axis=<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="NHWC-to-NCHW-2">NHWC to NCHW</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">padding_img = padding_img.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))[::-<span class="number">1</span>]  <span class="comment"># HWC to CHW, BGR to RGB</span></span><br><span class="line">padding_img = np.ascontiguousarray(padding_img)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="pandas">pandas</h2>
<h3 id="api">api</h3>
<h4 id="quantile">quantile</h4>
<p>使用 quantile 函数计算分数位数. quantile 计算的原理是通过对数据进行排序，找到给定百分位数位置的值。具体来说，对于一个已排序的数据集，quantile 函数会根据指定的百分位数来确定在该百分位数位置处的值。</p>
<p>例如，对于一个包含 100 个数据点的数据集，如果想要计算 p99（百分之 99 的数据点的值）即 <code>DataFrame.quantile(0.99)</code>，需要找到位于排好序的数据集中第 99 个百分位数位置的值。</p>
<p>quantile 函数的计算方式可以有多种方法，其中一种常用的方法是线性插值法。该方法首先计算出百分位数位置的整数部分索引和小数部分的权重，并根据权重对相邻的数据点进行插值计算，以得出最终的百分位数值。</p>
<h2 id="ONNX">ONNX</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://onnx.ai/onnx/index.html">ONNX DOC</a></p>
</li>
</ul>
<h2 id="OpenCV">OpenCV</h2>
<hr>
<!-- https://www.youtube.com/watch?v=xjrykYpaBBM -->
<h3 id="安装">安装</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y --no-install-recommends libgl1 &amp;&amp; pip install opencv-python opencv-python-headless</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!TIP]<br>
<a href="https://stackoverflow.com/questions/55313610/importerror-libgl-so-1-cannot-open-shared-object-file-no-such-file-or-directo">Error</a>: ImportError: libGL.so.1: cannot open shared object file: No such file or directory.</p>
<p>Solution: <code>pip install opencv-python opencv-python-headless</code>.</p>
</blockquote>
<h3 id="Tip">Tip</h3>
<h4 id="jpg-to-numpy">jpg to numpy</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> Pillow <span class="keyword">import</span> PIL  <span class="comment"># need install pillow</span></span><br><span class="line"></span><br><span class="line">raw_img_np = np.fromfile(file_path, dtype=<span class="string">"uint8"</span>)</span><br><span class="line"><span class="comment"># convert from Pillow.Image.open</span></span><br><span class="line">image_p = PIL.Image.<span class="built_in">open</span>(io.BytesIO(raw_img_np.tobytes()))</span><br><span class="line">tensor = np.array(image_p)</span><br><span class="line"><span class="comment"># convert from cv2.imdecode</span></span><br><span class="line">tensor = cv2.imdecode(raw_img_np, cv2.IMREAD_COLOR)</span><br><span class="line"><span class="comment"># read from cv2.imread</span></span><br><span class="line">tensor = cv2.imread(file_path)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="GPT">GPT</h2>
<h3 id="资源">资源</h3>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.yuque.com/if">西鲸 AI 智脑</a></td>
<td>西鲸</td>
<td>文档 </td>
</tr>
<tr>
<td><a href="https://chat.dfehub.com/">chat.dfehub</a></td>
<td> 西鲸</td>
<td> rest api</td>
</tr>
<tr>
<td><a href="https://github.com/ramonvc/freegpt-webui">freegpt-webui</a></td>
<td>ramonvc</td>
<td>freegpt web app</td>
</tr>
<tr>
<td><a href="https://github.com/h2oai/h2ogpt">h2ogpt</a></td>
<td>h2oai</td>
<td>private gpt server</td>
</tr>
<tr>
<td><a href="https://github.com/StanGirard/quivr">quivr</a></td>
<td>StanGirard</td>
<td>AI Brain</td>
</tr>
<tr>
<td><a href="https://github.com/zurawiki/gptcommit">gitcommit</a></td>
<td>zurawiki</td>
<td>git commit tools</td>
</tr>
</tbody>
</table>
<h3 id="实用工具">实用工具</h3>
<p>浏览器 Edge/Chrome</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ChatGPT Sidebar</p>
</li>
</ul>
<p>注册工具</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://sms-activate.org/">SMS</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.zoho.com/mail/">zohomail</a></p>
</li>
</ul>
<h3 id="Stable-Diffusion">Stable Diffusion</h3>
<p>AI 文字转图片工具<a href="https://www.youtube.com/watch?v=147uG9Heotk">使用教程</a>.</p>
<p>Stable Diffusion <a href="civitai.com">AI models 下载</a>。这里有推荐的<a href="https://www.freedidi.com/8621.html">模型</a>及软件下载<a href="https://www.freedidi.com/8474.html">链接</a>.</p>
<h3 id="gptcommit">gptcommit</h3>
<p><a href="https://github.com/zurawiki/gptcommit">gptcommit</a> 自动根据代码更改生成 commit 消息.</p>
<blockquote>
<p>[!TIP]<br>
可以直接使用 vscode 插件集成 vscode-gptcommit</p>
</blockquote>
<h3 id="prompt">prompt</h3>
<p>随着 ChatGPT 带来的 AI 大模型的技术突破，也带来了一项新的 AI 工程技术，即 prompt (用于规则化提问，生成预计业务逻辑回答). 这项技术让 AI 从对话中的生成回答能够真正地落地于其它应用工程。比如前面提到的 gptcommit, gpt-migrate 等都是对 prompt 的应用.</p>
<blockquote>
<p>[!NOTE]<br>
prompt: 简单来说就是将问题模板化，进而生成预期结果.</p>
</blockquote>
<p>示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/StanGirard/quivr/blob/fix/preview/backend/llm/prompt/LANGUAGE_PROMPT.py">https://github.com/StanGirard/quivr/blob/fix/preview/backend/llm/prompt/LANGUAGE_PROMPT.py</a></p>
</li>
</ul>
<h2 id="AI-Workflow">AI Workflow</h2>
<p>通常的 AI 工作流如下：</p>
<pre><code class="highlight mermaid">graph LR
    subgraph ETL/ML Engineer
        AI-Train[AI Training] --&gt;|Trained Models| Model-Optimization[Model-Optimization]
        Model-Optimization --&gt;|Optimized Models| Model-Storage[(Model-Storage)]
    end
    subgraph Dev/ML Ops
        Model-Storage --&gt;|Deploy| Inference-Serving[Inference-Serving]
    end
    subgraph App Developer
        Inference-Serving &lt;--&gt;|Query/Result| Application[Application]
    end</code></pre>
<h2 id="AI-Serving">AI Serving</h2>
<p>服务化的需求：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>可扩展 pytorch、tensorflow、onnx 等类型模型的推理。</p>
</li>
<li class="lvl-2">
<p>能够支持 http grpc 通信。</p>
</li>
<li class="lvl-2">
<p>基于 pipline 处理流程，方便扩展流水线。</p>
</li>
<li class="lvl-2">
<p>能够支持高并发处理。</p>
</li>
<li class="lvl-2">
<p>可参考 triton 服务，调研其他框架。</p>
</li>
</ul>
<p>理想方案</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>mode inference -&gt; kserve {http/grpc}  + [ 业务代码服务 { flask } + [ dapr ] ]。</p>
</li>
<li class="lvl-2">
<p>业务代码 inference -&gt; kserve {http/grpc} 。</p>
</li>
</ul>
<p>现有方案：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>多模型同一个容器运行。</p>
</li>
<li class="lvl-2">
<p>提供 http 请求。</p>
</li>
</ul>
<p>其它方案 demo 或技术：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/wmeints/mlops-airflow-sample">mlops-airflow-sample</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/569409465">ml stack</a></p>
</li>
</ul>
<h3 id="AI-Serving-Solution">AI Serving Solution</h3>
<h4 id="API服务工具">API 服务工具</h4>
<p>Torch Serving、Tensor Serving 和 Triton Serving 都是用于将机器学习模型部署为 API 服务的工具。它们都提供了类似的功能，例如模型加载、推理请求处理和模型版本控制等。</p>
<p>然而，它们之间也存在一些区别。以下是一些了解到的区别：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Torch Serving 是由 PyTorch 社区开发的，专门用于部署 PyTorch 模型。它支持多种模型格式，例如 TorchScript 和 ONNX 等。</p>
</li>
<li class="lvl-2">
<p>Tensor Serving 是由 Google 开发的，专门用于部署 TensorFlow 模型。它支持 TensorFlow SavedModel 格式。</p>
</li>
<li class="lvl-2">
<p>Triton Serving 是由 NVIDIA 开发的，专门用于部署深度学习模型。它支持多种模型格式，例如 TensorFlow、PyTorch 和 ONNX 等。</p>
</li>
<li class="lvl-2">
<p>ONNX Runtime：ONNX Runtime 是一个用于部署 ONNX 模型的高性能、跨平台的推理引擎。它支持多种硬件平台和操作系统，包括 CPU、GPU、FPGA 和 Edge 设备等。可以使用 ONNX Runtime 来加载 ONNX 模型并提供服务，同时还可以使用其提供的 API 来管理模型版本、优化推理性能等。</p>
</li>
</ul>
<p>因此，虽然这些工具都提供了类似的功能，但它们的实现方式和支持的模型格式可能会有所不同。</p>
<h4 id="AI-Dev-辅助框架">AI Dev 辅助框架</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://airflow.apache.org/docs/apache-airflow/stable/">Airflow</a>: 用于使用编程的方式实现开发、调度和监控面向批处理的工作流。</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/marclamberti/airflow-kubernetes">airflow 集成到 k8s</a>。</li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://docs.dapr.io/">Dapr</a>: Dapr 是一个开源的分布式应用程序运行时，它提供了一组构建块，用于简化应用程序的开发和部署。其中包括 Service Invocation、State Management、Pub/Sub 等功能，可以帮助快速构建和部署 AI 服务。Dapr 还提供了多种通信协议和 SDK，方便与其他服务进行交互。</p>
</li>
<li class="lvl-2">
<p><a href="https://www.kubeflow.org/">Kubeflow</a>: Kubeflow 是一个用于部署机器学习工作流的开源平台。它基于 Kubernetes 构建，提供了一组工具和 API，用于管理模型训练、推理、部署等过程。可以使用 Kubeflow 来构建端到端的机器学习工作流，同时还可以使用其提供的组件来部署和管理 AI 服务。</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/alauda/kubeflow-chart">国内扩展 alauda</a>。</li>
<li class="lvl-4"><a href="https://github.com/tencentmusic/cube-studio">国内相似平台 cubestudio</a>。</li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://github.com/kserve">kServe</a>: 是一个用于构建和部署机器学习模型的开源框架。它提供了一个简单易用的 API，可以帮助快速构建和部署机器学习模型。kServe 支持多种模型格式，包括 TensorFlow、PyTorch、ONNX 等。它还提供了多种部署方式，例如 HTTP、gRPC 等，可以满足不同场景下的需求。以下是一些有用的链接：</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://kserve.github.io/website/">kServe 官方文档</a></li>
<li class="lvl-4"><a href="https://github.com/kserve/kserve">kServe GitHub 仓库</a></li>
<li class="lvl-4"><a href="https://kserve.github.io/website/0.10/get_started/first_isvc/">kServe inferenceService</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://developer.nvidia.com/tao-toolkit">TAO Toolkit</a>：是一个用于训练和部署深度学习模型的工具包，它提供了一系列的工具和库，可以帮助用户快速构建和部署深度学习模型。在使用 TAO Toolkit 之前，需要先了解深度学习的基本概念和使用方法。可以参考以下文档：</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://deeplearning4j.org/cn/index.html">Deep Learning 中文文档</a></li>
<li class="lvl-4"><a href="https://www.tensorflow.org/">TensorFlow 官方文档</a></li>
<li class="lvl-4"><a href="https://pytorch.org/">PyTorch 官方文档</a></li>
<li class="lvl-4"><a href="https://docs.nvidia.com/cuda/index.html">NVIDIA GPU 官方文档</a></li>
<li class="lvl-4"><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html">CUDA 官方文档</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://github.com/modzy/chassis">Chassis</a>: 是一个开源项目，可以在几分钟内将 ML 模型转换为容器化的预测 API。</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://chassis.ml/tutorials/ds-deploy/">Chassis</a> 脚本化部署。</li>
<li class="lvl-4"><a href="https://chassis.ml/getting-started/getting-started/">Chassis Getting Started</a>。</li>
</ul>
</li>
</ul>
<h3 id="TensorFlow-Serving">TensorFlow Serving</h3>
<h4 id="能否给一个使用-TensorFlow-Serving-将机器学习模型部署为服务的示例">能否给一个使用 TensorFlow Serving 将机器学习模型部署为服务的示例</h4>
<p>想要了解如何使用 TensorFlow Serving 将机器学习模型部署为服务。以下是一个使用 TensorFlow Serving 调用 TensorFlow 模型的示例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先，需要安装 TensorFlow Serving。可以使用以下命令在 Linux 上安装 TensorFlow Serving：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install tensorflow-serving-api</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>然后，需要启动 TensorFlow Serving。可以使用以下命令启动 TensorFlow Serving：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tensorflow_model_server --port=8500 --rest_api_port=8501 --model_name=my_model --model_base_path=path/to/your/model</span><br></pre></td></tr></tbody></table></figure>
<p>其中，my_model 是模型的名称，path/to/your/model 是模型存储路径。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>接下来，需要使用 TensorFlow Client 调用模型。以下是一个使用 TensorFlow Client 调用模型的示例：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入数据</span></span><br><span class="line">input_data = {<span class="string">"instances"</span>: [{<span class="string">"input"</span>: np.random.rand(<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>).tolist()}]}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">response = requests.post(</span><br><span class="line">    <span class="string">"http://localhost:8501/v1/models/my_model:predict"</span>, json=input_data</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析响应</span></span><br><span class="line">output_data = json.loads(response.content.decode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输出张量</span></span><br><span class="line">output_tensor = np.array(output_data[<span class="string">"predictions"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理输出张量</span></span><br></pre></td></tr></tbody></table></figure>
<p>其中，my_model 是模型的名称。</p>
<h3 id="Torch-Serving">Torch Serving</h3>
<h4 id="能否给一个使用-Torch-Serving-将机器学习模型部署为服务的示例">能否给一个使用 Torch Serving 将机器学习模型部署为服务的示例</h4>
<p>想要了解如何使用 Torch Serving 将机器学习模型部署为服务。以下是一个使用 Torch Serving 部署 PyTorch 模型的示例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先，需要安装 Torch Serving。可以使用以下命令在 Linux 上安装 Torch Serving：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install torchserve torch-model-archiver</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>接下来，需要将 PyTorch 模型转换为 TorchScript 格式。可以使用以下代码将 PyTorch 模型转换为 TorchScript：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 PyTorch 模型</span></span><br><span class="line">model = torch.load(<span class="string">"path/to/your/model.pth"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型转换为 TorchScript</span></span><br><span class="line">example_input = torch.rand(<span class="number">1</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>)</span><br><span class="line">traced_script_module = torch.jit.trace(model, example_input)</span><br><span class="line">traced_script_module.save(<span class="string">"path/to/your/model.pt"</span>)</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>然后，需要创建一个模型描述文件。该文件描述了模型的输入和输出格式。以下是一个示例模型描述文件：</p>
</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"input_shape"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">3</span><span class="punctuation">,</span> <span class="number">224</span><span class="punctuation">,</span> <span class="number">224</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"output_shape"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">1000</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"mean"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0.485</span><span class="punctuation">,</span> <span class="number">0.456</span><span class="punctuation">,</span> <span class="number">0.406</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"std"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">0.229</span><span class="punctuation">,</span> <span class="number">0.224</span><span class="punctuation">,</span> <span class="number">0.225</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>接下来，需要使用 Torch Model Archiver 将模型打包为 Torch Serving 可以使用的格式。可以使用以下命令将模型打包：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">torch-model-archiver --model-name my_model --version 1.0 --serialized-file path/to/your/model.pt --handler path/to/your/handler.py --extra-files path/to/your/model_description.json --export-path model_store</span><br></pre></td></tr></tbody></table></figure>
<p>其中，my_model 是模型的名称，1.0 是模型的版本号，path/to/your/model.pt 是 TorchScript 模型的路径，path/to/your/handler.py 是模型处理程序的路径，path/to/your/model_description.json 是模型描述文件的路径，model_store 是要导出模型的路径。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>最后，可以使用以下命令启动 Torch Serving：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">torchserve --start --model-store model_store --models my_model=your_model.mar</span><br></pre></td></tr></tbody></table></figure>
<p>其中，model_store 是模型存储路径，my_model 是模型的名称，your_model.mar 是模型的 Torch Serving 格式的文件。</p>
<p>这就是使用 Torch Serving 将 PyTorch 模型部署为服务的示例。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>接下来，需要使用 Torch Client 调用模型。以下是一个使用 Torch Client 调用模型的示例：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入数据</span></span><br><span class="line">input_data = {</span><br><span class="line">    <span class="string">"data"</span>: base64.b64encode(<span class="built_in">open</span>(<span class="string">"path/to/your/image.jpg"</span>, <span class="string">"rb"</span>).read()).decode(</span><br><span class="line">        <span class="string">"utf-8"</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">"content_type"</span>: <span class="string">"application/octet-stream"</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送请求</span></span><br><span class="line">response = requests.post(<span class="string">"http://localhost:8080/predictions/my_model"</span>, json=input_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析响应</span></span><br><span class="line">output_data = json.loads(response.content.decode(<span class="string">"utf-8"</span>))</span><br></pre></td></tr></tbody></table></figure>
<p>其中，path/to/your/image.jpg 是输入图像的路径，my_model 是模型的名称。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>最后，可以使用 output_data 变量中的结果。结果的格式取决于模型的输出格式。例如，如果模型输出一个张量，可以使用以下代码获取该张量：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输出张量</span></span><br><span class="line">output_tensor = np.array(output_data[<span class="string">"predictions"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理输出张量</span></span><br></pre></td></tr></tbody></table></figure>
<p>这就是使用 Torch Serving 调用 PyTorch 模型的示例。</p>
<h3 id="Triton-Serving">Triton Serving</h3>
<h4 id="如何使用Triton-Serving部署AI服务">如何使用 Triton Serving 部署 AI 服务</h4>
<p>为了使用 Triton Serving 部署 AI 服务，可以按照以下步骤进行操作：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>按照官方文档提供的说明安装 Triton Serving：<a href="https://github.com/triton-inference-server/server/blob/main/docs/quickstart.md">https://github.com/triton-inference-server/server/blob/main/docs/quickstart.md</a></p>
</li>
<li class="lvl-2">
<p>将模型转换为 Triton Serving 可以理解的格式，以准备部署。Triton Serving 支持多种模型格式，包括 TensorFlow SavedModel、ONNX 和 PyTorch。可以在 Triton Serving 文档中找到有关如何准备模型的更多信息：<a href="https://github.com/triton-inference-server/server/blob/main/docs/modelrepository.md">https://github.com/triton-inference-server/server/blob/main/docs/modelrepository.md</a></p>
</li>
<li class="lvl-2">
<p>准备好模型后，可以按照 Triton Serving 文档中的说明创建模型存储库：<a href="https://github.com/triton-inference-server/server/blob/main/docs/modelrepository.md#creating-a-model-repository">https://github.com/triton-inference-server/server/blob/main/docs/modelrepository.md#creating-a-model-repository</a></p>
</li>
<li class="lvl-2">
<p>运行以下命令启动 Triton Serving 服务器：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tritonserver --model-repository=/path/to/model/repository</span><br></pre></td></tr></tbody></table></figure>
<p>将 /path/to/model/repository 替换为模型存储库的路径。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>服务器运行后，可以使用 Triton Serving 客户端库将推理请求发送到服务器。Triton Serving 支持多种客户端库，包括 Python、C++ 和 Java。可以在 Triton Serving 文档中找到有关如何使用客户端库的更多信息：<a href="https://github.com/triton-inference-server/client">https://github.com/triton-inference-server/client</a></p>
</li>
</ul>
<h3 id="Airflow">Airflow</h3>
<h4 id="如何用Airflow框架实现模型常驻在内存的AI服务">如何用 Airflow 框架实现模型常驻在内存的 AI 服务</h4>
<p>首先，Airflow 框架主要用于调度和监控数据处理任务，而不是用于实现 AI 服务。但是，可以使用 Airflow 来调度和监控运行 AI 服务的任务。</p>
<p>要实现模型常驻在内存的 AI 服务，需要使用一个 Web 框架（如 Flask 或 Django）来创建一个 API，该 API 将加载模型并接收输入数据以进行预测。然后，可以使用 Airflow 来调度和监控此 API 的运行。</p>
<p>以下是一些可能有用的步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用 Flask 或 Django 创建一个 API，该 API 将加载模型并接收输入数据以进行预测。可以使用以下代码作为起点：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/predict"</span>, methods=[<span class="string">"POST"</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>():</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># Load model</span></span><br><span class="line">    <span class="comment"># Get input data from request</span></span><br><span class="line">    <span class="comment"># Make prediction</span></span><br><span class="line">    <span class="comment"># Return prediction</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>将 API 部署到服务器上，并确保它可以在后台运行。可以使用 gunicorn 或 uwsgi 等工具来运行 API。</p>
</li>
<li class="lvl-2">
<p>创建一个 Airflow DAG，该 DAG 将定期调用 API 以确保其保持活动状态。可以使用以下代码作为起点：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> airflow <span class="keyword">import</span> DAG</span><br><span class="line"><span class="keyword">from</span> airflow.operators.http_operator <span class="keyword">import</span> SimpleHttpOperator</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line">default_args = {</span><br><span class="line">    <span class="string">"owner"</span>: <span class="string">"airflow"</span>,</span><br><span class="line">    <span class="string">"depends_on_past"</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">"start_date"</span>: datetime(<span class="number">2021</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    <span class="string">"retries"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"retry_delay"</span>: timedelta(minutes=<span class="number">5</span>),</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dag = DAG(</span><br><span class="line">    <span class="string">"ai_service"</span>,</span><br><span class="line">    default_args=default_args,</span><br><span class="line">    schedule_interval=timedelta(minutes=<span class="number">30</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">predict_task = SimpleHttpOperator(</span><br><span class="line">    task_id=<span class="string">"predict"</span>,</span><br><span class="line">    method=<span class="string">"POST"</span>,</span><br><span class="line">    http_conn_id=<span class="string">"my_api"</span>,</span><br><span class="line">    endpoint=<span class="string">"/predict"</span>,</span><br><span class="line">    headers={<span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>},</span><br><span class="line">    data=<span class="string">'{"input": "data"}'</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>将 Airflow DAG 部署到 Airflow 服务器上，并确保它可以在后台运行。</p>
</li>
</ul>
<h4 id="Airflow能否手动配置运行这个AI服务的数量">Airflow 能否手动配置运行这个 AI 服务的数量</h4>
<p>Airflow 本身并不提供手动配置运行任务的数量的功能。但是，可以通过修改 DAG 的 scheduleinterval 参数来控制任务的运行频率，从而间接地控制任务的数量。例如，将 scheduleinterval 设置为 timedelta (minutes=1) 将使任务每分钟运行一次，从而增加任务的数量。</p>
<p>另外，可以使用 Airflow 的任务并发设置来控制同时运行的任务数量。可以在 Airflow 的配置文件中设置 maxactiverunsperdag 参数来限制每个 DAG 同时运行的任务数量。例如，将 maxactiverunsperdag 设置为 2 将使每个 DAG 最多同时运行 2 个任务。</p>
<p>请注意，这些设置可能会影响服务器资源使用情况，因此需要根据具体需求进行调整。</p>
<h3 id="Dapr">Dapr</h3>
<h4 id="如何用Dapr框架实现模型常驻在内存的AI服务">如何用 Dapr 框架实现模型常驻在内存的 AI 服务</h4>
<p>首先，Dapr 是一个开源的微服务框架，它可以帮助开发人员构建分布式应用程序。它提供了一些有用的功能，例如状态管理，消息传递和服务发现。但是，它本身并不是一个 AI 框架，因此需要使用其他 AI 框架来实现模型常驻在内存的 AI 服务。</p>
<p>一种常见的方法是使用 TensorFlow Serving。TensorFlow Serving 是一个用于生产环境的 TensorFlow 模型服务器，它可以轻松地将 TensorFlow 模型部署到生产环境中。可以使用 Dapr 框架来管理 TensorFlow Serving 实例，并使用 Dapr 的状态管理功能来存储模型的元数据和状态。</p>
<p>以下是一个使用 Dapr 和 TensorFlow Serving 实现模型常驻在内存的 AI 服务的示例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先，需要安装 Dapr 和 TensorFlow Serving。可以按照官方文档进行安装。</p>
</li>
<li class="lvl-2">
<p>然后，需要编写一个 Dapr 组件来管理 TensorFlow Serving 实例。可以在 Dapr 配置文件中定义此组件，如下所示：</p>
</li>
</ul>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Component</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tensorflow-serving</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">external</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">grpcPort</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">"8500"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restPort</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">"8501"</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">"TensorFlow Serving component"</span></span><br><span class="line">  <span class="attr">status:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="string">"localhost:8500"</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>接下来，需要编写一个 Dapr 应用程序来使用 TensorFlow Serving 组件。可以使用 Dapr 的状态管理功能来存储模型的元数据和状态。以下是一个使用 Python 编写的示例：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dapr.clients</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize Dapr client</span></span><br><span class="line"><span class="keyword">with</span> dapr.clients.DaprClient() <span class="keyword">as</span> d:</span><br><span class="line">    <span class="comment"># Load TensorFlow model</span></span><br><span class="line">    model = tf.keras.models.load_model(<span class="string">"path/to/model"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Register model with TensorFlow Serving</span></span><br><span class="line">    response = d.invoke_service(</span><br><span class="line">        <span class="string">"tensorflow-serving"</span>,</span><br><span class="line">        <span class="string">"v1/models/model:predict"</span>,</span><br><span class="line">        data=model.to_json(),</span><br><span class="line">        metadata={<span class="string">"content-type"</span>: <span class="string">"application/json"</span>},</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Store model metadata and state in Dapr state store</span></span><br><span class="line">    d.save_state(</span><br><span class="line">        <span class="string">"model-metadata"</span>,</span><br><span class="line">        {</span><br><span class="line">            <span class="string">"model_name"</span>: <span class="string">"model"</span>,</span><br><span class="line">            <span class="string">"model_version"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"model_input_shape"</span>: model.input_shape,</span><br><span class="line">        },</span><br><span class="line">    )</span><br><span class="line">    d.save_state(<span class="string">"model-state"</span>, {<span class="string">"status"</span>: <span class="string">"running"</span>})</span><br></pre></td></tr></tbody></table></figure>
<p>在此示例中，首先使用 Dapr 客户端加载 TensorFlow 模型。然后，使用 Dapr 客户端调用 TensorFlow Serving 组件，并将模型注册到 TensorFlow Serving 中。最后，使用 Dapr 客户端将模型的元数据和状态存储在 Dapr 状态存储中。</p>
<p>已经使用 Dapr 客户端加载了 TensorFlow 模型，并将其注册到 TensorFlow Serving 中。要调用加载的模型，可以使用 Dapr 客户端调用 TensorFlow Serving 组件的 REST API。</p>
<p>以下是一个使用 Python 编写的示例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> dapr.clients</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize Dapr client</span></span><br><span class="line"><span class="keyword">with</span> dapr.clients.DaprClient() <span class="keyword">as</span> d:</span><br><span class="line">    <span class="comment"># Call TensorFlow Serving REST API</span></span><br><span class="line">    response = d.invoke_binding(</span><br><span class="line">        <span class="string">"tensorflow-serving"</span>,</span><br><span class="line">        <span class="string">"rest"</span>,</span><br><span class="line">        data={<span class="string">"instances"</span>: [[<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>]]},</span><br><span class="line">        metadata={<span class="string">"content-type"</span>: <span class="string">"application/json"</span>},</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Process response</span></span><br><span class="line">    <span class="built_in">print</span>(response.content)</span><br></pre></td></tr></tbody></table></figure>
<p>在此示例中，使用 Dapr 客户端调用 TensorFlow Serving 组件的 REST API，并将输入数据作为 JSON 格式的数据发送。可以根据自己的需求修改输入数据的格式和内容。最后，打印出 TensorFlow Serving 返回的响应。</p>
<h4 id="Dapr能否手动配置运行上面提到的AI服务数量">Dapr 能否手动配置运行上面提到的 AI 服务数量</h4>
<p>Dapr 是一个开源的分布式应用程序运行时，它可以帮助开发人员轻松地构建和运行微服务应用程序。Dapr 提供了一种简单的方式来注册和发现服务，并提供了一组 API 来调用这些服务。在使用 Dapr 和 TensorFlow Serving 实现模型常驻在内存的 AI 服务的基础上，可以使用 Dapr 客户端调用 TensorFlow Serving 组件的 REST API，或者将 TensorFlow Serving 组件注册为 Dapr 服务并使用 Dapr 客户端调用其 gRPC API。</p>
<p>关于 Dapr 运行的 AI 服务数量的配置，Dapr 提供了一种称为 “Actor” 的编程模型，它可以帮助开发人员轻松地构建高度可扩展的应用程序。Actor 是一种轻量级的计算单元，它可以自动缩放和分区，以处理大量的并发请求。可以使用 Dapr 的 Actor 模型来管理和配置 Dapr 运行的 AI 服务数量。</p>
<p>具体来说，可以使用 Dapr 的 Actor 模型来创建一个名为 “AI 服务” 的 Actor 组，该组可以包含多个 AI 服务 Actor 实例。然后，可以使用 Dapr 客户端调用 Actor 组的 API 来创建、删除和管理 AI 服务 Actor 实例。通过这种方式，可以手动配置 Dapr 运行的 AI 服务数量，并根据需要动态缩放。</p>
<h4 id="能否将tensorflow-serving-替换为torch-serving">能否将 tensorflow serving 替换为 torch serving</h4>
<p>关于将 TensorFlow Serving 替换为 Torch Serving，Dapr 并不限制使用哪种 AI 服务组件。只要 AI 服务组件实现了 Dapr 所需的 API，就可以将其注册为 Dapr 组件，并使用 Dapr 客户端调用其 API。因此，可以使用 Torch Serving 替换 TensorFlow Serving，并使用 Dapr 客户端调用其 API。</p>
<p>具体来说，需要将 Torch Serving 组件实现为 Dapr 组件，并将其注册到 Dapr 运行时中。然后，可以使用 Dapr 客户端调用 Torch Serving 组件的 API，就像在上述示例中使用 Dapr 客户端调用 TensorFlow Serving 组件的 API 一样。</p>
<h4 id="TensorFlow-Serving-和-Torch-Serving-的区别">TensorFlow Serving 和 Torch Serving 的区别</h4>
<p>TensorFlow Serving 和 Torch Serving 都是用于将机器学习模型部署为可用于生产环境的 API 的工具。它们的主要区别在于它们支持的框架不同。</p>
<p>TensorFlow Serving 是专门为 TensorFlow 模型设计的，它提供了一个高效的、可扩展的方式来部署 TensorFlow 模型。它支持多种模型格式，包括 SavedModel、SessionBundle 和 TensorFlow Hub 模块。TensorFlow Serving 还提供了一些高级功能，例如模型版本控制、模型热更新和模型分片。</p>
<p>Torch Serving 是专门为 PyTorch 模型设计的，它提供了一个轻量级的、可扩展的方式来部署 PyTorch 模型。它支持多种模型格式，包括 TorchScript 和 ONNX。Torch Serving 还提供了一些高级功能，例如模型版本控制、模型热更新和模型分片。</p>
<p>总的来说，TensorFlow Serving 和 Torch Serving 都是非常有用的工具，可以帮助将机器学习模型部署到生产环境中。选择哪个工具取决于使用的框架以及具体需求。</p>
<h3 id="AI-serving-app">AI serving app</h3>
<h4 id="flask-app">flask app</h4>
<p>实现功能：将 AI 服务的图片预测和输出显示到 web 页面</p>
<blockquote>
<p>[!NOTE]</p>
<ul class="lvl-1">
<li class="lvl-2">图片保存在本地子文件夹 <code>.predictions</code> 中以请求<code>检测时间</code>保存在对应子目录下。</li>
<li class="lvl-2">提供一个接口返回本地子文件夹<code>.predictions</code> 中的目录列表。</li>
<li class="lvl-2">返回页面增加以下 html 样式，方面人查询 <code>predictions</code> 中的图片结果。</li>
</ul>
</blockquote>
<p>为了将 AI 服务的图片预测和输出显示到 web 页面，需要使用一些 web 开发技术。以下是一些可能有用的步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建一个 web 应用程序，该应用程序将接收用户上传的图像并将其发送到 AI 服务进行预测。可以使用任何 web 框架来实现这一点，例如 Flask 或 Django。</p>
</li>
<li class="lvl-2">
<p>在 web 应用程序中，使用 AI 服务客户端库将图像发送到 AI 服务进行预测。可以使用 Triton Serving 客户端库来实现这一点。有关如何使用 Triton Serving 客户端库的更多信息，请参见以下链接：<a href="https://github.com/triton-inference-server/client">https://github.com/triton-inference-server/client</a></p>
</li>
<li class="lvl-2">
<p>将 AI 服务的预测结果返回到 web 应用程序，并将其显示在 web 页面上。可以使用 HTML 和 JavaScript 来实现这一点。例如，可以使用 JavaScript 将预测结果显示在一个图像元素中。</p>
</li>
</ul>
<p>以下是一个可能有用的代码示例，它演示了如何使用 Flask 和 Triton Serving 客户端库将图像发送到 AI 服务进行预测，并将预测结果显示在 web 页面上：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> yolov5_utils  <span class="comment"># pip install yolov5-utils</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, send_file  <span class="comment"># pip install flask</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ROOT = pathlib.Path((os.path.dirname(__file__)))</span><br><span class="line">PREDICTIONS = ROOT / <span class="string">".predictions"</span>  <span class="comment"># 预测保存文件夹</span></span><br><span class="line">DATE_FORMAT = <span class="string">"%Y-%m-%d_%H-%M-%S"</span>  <span class="comment"># 保存结果在子文件夹日期名称</span></span><br><span class="line">LIST_RENDER_FILE = <span class="string">"index.html"</span>  <span class="comment"># web 返回渲染页面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_det_history_list</span>():</span><br><span class="line">    <span class="string">"""获取 PREDICTIONS 下的所有预测结果,并按日期最新,从左到右返回"""</span></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        os.path.relpath(p, PREDICTIONS)</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">sorted</span>(PREDICTIONS.glob(<span class="string">"**/*"</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> p.suffix <span class="keyword">in</span> {<span class="string">".jpg"</span>, <span class="string">".png"</span>}</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/infer"</span>, methods=[<span class="string">"POST"</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>():</span><br><span class="line">    <span class="string">"""推理接口, 只接受POST 请求,并将结果保存在 PREDICTIONS 下,并返回推理结果"""</span></span><br><span class="line">    data = request.files[<span class="string">"image"</span>].read()</span><br><span class="line">    sub = datetime.datetime.now().strftime(DATE_FORMAT)</span><br><span class="line">    results = model(Image.<span class="built_in">open</span>(io.BytesIO(data)), size=PREDICT_IMAGE_SIZE)</span><br><span class="line">    results.save(save_dir=PREDICTIONS / sub)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        LIST_RENDER_FILE,</span><br><span class="line">        prediction=results,</span><br><span class="line">        image_list=get_det_history_list(),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="string">"""默认的 web 页面,返回检测历史结果"""</span></span><br><span class="line">    <span class="keyword">return</span> render_template(</span><br><span class="line">        LIST_RENDER_FILE,</span><br><span class="line">        image_list=get_det_history_list(),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/display/&lt;path:filename&gt;"</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="string">"""定于回调展示检测结果的图片</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        filename: 是 PREDICTIONS 下的图片的路径.(包括图片名)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> send_file(os.path.join(PREDICTIONS, filename), mimetype=<span class="string">"image/jpeg"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>():</span><br><span class="line">    <span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">"--model_url"</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">        default=<span class="string">"yolov5m.pt"</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">"Triton model url such as http://localhost:8000/v2/models/yolov5,or yolov5 family name likes yolov5m.pt"</span>,</span><br><span class="line">    )</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">"--imgsz"</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">        default=<span class="number">1280</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">"The size of the image is detected after preprocessing"</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    FLAGS = parse_args()</span><br><span class="line">    PREDICT_IMAGE_SIZE = FLAGS.imgsz</span><br><span class="line">    model = yolov5_utils.load(FLAGS.model_url)  <span class="comment"># 加载 yolov5 模型</span></span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, port=<span class="number">5000</span>, debug=<span class="literal">False</span> <span class="keyword">if</span> sys.gettrace() <span class="keyword">else</span> <span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>这个示例使用 Flask 框架创建了一个 web 应用程序，当用户上传图像时，它将图像发送到 Triton Serving 进行预测，并将预测结果显示在 web 页面上。</p>
<p>创建了一个新的 HTML 模板 index.html 在 templates 目录下，它显示了 .predictions 子文件夹中的目录列表。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Image Detection<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.image</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.image-list</span> {</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">        }</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Image Detection Input<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提交时将数据使用POST方法路由到 /infer --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">action</span>=<span class="string">"/infer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"image"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 展示当前检测结果, 使用render_template传入的 prediction 变量展示 --&gt;</span></span><br><span class="line">    {% if prediction is defined %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Prediction: {{ prediction }}<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"{{ url_for('display', filename=image_list[0] ) }}"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    {% endif %}</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 展示历史检测结果 --&gt;</span></span><br><span class="line">    {% if image_list is defined and image_list %}</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Detection History:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        {% for file in image_list %}</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/display/{{ file }}"</span>&gt;</span>{{ file }}<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        {% endfor %}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    {% endif %}</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Kubeflow">Kubeflow</h2>
<h3 id="install">install</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/myoh0623/kubeflow.git">myoh0623 install</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/alauda/kubeflow-chart.git">alauda kubeflow chart</a></p>
</li>
</ul>
<h2 id="KServe">KServe</h2>
<h3 id="Quickstart">Quickstart</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://kserve.github.io/website/0.10/get_started/#install-the-kserve-quickstart-environment">experimental quickstart</a></p>
</li>
</ul>
<h3 id="modelmesh-installing">modelmesh installing</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/kserve/modelmesh-serving/blob/main/docs/quickstart.md">modelmesh quickstart install</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/kserve/modelmesh-serving/blob/main/docs/install/install-script.md">standard install</a></p>
</li>
</ul>
<h3 id="Demo-Test">Demo Test</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>kerve quick start</p>
</li>
<li class="lvl-2">
<p><a href="https://kserve.github.io/website/0.10/get_started/first_isvc/#run-your-first-inferenceservice">run-your-first-inferenceservice</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/tduffy000/kfserving-uri-examples">kfserving-uri-examples</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Minikube</span></span><br><span class="line"><span class="built_in">export</span> INGRESS_HOST=$(minikube ip)</span><br><span class="line"><span class="comment"># Other environment(On Prem)</span></span><br><span class="line"><span class="built_in">export</span> INGRESS_HOST=$(kubectl get po -l istio=ingressgateway -n istio-system -o jsonpath=<span class="string">'{.items[0].status.hostIP}'</span>)</span><br><span class="line"><span class="built_in">export</span> INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=<span class="string">'{.spec.ports[?(@.name=="http2")].nodePort}'</span>)</span><br><span class="line"><span class="built_in">export</span> SERVICE_HOSTNAME=$(kubectl get inferenceservice sklearn-iris -n kserve-test -o jsonpath=<span class="string">'{.status.url}'</span> | <span class="built_in">cut</span> -d <span class="string">"/"</span> -f 3)</span><br><span class="line">curl -v -H <span class="string">"Host: <span class="variable">${SERVICE_HOSTNAME}</span>"</span> <span class="string">"http://<span class="variable">${INGRESS_HOST}</span>:<span class="variable">${INGRESS_PORT}</span>/v1/models/sklearn-iris:predict"</span> -d @./iris-input.json</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>kiali<br>
安装 istioctl</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.15/samples/addons/kiali.yaml</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.15/samples/addons/prometheus.yaml</span><br></pre></td></tr></tbody></table></figure>
<h2 id="TAO">TAO</h2>
<p><a href="https://developer.nvidia.com/tao-toolkit">NVIDIA TAO Toolkit</a> 是 Nvidia 构建的<a href="https://blogs.nvidia.com/blog/2019/02/07/what-is-transfer-learning/">迁移学习</a>框架，能将现有的或合成数据使用预训练的模型高效地训练出自定义的模型，<a href="https://docs.nvidia.com/tao/tao-toolkit/text/overview.html">官方介绍</a>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/index.html">TAO Toolkit Index</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/tao_toolkit_quick_start_guide.html">TAO Toolkit Quick Start Guide</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/tao_toolkit_api/api_overview.html">TAO Toolkit API</a></p>
</li>
</ul>
<h3 id="TAO-Toolkit-API">TAO Toolkit API</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/teams/tao/helm-charts/tao-toolkit-api">Helm Chart</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/tao_toolkit_api/api_deployment.html">API Deployment</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/automl/automl.html">AutoML</a></p>
</li>
</ul>
<h3 id="CV">CV</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/offline_data_augmentation.html">Offline Data Augmentation</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/tensorboard_visualization.html">Tensorboard Visualization</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/data_annotation_format.html">Data Annotation Format</a></p>
</li>
</ul>
<h3 id="ClearML">ClearML</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/mlops/clearml.html#tao-toolkit-clearml">ClearML Integration</a></p>
</li>
</ul>
<h3 id="Deploy">Deploy</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/tao_cv_triton_inf_server/index.html">Triton Deploy</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/NVIDIA-AI-IOT/tao-toolkit-triton-apps">Triton Integration Examples</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/deeplearning/riva/user-guide/docs/overview.html">Riva</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/tao/tao-toolkit/text/ds_tao/deepstream_tao_integration.html">DeepStream Integration</a></p>
</li>
</ul>
<h2 id="ClearML-2">ClearML</h2>
<p>ClearML 是一个开源的平台，用于管理和跟踪机器学习实验。它提供了一个集成的界面，可以帮助用户管理数据集、模型、超参数和实验结果。此外，ClearML 还提供了自动化的模型选择和调优功能，可以帮助用户快速构建和部署机器学习模型。</p>
<p>如果想了解更多关于 ClearML 的信息，可以参考以下文档：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.clear.ml/">ClearML 官方文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/allegroai/clearml">ClearML GitHub 仓库</a></p>
</li>
</ul>
<h2 id="pytorch">pytorch</h2>
<h3 id="Model-construct-strategy">Model construct strategy</h3>
<p>在 PyTorch 中构建模型的一般步骤如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>定义模型类：定义一个继承自 nn.Module 的类，该类将包含模型的结构和参数。</p>
</li>
<li class="lvl-2">
<p>定义前向传递函数：在模型类中定义一个 forward 函数，该函数将定义模型的前向传递逻辑。</p>
</li>
<li class="lvl-2">
<p>定义损失函数：选择适当的损失函数，例如交叉熵损失函数或均方误差损失函数。</p>
</li>
<li class="lvl-2">
<p>定义优化器：选择适当的优化器，例如随机梯度下降（SGD）或 Adam 优化器。</p>
</li>
<li class="lvl-2">
<p>训练模型：使用训练数据对模型进行训练，通过反向传播算法更新模型参数。</p>
</li>
<li class="lvl-2">
<p>评估模型：使用测试数据对模型进行评估，计算模型的准确率或其他性能指标。</p>
</li>
</ul>
<p>下面是一个简单的示例，展示如何在 PyTorch 中构建一个简单的全连接神经网络模型：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_size, hidden_size, num_classes</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleNet, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(input_size, hidden_size)  <span class="comment"># 输入层</span></span><br><span class="line">        <span class="variable language_">self</span>.relu = nn.ReLU()  <span class="comment"># 隐藏层</span></span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(hidden_size, num_classes)  <span class="comment"># 输出层</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        out = <span class="variable language_">self</span>.relu(out)</span><br><span class="line">        out = <span class="variable language_">self</span>.fc2(out)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型参数</span></span><br><span class="line">input_size = <span class="number">784</span>  <span class="comment"># 输入大小为28x28</span></span><br><span class="line">hidden_size = <span class="number">500</span></span><br><span class="line">num_classes = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化模型</span></span><br><span class="line">model = SimpleNet(input_size, hidden_size, num_classes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数和优化器</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="comment"># 前向传递</span></span><br><span class="line">    outputs = model(inputs)</span><br><span class="line">    loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向传播和优化</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估模型</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> images, labels <span class="keyword">in</span> test_loader:</span><br><span class="line">        images = images.reshape(-<span class="number">1</span>, <span class="number">28</span> * <span class="number">28</span>)</span><br><span class="line">        outputs = model(images)</span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)</span><br><span class="line">        total += labels.size(<span class="number">0</span>)</span><br><span class="line">        correct += (predicted == labels).<span class="built_in">sum</span>().item()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(</span><br><span class="line">        <span class="string">"Accuracy of the network on the 10000 test images: %d %%"</span></span><br><span class="line">        % (<span class="number">100</span> * correct / total)</span><br><span class="line">    )</span><br></pre></td></tr></tbody></table></figure>
<p>在这个示例中，定义了一个名为 SimpleNet 的模型类，它包含一个输入层、一个隐藏层和一个输出层。还定义了一个前向传递函数，该函数将输入数据传递到模型中，并返回模型的输出。使用交叉熵损失函数和随机梯度下降（SGD）优化器来训练模型，并使用测试数据对模型进行评估。</p>
<h3 id="Common-API">Common API</h3>
<h4 id="tensor-equal">tensor.equal</h4>
<p>使用 torch.equal () 函数来判断两个 tensor 是否相等。该函数会比较两个 tensor 的形状和元素值是否相等，如果相等则返回 True，否则返回 False。</p>
<p>示例代码如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">a = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">b = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">c = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(torch.equal(a, b))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(torch.equal(a, c))  <span class="comment"># False</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上面的示例中，定义了三个 tensor，其中 a 和 b 的元素值和形状都相等，而 c 的元素值不同，因此使用 torch.equal () 函数比较 a 和 b 时返回 True，比较 a 和 c 时返回 False。</p>
<h4 id="tensor-view">tensor.view</h4>
<p>tensor.view 是 PyTorch 中的一个方法，用于将一个 tensor 重塑为指定的形状。它返回一个新的 tensor，而不是修改原始 tensor。这个方法在深度学习中非常常用，因为在神经网络中，需要将数据重塑为特定的形状以进行计算。</p>
<p>tensor.view 的语法如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">view(*shape)</span><br></pre></td></tr></tbody></table></figure>
<p>其中，*shape 是一个可变参数，表示要重塑的形状。例如，如果有一个形状为 (3, 4) 的 tensor，可以使用 view 将其重塑为 (4, 3) 的 tensor：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">y = x.view(<span class="number">4</span>, <span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>需要注意的是，view 方法返回的 tensor 与原始 tensor 共享数据存储空间，因此在修改其中一个 tensor 的值时，另一个 tensor 的值也会发生变化。如果要避免这种情况，可以使用 clone 方法创建一个新的 tensor。</p>
<p>除了 view 方法，PyTorch 还提供了一些其他的 tensor 重塑方法，例如 reshape 和 permute。这些方法的使用方式与 view 类似，但有一些细微的差别，需要根据具体情况选择合适的方法。</p>
<h4 id="tensor-reshape">tensor.reshape</h4>
<p>pytorch tensor.reshape 是 PyTorch 中用于改变张量形状的函数之一。它可以将一个张量重塑为一个新的形状，而不改变其元素的数量或值。在 PyTorch 中，张量的形状可以通过 size () 函数获取，也可以通过 reshape () 函数修改。</p>
<p>reshape () 函数的语法如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">new_tensor = tensor.reshape(*shape)</span><br></pre></td></tr></tbody></table></figure>
<p>其中，tensor 是要重塑的张量，shape 是一个整数元组，表示新张量的形状。新张量的元素数量必须与原张量的元素数量相同，否则会引发错误。</p>
<p>例如，将一个形状为 (3, 4) 的张量重塑为一个形状为 (4, 3) 的张量，可以使用以下代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个形状为 (3, 4) 的张量</span></span><br><span class="line">tensor = torch.randn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将张量重塑为形状为 (4, 3) 的新张量</span></span><br><span class="line">new_tensor = tensor.reshape(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印新张量的形状</span></span><br><span class="line"><span class="built_in">print</span>(new_tensor.size())  <span class="comment"># 输出: torch.Size([4, 3])</span></span><br></pre></td></tr></tbody></table></figure>
<p>需要注意的是，reshape () 函数返回的是一个新的张量，而不是修改原始张量。如果需要修改原始张量的形状，可以使用 view () 函数。view () 函数与 reshape () 函数的功能相同，但是它只能用于连续的内存块，而 reshape () 函数可以用于任意张量。</p>
<h4 id="tensor-permute">tensor.permute</h4>
<p>tensor.permute () 是 PyTorch 中的一个函数，用于对张量进行维度重排。它可以用于将张量从一种格式转换为另一种格式，例如从 NHWC 格式转换为 NCHW 格式。</p>
<p>tensor.permute () 的参数是一个整数列表，用于指定新张量的维度顺序。例如，如果原始张量的维度顺序为 (batch_size, height, width, channels)，而新张量的维度顺序为 (batch_size, channels, height, width)，则可以使用以下代码进行转换：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert from NHWC to NCHW with torch.Tensor.permute</span></span><br><span class="line">tensor_nchw = tensor_nhwc.permute(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>在这里，tensor_nhwc 是一个形状为 (batch_size, height, width, channels) 的张量。tensor_nchw 是一个形状为 (batch_size, channels, height, width) 的张量，其中通道维度在第二个维度。tensor_nchw.permute (0, 3, 1, 2) 将张量的维度重新排列，以将通道维度移动到第二个维度。</p>
<p>需要注意的是，tensor.permute () 返回的是一个新的张量，而不是修改原始张量。因此，如果需要在原始张量上进行修改，可以使用 tensor.transpose () 函数。tensor.transpose () 的参数是一个整数列表，用于指定新张量的维度顺序。例如，如果需要将张量的前两个维度交换，则可以使用以下代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Swap the first two dimensions with torch.Tensor.transpose</span></span><br><span class="line">tensor_swapped = tensor.transpose(<span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>在这里，tensor 是一个形状为 (dim1, dim2, …) 的张量。tensor_swapped 是一个形状为 (dim2, dim1, …) 的张量，其中原始张量的前两个维度已经交换。</p>
<p>总之，tensor.permute () 和 tensor.transpose () 都是用于对张量进行维度重排的函数，可以根据需要选择使用。</p>
<h4 id="tensor-transpose">tensor.transpose</h4>
<p>transpose 是 PyTorch 中的一个函数，用于对张量进行转置操作。它可以接受一个元组作为参数，表示需要交换的维度。例如，对于一个形状为 (3, 4, 5) 的张量，可以使用 transpose (0, 2, 1) 将第一维和第三维交换，得到一个形状为 (5, 4, 3) 的张量。</p>
<p>下面是一个示例代码，展示了如何使用 transpose 函数：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个形状为 (3, 4, 5) 的张量</span></span><br><span class="line">x = torch.randn(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对张量进行转置操作</span></span><br><span class="line">y = x.transpose(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印转置后的张量形状</span></span><br><span class="line"><span class="built_in">print</span>(y.shape)</span><br></pre></td></tr></tbody></table></figure>
<p>输出结果为 (5, 4, 3)，表示转置后的张量形状为 (5, 4, 3)。</p>
<p>需要注意的是，transpose 函数返回的是一个新的张量，不会修改原始张量。如果需要在原始张量上进行转置操作，可以使用 transpose_ 函数。</p>
<h4 id="tensor-topk">tensor.topk</h4>
<p>使用 tensor.topk 函数可以返回张量中前 k 个最大值及其对应的索引。该函数的语法如下：</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">torch.topk(input, k, dim=None, largest=True, sorted=True, out=None) -&gt; Tuple[Tensor, LongTensor]</span><br></pre></td></tr></tbody></table></figure>
<p>其中，参数含义如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>input：输入张量。</p>
</li>
<li class="lvl-2">
<p>k：需要返回的最大值的个数。</p>
</li>
<li class="lvl-2">
<p>dim：沿着哪个维度计算，默认为最后一个维度。</p>
</li>
<li class="lvl-2">
<p>largest：如果为 True，则返回最大的 k 个值；如果为 False，则返回最小的 k 个值。</p>
</li>
<li class="lvl-2">
<p>sorted：如果为 True，则返回的 k 个值是有序的；如果为 False，则返回的 k 个值是无序的。</p>
</li>
<li class="lvl-2">
<p>out：输出张量。</p>
</li>
</ul>
<p>下面是一个简单的示例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.tensor([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">values, indices = torch.topk(x, k=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(values)  <span class="comment"># tensor([5, 4, 3])</span></span><br><span class="line"><span class="built_in">print</span>(indices)  <span class="comment"># tensor([4, 3, 1])</span></span><br></pre></td></tr></tbody></table></figure>
<p>在这个示例中，创建了一个张量 x，然后使用 torch.topk 函数返回了 x 中前 3 个最大值及其对应的索引。输出结果中，values 是一个包含前 3 个最大值的张量，indices 是一个包含前 3 个最大值对应的索引的张量。</p>
<h4 id="tensor-softmax">tensor.softmax</h4>
<p>tensor.softmax 是 PyTorch 中的一个函数，用于计算张量的 softmax 函数。softmax 函数是一种常用的激活函数，通常用于多分类问题中，将输出的原始分数转换为概率分布。softmax 函数的公式如下：</p>
<p>$$<br>
\text{softmax}(x_i) = \frac{e<sup>{x_i}}{\sum_{j=1}</sup>{n} e^{x_j}}<br>
$$</p>
<p>其中，$x_i$ 表示输入张量的第 $i$ 个元素，$n$ 表示张量的长度。</p>
<p>在 PyTorch 中，可以使用 torch.tensor.softmax 函数计算张量的 softmax 函数。该函数的语法如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">torch.tensor.softmax(<span class="built_in">input</span>, dim=<span class="literal">None</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>其中，input 表示输入的张量，dim 表示计算 softmax 函数的维度，dtype 表示输出的数据类型。如果 dim 参数未指定，则默认计算最后一维的 softmax 函数。</p>
<p>下面是一个示例代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.tensor([<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>])</span><br><span class="line">y = torch.tensor([[-<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>], [<span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算一维张量的 softmax 函数</span></span><br><span class="line">x_softmax = torch.tensor.softmax(x)</span><br><span class="line"><span class="built_in">print</span>(x_softmax)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算二维张量的 softmax 函数</span></span><br><span class="line">y_softmax = torch.tensor.softmax(y, dim=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(y_softmax)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([0.0900, 0.2447, 0.6652])</span></span><br><span class="line"><span class="comment"># tensor([[0.0900, 0.2447, 0.6652],</span></span><br><span class="line"><span class="comment">#         [0.0900, 0.2447, 0.6652]])</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上面的示例代码中，分别计算了一个一维张量和一个二维张量的 softmax 函数，并输出了计算结果。</p>
<h4 id="torch-no-gard">torch.no_gard</h4>
<p>在深度学习中，torch.no_grad () 是一个上下文管理器，用于控制是否计算梯度。当不需要计算梯度时，可以使用它来提高代码的执行效率和节省内存。</p>
<p>在训练模型时，通常会使用反向传播算法计算梯度，并使用梯度来更新模型的参数。然而，在推理阶段或者评估模型性能时，通常不需要计算梯度，只需要使用模型进行前向传播，以获得预测结果。</p>
<p>torch.no_grad () 的作用就是告诉 PyTorch 不要计算梯度，从而避免不必要的计算和内存消耗。通过在代码中使用 torch.no_grad ()，可以明确地指示 PyTorch 不要跟踪梯度信息，从而提高代码的执行效率。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_gard():</span><br><span class="line">    ...</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!NOTE]<br>
<code>torch&gt;=1.9.0</code> 中已将 torch.no_gard 替换为 torch.inference_mode</p>
</blockquote>
<h4 id="torch-matmul">torch.matmul</h4>
<p>以下给出一个公式的示例:</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">output = i*weight0* weight^T</span><br></pre></td></tr></tbody></table></figure>
<p>output = i<em>weight0</em> weight^T 表示的是一个线性变换的过程，其中 i 是输入张量，weight0 和 weight 是权重矩阵。在这个公式中，weight0 和 weight 的乘积可以看作是一个新的权重矩阵，可以将其记为 new_weight，即 new_weight = weight0 <em>weight^T。那么原始的公式可以改写为 output = i</em> new_weight。</p>
<p>如果想要优先计算 new_weight，可以先将 weight0 和 weight 相乘得到 new_weight，然后再将 i 与 new_weight 相乘得到输出张量 output。这样做是合理的，因为矩阵乘法具有结合律，即 (A <em>B)</em> C = A <em>(B</em> C)，所以先计算 weight0 <em>weight^T 得到 new_weight，再计算 i</em> new_weight 得到 output，与直接计算 i <em>weight0</em> weight^T 得到 output 是等价的。</p>
<p>以下是一个示例代码，演示如何先计算 new_weight，然后再计算 output：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入张量 i，形状为 [batch_size, input_size]</span></span><br><span class="line">i = torch.randn(<span class="number">32</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义权重矩阵 weight，形状为 [output_size, input_size]</span></span><br><span class="line">weight = torch.randn(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义权重矩阵 weight0，形状为 [output_size, output_size]</span></span><br><span class="line">weight0 = torch.randn(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 new_weight，形状为 [output_size, input_size]</span></span><br><span class="line">new_weight = torch.matmul(weight0, weight.transpose(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算 output，形状为 [batch_size, output_size]</span></span><br><span class="line">output = torch.matmul(i, new_weight)</span><br></pre></td></tr></tbody></table></figure>
<p>在这个例子中，先计算了 new_weight，然后再计算了 output。注意，在计算 new_weight 时，需要将 weight 的维度转置，以便与 weight0 相乘。最后，使用 PyTorch 中的 torch.matmul 函数进行矩阵乘法运算。</p>
<h4 id="nn-Linear">nn.Linear</h4>
<p>nn.Linear 是 PyTorch 中的一个线性层，它实现了一个线性变换，将输入张量与权重矩阵相乘并加上偏置向量。它的定义如下：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Linear</span>(<span class="title class_ inherited__">Module</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        in_features: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">        out_features: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">        bias: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">        device=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        dtype=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        ...</span><br></pre></td></tr></tbody></table></figure>
<p>在深度学习中，线性变换层是非常常见的一种操作，它可以将输入张量映射到一个新的空间中，从而实现特征的提取和转换。nn.Linear 的实现原理非常简单，它实际上就是一个矩阵乘法加上一个偏置向量的过程，可以用以下公式表示：</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">output = input * weight^T + bias</span><br></pre></td></tr></tbody></table></figure>
<p>其中，input 是输入张量，weight 是权重矩阵，bias 是偏置向量，^T 表示矩阵的转置操作。</p>
<p>其中，in_features 表示输入张量的大小，out_features 表示输出张量的大小，bias 表示是否使用偏置向量。在实际使用中，可以通过调用 nn.Linear 的实例对象来进行线性变换，例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个线性层，输入大小为 10，输出大小为 5</span></span><br><span class="line">linear = nn.Linear(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个输入张量，大小为 (batch_size, 10)</span></span><br><span class="line">input_tensor = torch.randn(<span class="number">32</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行线性变换</span></span><br><span class="line">output_tensor = linear(input_tensor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出张量的大小为 (batch_size, 5)</span></span><br><span class="line"><span class="built_in">print</span>(output_tensor.size())</span><br></pre></td></tr></tbody></table></figure>
<p>在上述代码中，首先定义了一个输入大小为 10，输出大小为 5 的线性层 linear，然后定义了一个输入张量 input_tensor，大小为 (batch_size, 10)，最后通过调用 linear 对输入张量进行线性变换，得到输出张量 output_tensor，大小为 (batch_size, 5)。</p>
<p>需要注意的是，nn.Linear 的权重矩阵和偏置向量是在初始化时随机生成的，可以通过 linear.weight 和 linear.bias 来访问它们。此外，还可以通过 nn.init 模块来初始化权重矩阵和偏置向量，例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.init <span class="keyword">as</span> init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个线性层，输入大小为 10，输出大小为 5</span></span><br><span class="line">linear = nn.Linear(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化权重矩阵和偏置向量</span></span><br><span class="line">init.normal_(linear.weight, mean=<span class="number">0</span>, std=<span class="number">0.01</span>)</span><br><span class="line">init.constant_(linear.bias, val=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行线性变换</span></span><br><span class="line">output_tensor = linear(input_tensor)</span><br></pre></td></tr></tbody></table></figure>
<p>在上述代码中，使用 init.normal_和 init.constant_ 分别对权重矩阵和偏置向量进行了初始化。其中，init.normal_表示使用正态分布进行初始化，init.constant_ 表示使用常数进行初始化。</p>
<h4 id="nn-Dropout">nn.Dropout</h4>
<p>nn.Dropout 是 PyTorch 中的一个模块，用于在神经网络中进行 Dropout 操作。Dropout 是一种常用的正则化方法，可以有效地防止过拟合。</p>
<p>在神经网络中，Dropout 会随机地将一些神经元的输出置为 0，从而减少神经元之间的依赖关系，使得网络更加鲁棒。具体来说，Dropout 会在训练过程中以一定的概率 p 随机地将某些神经元的输出置为 0，而在测试过程中则不进行 Dropout 操作。</p>
<p>在 PyTorch 中，可以通过如下方式使用 nn.Dropout：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">        <span class="variable language_">self</span>.dropout = nn.Dropout(p=<span class="number">0.5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = <span class="variable language_">self</span>.fc1(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.dropout(x)</span><br><span class="line">        x = <span class="variable language_">self</span>.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></tbody></table></figure>
<p>在上述代码中，定义了一个包含两个全连接层的神经网络，并在第一个全连接层后添加了一个 Dropout 模块。在 nn.Dropout 的构造函数中，可以指定 Dropout 的概率 p。在 forward 函数中，首先将输入 x 传入第一个全连接层，然后将输出传入 Dropout 模块，最后再将 Dropout 模块的输出传入第二个全连接层。</p>
<p>需要注意的是，当使用 nn.Dropout 时，需要在训练过程中启用 Dropout，而在测试过程中禁用 Dropout。在 PyTorch 中，可以通过调用 model.train () 和 model.eval () 方法来切换模型的训练和测试模式。具体来说，当调用 model.train () 方法时，模型会进入训练模式，此时 Dropout 模块会生效；而当调用 model.eval () 方法时，模型会进入测试模式，此时 Dropout 模块会被禁用。</p>
<h4 id="nn-Embedding">nn.Embedding</h4>
<p>nn.Embedding 是 PyTorch 中的一个类，用于实现词嵌入（word embedding）。词嵌入是一种将文本中的单词映射到低维向量空间中的技术，它可以将单词之间的语义关系转化为向量空间中的几何关系，从而方便计算机对文本进行处理和分析。</p>
<p>在 PyTorch 中，可以使用 nn.Embedding 类来实现词嵌入。该类的输入是一个整数张量，表示文本中的单词序列，输出是一个浮点数张量，表示单词序列中每个单词对应的词向量。在创建 nn.Embedding 对象时，需要指定词汇表的大小和词向量的维度。例如，下面的代码创建了一个词汇表大小为 10000，词向量维度为 300 的词嵌入对象：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line">embedding = nn.Embedding(<span class="number">10000</span>, <span class="number">300</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>在使用 nn.Embedding 对象时，可以将整数张量作为输入，得到对应的词向量。例如，下面的代码将一个大小为 (3, 4) 的整数张量作为输入，得到一个大小为 (3, 4, 300) 的浮点数张量，表示输入张量中每个整数对应的词向量：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">input_tensor = torch.randint(<span class="number">0</span>, <span class="number">10000</span>, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">output_tensor = embedding(input_tensor)</span><br><span class="line"><span class="built_in">print</span>(output_tensor.shape)  <span class="comment"># torch.Size([3, 4, 300])</span></span><br></pre></td></tr></tbody></table></figure>
<p>在实际使用中，词嵌入通常作为深度学习模型的输入层，用于将文本数据转换为向量表示。例如，在文本分类任务中，可以使用词嵌入将文本数据转换为向量表示，然后将向量输入到深度学习模型中进行分类。</p>
<h4 id="nn-modules-loss-CrossEntropyLoss">nn.modules.loss.CrossEntropyLoss</h4>
<p>nn.modules.loss.CrossEntropyLoss 是一个用于多分类问题的损失函数，它将 softmax 函数和负对数似然损失结合在一起。在训练分类模型时，通常使用交叉熵损失函数来衡量模型的预测结果与真实标签之间的差异。</p>
<p>在 PyTorch 中，nn.modules.loss.CrossEntropyLoss 的使用非常简单。只需要将模型的输出和真实标签传递给该函数即可。例如</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the loss function</span></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the model</span></span><br><span class="line">model = ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the optimizer</span></span><br><span class="line">optimizer = ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the model</span></span><br><span class="line"><span class="keyword">for</span> inputs, labels <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="comment"># Forward pass</span></span><br><span class="line">    outputs = model(inputs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Compute the loss , and shape must be</span></span><br><span class="line">    <span class="comment"># same between outputs and labels</span></span><br><span class="line">    loss = criterion(outputs, labels)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Backward pass</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br></pre></td></tr></tbody></table></figure>
<p>在上面的代码中，outputs 是模型的输出，labels 是真实标签。将这两个参数传递给 nn.modules.loss.CrossEntropyLoss 函数，它将计算模型的预测结果和真实标签之间的交叉熵损失。然后，可以使用该损失来进行反向传播和优化。</p>
<p>需要注意的是，nn.modules.loss.CrossEntropyLoss 函数要求模型的输出是未经过 softmax 函数处理的原始值。因此，在模型的最后一层中，通常不会使用 softmax 函数。如果使用了 softmax 函数，那么需要在调用 nn.modules.loss.CrossEntropyLoss 函数之前将模型的输出转换为未经过 softmax 函数处理的原始值。</p>
<h2 id="tensorflow">tensorflow</h2>
<h3 id="Model-construct-strategy-2">Model construct strategy</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>准备数据集：将数据集加载到内存中，并将其划分为训练集、验证集和测试集。</p>
</li>
<li class="lvl-2">
<p>定义模型：使用 TensorFlow 2 中的 Keras API 定义模型架构，包括层和激活函数等。</p>
</li>
<li class="lvl-2">
<p>编译模型：指定损失函数、优化器和评估指标等。</p>
</li>
<li class="lvl-2">
<p>训练模型：使用训练集训练模型，并在验证集上进行验证。</p>
</li>
<li class="lvl-2">
<p>评估模型：使用测试集评估模型的性能。</p>
</li>
<li class="lvl-2">
<p>使用模型：使用模型进行预测或推理。</p>
</li>
</ul>
<p>下面是一个使用 TensorFlow 2 构建简单神经网络的示例代码：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line">(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()</span><br><span class="line">x_train = x_train.reshape(-<span class="number">1</span>, <span class="number">28</span> * <span class="number">28</span>).astype(<span class="string">"float32"</span>) / <span class="number">255.0</span></span><br><span class="line">x_test = x_test.reshape(-<span class="number">1</span>, <span class="number">28</span> * <span class="number">28</span>).astype(<span class="string">"float32"</span>) / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line">model = tf.keras.Sequential(</span><br><span class="line">    [</span><br><span class="line">        layers.Dense(<span class="number">256</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">        layers.Dense(<span class="number">128</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">        layers.Dense(<span class="number">10</span>, activation=<span class="string">"softmax"</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(</span><br><span class="line">    optimizer=tf.keras.optimizers.Adam(<span class="number">0.001</span>),</span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(),</span><br><span class="line">    metrics=[tf.keras.metrics.SparseCategoricalAccuracy()],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model.fit(x_train, y_train, batch_size=<span class="number">32</span>, epochs=<span class="number">5</span>, validation_data=(x_test, y_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估模型</span></span><br><span class="line">model.evaluate(x_test, y_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用模型进行预测</span></span><br><span class="line">predictions = model.predict(x_test[:<span class="number">10</span>])</span><br></pre></td></tr></tbody></table></figure>
<p>在这个示例中，使用了 TensorFlow 2 中的 Keras API 定义了一个包含 3 个全连接层的神经网络，用于对 MNIST 手写数字数据集进行分类。使用了 Adam 优化器、交叉熵损失函数和稀疏分类精度评估指标来编译模型。然后，使用训练集训练模型，并在验证集上进行验证。最后，使用测试集评估了模型的性能，并使用模型进行了预测。</p>
<h3 id="Common-api">Common api</h3>
<h4 id="tf-trainable-variables">tf.trainable_variables()</h4>
<p>tf.trainable_variables () 是 TensorFlow 中的一个函数，用于获取所有可训练的变量。具体来说，它会返回一个列表，其中包含了所有需要在训练过程中更新的变量。</p>
<p>该函数会返回一个列表，其中包含了所有需要在训练过程中更新的变量。这些变量通常是模型中的权重和偏置等参数。在训练过程中，需要根据损失函数的梯度来更新这些变量，以使得模型能够更好地拟合训练数据。</p>
<p>需要注意的是，tf.trainable_variables () 只会返回需要在训练过程中更新的变量。如果一个变量不需要在训练过程中更新，那么它就不会出现在这个列表中。例如，如果一个变量是在模型中用于计算某个中间结果的，那么它就不需要在训练过程中更新，因此也不会出现在这个列表中。</p>
<p>在实际使用中，通常会将这个列表作为优化器的参数，以便优化器能够自动更新这些变量。例如：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>)</span><br><span class="line">trainable_vars = tf.trainable_variables()</span><br><span class="line">train_op = optimizer.minimize(loss, var_list=trainable_vars)</span><br></pre></td></tr></tbody></table></figure>
<p>在这个例子中，使用 Adam 优化器来最小化损失函数 loss，并且将所有可训练的变量作为优化器的参数传入。这样，优化器就会自动更新这些变量，以使得模型能够更好地拟合训练数据。</p>
<h3 id="Adam">Adam</h3>
<p>Adam 是一种优化算法，用于训练神经网络。它是一种基于梯度下降的算法，可以自适应地调整每个参数的学习率。Adam 算法结合了动量方法和 RMSProp 方法的优点，因此在训练深度神经网络时表现良好。</p>
<p>在 TensorFlow 中，可以使用 tf.keras.optimizers.Adam 来使用 Adam 优化器。例如，以下代码演示了如何使用 Adam 优化器来训练一个简单的神经网络：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the model</span></span><br><span class="line">model = tf.keras.Sequential(</span><br><span class="line">    [</span><br><span class="line">        tf.keras.layers.Dense(<span class="number">64</span>, activation=<span class="string">"relu"</span>),</span><br><span class="line">        tf.keras.layers.Dense(<span class="number">10</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the optimizer</span></span><br><span class="line">optimizer = tf.keras.optimizers.Adam(learning_rate=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compile the model</span></span><br><span class="line">model.<span class="built_in">compile</span>(</span><br><span class="line">    optimizer=optimizer,</span><br><span class="line">    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">    metrics=[<span class="string">"accuracy"</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the model</span></span><br><span class="line">model.fit(x_train, y_train, epochs=<span class="number">10</span>, validation_data=(x_test, y_test))</span><br></pre></td></tr></tbody></table></figure>
<p>在这里，首先定义了一个简单的神经网络模型，然后定义了一个 Adam 优化器，并将其传递给模型的 compile 方法。最后，使用 fit 方法来训练模型。</p>
<p>需要注意的是，Adam 优化器有许多可调参数，例如学习率、beta1 和 beta2 等。在实践中，通常需要对这些参数进行调整，以获得最佳的性能。</p>
<h3 id="Tips-2">Tips</h3>
<h4 id="adam-m-and-adam-v">adam_m and adam_v</h4>
<p>如果 adam_m 和 adam_v 是在训练过程中使用的，那么在 eval model 中可能不需要这些变量。因为在 eval model 中，只需要使用训练好的模型进行预测，而不需要再进行训练。</p>
<h4 id="display-with-tensorboard">display with tensorboard</h4>
<p>展示 tensorflow 1 checkpoint</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图</span></span><br><span class="line">graph = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> graph.as_default():</span><br><span class="line">    tf.compat.v1.train.import_meta_graph(<span class="string">"./model.ckpt.meta"</span>)</span><br><span class="line"><span class="comment"># 显示图中的所有操作</span></span><br><span class="line"></span><br><span class="line">writer = tf.summary.create_file_writer(<span class="string">"logs"</span>)</span><br><span class="line"><span class="keyword">with</span> writer.as_default():</span><br><span class="line">    tf.summary.graph(graph)</span><br><span class="line">writer.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 tensorboard,并打开localhost:6001</span></span><br><span class="line"><span class="comment"># tensorboard --logdir=logs</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="HuggingFace">HuggingFace</h2>
<p>HuggingFace 是一个提供自然语言处理模型和工具的开源社区。它提供了基于 transformers 的许多预训练的模型，包括 BERT、GPT-2、RoBERTa 等，这些模型可以用于各种 NLP 任务，例如文本分类、命名实体识别、情感分析等。使用 HuggingFace，可以轻松地加载这些预训练的模型，并在自己的数据集上进行微调。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://huggingface.co/docs">huggingface docs</a></p>
</li>
</ul>
<h3 id="Transformers">Transformers</h3>
<hr>
<p><a href="https://huggingface.co/docs/transformers/index">Transformers</a> 是一个用于自然语言处理的 Python 库，它提供了许多预训练的模型，包括 BERT、GPT-2、RoBERTa 等。这些模型可以用于各种 NLP 任务，例如文本分类、命名实体识别、情感分析等。使用 Transformers 库，可以轻松地加载这些预训练的模型，并在自己的数据集上进行微调。</p>
<p>以下是一个使用 Transformers 库进行文本分类的示例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> BertTokenizer, TFBertForSequenceClassification</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the tokenizer and model</span></span><br><span class="line">tokenizer = BertTokenizer.from_pretrained(<span class="string">"bert-base-uncased"</span>)</span><br><span class="line">model = TFBertForSequenceClassification.from_pretrained(<span class="string">"bert-base-uncased"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compile the model</span></span><br><span class="line">optimizer = tf.keras.optimizers.Adam(learning_rate=<span class="number">2e-5</span>)</span><br><span class="line">loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>)</span><br><span class="line">metric = tf.keras.metrics.SparseCategoricalAccuracy(<span class="string">"accuracy"</span>)</span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=optimizer, loss=loss, metrics=[metric])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the data</span></span><br><span class="line">train_dataset = ...</span><br><span class="line">val_dataset = ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Train the model</span></span><br><span class="line">model.fit(train_dataset, epochs=<span class="number">3</span>, validation_data=val_dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Evaluate the model</span></span><br><span class="line">test_dataset = ...</span><br><span class="line">model.evaluate(test_dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make predictions</span></span><br><span class="line">text = <span class="string">"This is a test sentence."</span></span><br><span class="line">inputs = tokenizer.encode_plus(text, return_tensors=<span class="string">"tf"</span>)</span><br><span class="line">outputs = model(inputs)[<span class="number">0</span>]</span><br><span class="line">predictions = tf.argmax(outputs, axis=<span class="number">1</span>).numpy()</span><br></pre></td></tr></tbody></table></figure>
<p>在这个例子中，首先加载了 BERT 模型和对应的 tokenizer。然后，使用 TFBertForSequenceClassification 类来定义一个文本分类模型，并使用 Adam 优化器、交叉熵损失函数和稀疏分类精度评估指标来编译模型。接下来，加载了训练、验证和测试数据集，并使用 fit 方法来训练模型。最后，使用 evaluate 方法来评估模型的性能，并使用模型进行了预测。</p>
<p>需要注意的是，Transformers 库提供了许多不同的预训练模型和 tokenizer，可以根据具体任务的需求进行选择。此外，Transformers 库还提供了许多其他的功能，例如生成文本、计算相似度等。</p>
<p>Transformers 常用文档:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/huggingface/transformers/tree/main/src/transformers/models">Support of transformers model</a></p>
</li>
<li class="lvl-2">
<p><a href="https://huggingface.co/docs/transformers/main/en/serialization">Export to ONNX</a></p>
</li>
<li class="lvl-2">
<p><a href="https://huggingface.co/docs/transformers/main/en/torchscript">Export to TorchScript</a></p>
</li>
</ul>
<h4 id="export-to-ONNX">export to ONNX</h4>
<p>导出 ONNX 推荐两种方式.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用官方推荐<a href="https://huggingface.co/docs/transformers/main/en/serialization">方法</a>导出.</p>
<ul class="lvl-2">
<li class="lvl-4">使用 optimum cli 导出 onnx, 需要模型在 optimum 中配置绑定导出映射.</li>
</ul>
</li>
<li class="lvl-2">
<p>手动配置<a href="https://wuwt.me/2021/12/29/triton/">绑定</a>导出.</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> XLMRobertaForSequenceClassification, XLMRobertaTokenizer</span><br><span class="line"><span class="keyword">import</span> transformers</span><br><span class="line"></span><br><span class="line">tokenizer = XLMRobertaTokenizer.from_pretrained(<span class="string">"joeddav/xlm-roberta-large-xnli"</span>)</span><br><span class="line">premise = <span class="string">"Juiter's Biggest Started as Tiny Grains of Hail"</span></span><br><span class="line">hypothesis = <span class="string">"This text is about space &amp; cosmos"</span></span><br><span class="line"></span><br><span class="line">input_ids = tokenizer.encode(</span><br><span class="line">    premise,</span><br><span class="line">    hypothesis,</span><br><span class="line">    <span class="comment"># return_tensors="pt",</span></span><br><span class="line">    return_tensors=transformers.TensorType.PYTORCH,</span><br><span class="line">    max_length=<span class="number">256</span>,</span><br><span class="line">    truncation=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># padding="max_length",</span></span><br><span class="line">    padding=transformers.utils.PaddingStrategy.MAX_LENGTH,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">mask = input_ids != <span class="number">1</span></span><br><span class="line">mask = mask.long()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动导出 onnx</span></span><br><span class="line">torch.onnx.export(</span><br><span class="line">    model,  <span class="comment"># 模型</span></span><br><span class="line">    [input_ids, mask],  <span class="comment"># 输入张量</span></span><br><span class="line">    <span class="string">"model.onnx"</span>,  <span class="comment"># 导出文件名</span></span><br><span class="line">    export_params=<span class="literal">True</span>,  <span class="comment"># 导出模型参数</span></span><br><span class="line">    opset_version=<span class="number">12</span>,  <span class="comment"># ONNX运算符集版本</span></span><br><span class="line">    do_constant_folding=<span class="literal">True</span>,  <span class="comment"># 是否执行常量折叠优化</span></span><br><span class="line">    input_names=[<span class="string">"input"</span>],  <span class="comment"># 输入张量的名称</span></span><br><span class="line">    output_names=[<span class="string">"output"</span>],  <span class="comment"># 输出张量的名称</span></span><br><span class="line">    dynamic_axes={<span class="string">"input"</span>: {<span class="number">0</span>: <span class="string">"batch_size"</span>}, <span class="string">"output"</span>: {<span class="number">0</span>: <span class="string">"batch_size"</span>}},  <span class="comment"># 批处理维度</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 手动导出 pt</span></span><br><span class="line">traced_model = torch.jit.trace(model, [input_ids, mask], strict=<span class="literal">False</span>)</span><br><span class="line">torch.jit.save(traced_model, <span class="string">"model.pt"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pytorch_to_TorchScript</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Pytorch_to_TorchScript, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model = XLMRobertaForSequenceClassification.from_pretrained(</span><br><span class="line">            <span class="string">"joeddav/xlm-roberta-large-xnli"</span>, torchscript=<span class="literal">True</span></span><br><span class="line">        ).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, data, attention_mask=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># 手动设置输入输出层</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.model(data.cuda(), attention_mask.cuda())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一层手动引导forward</span></span><br><span class="line">pt_model = Pytorch_to_TorchScript().<span class="built_in">eval</span>()</span><br><span class="line">traced_script_model = torch.jit.trace(pt_model, [input_ids, mask])</span><br><span class="line">torch.jit.save(traced_script_model, <span class="string">"model.pt"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="mlflow">mlflow</h2>
<hr>
<p><a href="https://mlflow.org/docs/latest/index.html">MLFlow</a> 是一个管理端到端机器学习生命周期的开源平台。</p>
<p>参考链接:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.mlflow.org/docs/latest/rest-api.html">https://www.mlflow.org/docs/latest/rest-api.html</a></p>
</li>
</ul>
<!-- https://github.com/Noodle-ai/mlflow_part3_PostgresMinioRegistry -->
<h3 id="mlflow-tracking">mlflow tracking</h3>
<p><a href="https://mlflow.org/docs/latest/tracking.html#">mlflow tracking</a> 包含有后端元数据存储 (保存训练及实验数据) 和模型存储 (保存模型)</p>
<p>参考链接:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mlflow.org/docs/latest/tracking.html#how-runs-and-artifacts-are-recorded">https://mlflow.org/docs/latest/tracking.html#how-runs-and-artifacts-are-recorded</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/527444716">后端元数据存储及模型存储</a></p>
</li>
</ul>
<h4 id="数据保存在本地">数据保存在本地</h4>
<p>本地使用 tracking.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>后端元数据存储 meta data 和模型存储 artifacts (mlartifact 等) 都在本地文件夹下.</p>
</li>
<li class="lvl-2">
<p>默认端口 localhost:5000.</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mlflow server --dev</span><br></pre></td></tr></tbody></table></figure>
<h4 id="数据保存在database及minio">数据保存在 database 及 minio</h4>
<p>常用的生产环境下的 mlflow tracking 配置</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>mlflow: mlflow tacking 服务</p>
</li>
<li class="lvl-2">
<p>minio: 持久化 tracking 的 artifacts.</p>
</li>
<li class="lvl-2">
<p>mysql: 持久化 tracking 的 meta data.</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> AWS_ACCESS_KEY_ID=...</span><br><span class="line"><span class="built_in">export</span> AWS_SECRET_ACCESS_KEY=...</span><br><span class="line"><span class="built_in">export</span> MLFLOW_S3_ENDPOINT_URL=http://localhost:9001 <span class="comment"># s3 store url</span></span><br><span class="line"><span class="built_in">export</span> ARTIFACE_S3_ENDPOINT=s3://mlflow</span><br><span class="line"><span class="built_in">export</span> MYSQL_USER=...</span><br><span class="line"><span class="built_in">export</span> MYSQL_PASSWORD=...</span><br><span class="line"><span class="built_in">export</span> MYSQL_ENDPOINT=mysql://<span class="variable">$MYSQL_USER</span>:<span class="variable">$MYSQL_PASSWORD</span>@localhost/dbname</span><br><span class="line"><span class="built_in">export</span> MLFLOW_PORT=5000</span><br><span class="line"><span class="built_in">export</span> MLFLOW_HOST=localhost</span><br><span class="line">mlflow server \</span><br><span class="line">   --backend-store-uri <span class="variable">$MYSQL_ENDPOINT</span> \</span><br><span class="line">   --host <span class="variable">$MLFLOW_HOST</span> -p <span class="variable">$MLFLOW_PORT</span> \</span><br><span class="line">   --default-artifact-root <span class="variable">$ARTIFACE_S3_ENDPOINT</span></span><br></pre></td></tr></tbody></table></figure>
<p>mlflow docker-compose 配置参考</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/mlflow/mlflow/blob/master/examples/mlflow_artifacts/docker-compose.yml">https://github.com/mlflow/mlflow/blob/master/examples/mlflow_artifacts/docker-compose.yml</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/msclock/mlflow_tritonserver/blob/main/deploy/docker/docker-compose.yml">https://github.com/msclock/mlflow_tritonserver/blob/main/deploy/docker/docker-compose.yml</a></p>
</li>
</ul>
<h3 id="mlflow-registry">mlflow registry</h3>
<p>MLflow 模型注册中心组件是一个集中的模型存储、一组 API 和 UI，用于协作管理 MLflow 模型的整个生命周期。它提供了模型谱系 (MLflow 实验和运行产生的模型)、模型版本化、阶段转换 (例如从阶段到生产) 和注释。</p>
<p>参考链接:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.mlflow.org/docs/latest/model-registry.html">https://www.mlflow.org/docs/latest/model-registry.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.mlflow.org/docs/latest/model-registry.html#registering-an-unsupported-machine-learning-model">https://www.mlflow.org/docs/latest/model-registry.html#registering-an-unsupported-machine-learning-model</a></p>
</li>
</ul>
<h3 id="mlflow-workflow">mlflow workflow</h3>
<!-- https://blog.csdn.net/sinat_26917383/article/details/114134509 -->
<p>要使用 MLflow Project 部署模型，可以使用以下步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建 MLflow 项目：创建一个包含模型训练和部署代码的 MLflow 项目。在项目目录中，应该包含一个 MLproject 文件，其中定义了项目的名称、入口点和依赖项。例如：</p>
</li>
</ul>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">name: my_project</span><br><span class="line"></span><br><span class="line">entry_points:</span><br><span class="line">    train:</span><br><span class="line">    command: "python train.py"</span><br><span class="line">    parameters:</span><br><span class="line">        data_path: {type: str, default: data.csv, description: "Path to training data"}</span><br><span class="line">        max_depth: {type: int, default: 5, description: "Maximum depth of decision tree"}</span><br><span class="line"></span><br><span class="line">    serve:</span><br><span class="line">    command: "python serve.py"</span><br><span class="line">    parameters:</span><br><span class="line">        model_uri: {type: str, default: "runs:/&lt;run_id&gt;/model", description: "URI of the trained model"}</span><br><span class="line">        port: {type: int, default: 5000, description: "Port to listen on"}</span><br></pre></td></tr></tbody></table></figure>
<p>在这个示例中，定义了两个入口点：train 和 serve。train 入口点用于训练模型，serve 入口点用于部署模型。train 入口点接受两个参数：data_path 和 max_depth。serve 入口点接受两个参数：model_uri 和 port。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>训练模型：在 MLflow 项目目录中运行 mlflow run 命令来训练模型。例如：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mlflow run .</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>部署模型：在 MLflow 项目目录中运行 mlflow models serve 命令来部署模型。例如：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mlflow models serve -m runs:/&lt;run_id&gt;/model --port 5000</span><br></pre></td></tr></tbody></table></figure>
<p>这将运行 serve 入口点，并将训练的模型部署到本地端口 5000 上。MLflow 会自动加载模型，并将 HTTP 请求转发到模型的预测函数中。</p>
<p>如果要使用自定义 Python 脚本部署模型，可以使用以下步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>训练模型：使用 Python 脚本训练模型，并将模型保存到本地文件中。例如：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mlflow</span><br><span class="line"><span class="keyword">import</span> my_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line">model = my_model.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">mlflow.pytorch.save_model(model, <span class="string">"my_model"</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>在这个示例中，使用 my_model 模块中的 train 函数训练模型，并使用 MLflow 将模型保存到名为 my_model 的文件夹中。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>部署模型：使用 Python 脚本加载模型，并将模型部署到 Web 服务器上。例如：</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mlflow.pytorch</span><br><span class="line"><span class="keyword">import</span> my_model</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">model = mlflow.pytorch.load_model(<span class="string">"my_model"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Flask应用程序</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义预测函数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/predict"</span>, methods=[<span class="string">"POST"</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>():</span><br><span class="line">    data = request.json</span><br><span class="line">    <span class="built_in">input</span> = my_model.preprocess(data)</span><br><span class="line">    output = model(<span class="built_in">input</span>)</span><br><span class="line">    result = my_model.postprocess(output)</span><br><span class="line">    <span class="keyword">return</span> jsonify(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行应用程序</span></span><br><span class="line">app.run(host=<span class="string">"0.0.0.0"</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>在这个示例中，使用 MLflow 加载名为 my_model 的模型，并将其部署到 Flask Web 服务器上。定义了一个 /predict 端点，用于接收 POST 请求，并将请求数据传递给模型的预测函数。预测函数将输入数据预处理、调用模型进行推理、并将输出数据后处理，最终返回 JSON 格式的结果。使用 Flask 的 run 方法运行 Web 服务器，并将其绑定到本地 IP 地址和端口 5000 上。</p>
<h3 id="mlflow-with-transformers">mlflow with transformers</h3>
<h4 id="bert-sequence-classification">bert sequence classification</h4>
<p>Step 1, 安装依赖</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install transformers datasets mlflow</span><br></pre></td></tr></tbody></table></figure>
<p>Step 2, 结合 transformers 配置基于 mlflow 脚本</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mlflow</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoModelForSequenceClassification, AutoTokenizer, Trainer, TrainingArguments</span><br><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> load_dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_model</span>():</span><br><span class="line">    model_name = <span class="string">"bert-base-uncased"</span></span><br><span class="line">    num_labels = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    tokenizer = AutoTokenizer.from_pretrained(model_name)</span><br><span class="line">    model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=num_labels)</span><br><span class="line"></span><br><span class="line">    dataset = load_dataset(<span class="string">"imdb"</span>, split=<span class="string">"train[:5%]"</span>)  <span class="comment"># 只使用5%的数据进行训练</span></span><br><span class="line">    train_dataset = dataset.<span class="built_in">map</span>(<span class="keyword">lambda</span> e: tokenizer(e[<span class="string">'text'</span>], truncation=<span class="literal">True</span>, padding=<span class="string">'max_length'</span>), batched=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    training_args = TrainingArguments(</span><br><span class="line">        output_dir=<span class="string">"./results"</span>,</span><br><span class="line">        num_train_epochs=<span class="number">1</span>,</span><br><span class="line">        per_device_train_batch_size=<span class="number">4</span>,</span><br><span class="line">        logging_dir=<span class="string">'./logs'</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    trainer = Trainer(</span><br><span class="line">        model=model,</span><br><span class="line">        args=training_args,</span><br><span class="line">        train_dataset=train_dataset,</span><br><span class="line">        tokenizer=tokenizer,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> mlflow.start_run():</span><br><span class="line">        trainer.train()</span><br><span class="line"></span><br><span class="line">        mlflow.log_param(<span class="string">"model_name"</span>, model_name)</span><br><span class="line">        mlflow.log_param(<span class="string">"num_labels"</span>, num_labels)</span><br><span class="line">        mlflow.log_param(<span class="string">"num_train_epochs"</span>, training_args.num_train_epochs)</span><br><span class="line">        mlflow.log_param(<span class="string">"per_device_train_batch_size"</span>, training_args.per_device_train_batch_size)</span><br><span class="line"></span><br><span class="line">        mlflow.pytorch.log_model(trainer.model, <span class="string">"model"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    train_model()</span><br></pre></td></tr></tbody></table></figure>
<p>执行训练</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">python train_model.py</span><br></pre></td></tr></tbody></table></figure>
<h3 id="mlflow-plugins">mlflow plugins</h3>
<p>mlflow 作为机器学习的框架无关工具，MLflow Python API 为编写与不同机器学习框架和后端集成的插件提供了开发人员 API. <a href="https://www.mlflow.org/docs/2.4.2/plugins.html#mlflow-plugins">mlflow plugins</a> 为第三方工具集成提供了强大的自定义接口.</p>
<p>参考链接:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/mlflow/mlflow/tree/master/tests/resources/mlflow-test-plugin">https://github.com/mlflow/mlflow/tree/master/tests/resources/mlflow-test-plugin</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/mlflow/mlflow-torchserve">torchserve deployment plugin</a></p>
</li>
</ul>
<h2 id="MLServer">MLServer</h2>
<p><a href="https://mlserver.readthedocs.io/en/latest/index.html">MLServer</a></p>
<h2 id="alibi">alibi</h2>
<h2 id="DeepStream">DeepStream</h2>
<p><a href="https://developer.nvidia.com/deepstream-sdk">DeepStream</a> 是一个基于 GStreamer 的 SDK，用于创建用于图像处理和目标检测处理的人工智能视觉应用程序。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://developer.nvidia.com/deepstream-getting-started">Get Started</a></p>
</li>
</ul>
<h2 id="Tritonserver">Tritonserver</h2>
<p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/containers/tritonserver">Nvidia Triton Inference Sever</a> 提供了兼容 CPUs 和 GPUs 运行在云端及边缘设备将模型服务化的优化推理方案。Nvidia 这里介绍了使用 Triton 快速部署可伸缩的模型的<a href="https://developer.nvidia.com/blog/fast-and-scalable-ai-model-deployment-with-nvidia-triton-inference-server/">优势</a>。</p>
<!--
https://blog.csdn.net/sgyuanshi/article/details/123536579
https://zhuanlan.zhihu.com/p/594107043

triton learning on bilibili
https://space.bilibili.com/1320140761/channel/collectiondetail?sid=493256

yolov5 to triton 1，2，3，4
https://blog.csdn.net/weixin_41796280/article/details/125784587

Dynamic batch
https://zhuanlan.zhihu.com/p/569807754
https://zhuanlan.zhihu.com/p/569807754
https://blog.csdn.net/qq128252/article/details/127105463

Perf Analyzer
https://github.com/triton-inference-server/client/blob/main/src/c%2B%2B/perf_analyzer/docs/input_data.md
-->
<h3 id="Tutorials">Tutorials</h3>
<p>Triton Server 提供了对应的 <a href="https://github.com/triton-inference-server/tutorials">Tutorials</a>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_1-model_deployment">Model Deployment</a>: 图片文字检测部署 Demo，包括文字区域检测和文字识别。</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://docs.nvidia.com/deeplearning/frameworks/index.html">Deeplearning Optimized Frameworks</a>: 包括了测试用的 TF，PT 等框架发布信息。</li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_2-improving_resource_utilization">Improving Resource Utilization</a>: 使用动态批处理和并发模型执行提高资源利用率。</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_2-improving_resource_utilization#what-is-dynamic-batching">dynamic_batching</a> in config.pbtxt</li>
<li class="lvl-4"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_2-improving_resource_utilization#concurrent-model-execution">instance_group</a> in config.pbtxt</li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_3-optimizing_triton_configuration">Customizing Deployment With Model Analyzer</a>: 推理性能讨论及使用 Model Analyzer 优化 config.pbtxt 配置文件。</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_3-optimizing_triton_configuration#performance-discussion">推理性能优化</a>
<ul class="lvl-4">
<li class="lvl-6"> Minimizing network latency，减小模型精度，例如，图片转换 float32 转为 float 16。</li>
<li class="lvl-6">Accelerating model, 融合网络层来优化网络图，降低模型精度，融合内核等等减少计算时间。</li>
<li class="lvl-6">Using Model Analyzer, 使用 Model Analyzer 减少在模型队列等待到推理框架调度的延时。</li>
</ul>
</li>
<li class="lvl-4"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_3-optimizing_triton_configuration#using-model-analyzer">Using Model Analyzer</a>
<ul class="lvl-4">
<li class="lvl-6"><a href="https://github.com/triton-inference-server/model_analyzer/blob/main/docs/config.md">Analyzer Criteria</a> 包含的检测目标 Objectives 和限制 Constraints。</li>
<li class="lvl-6"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_3-optimizing_triton_configuration#usage-details">Usage Details</a> 实际使用示例。</li>
<li class="lvl-6"><a href="https://github.com/triton-inference-server/model_analyzer">Model Analyzer Repos</a> 工具仓库包含了对单模型和多模型评估示例。</li>
</ul>
</li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_4-inference_acceleration">Accelerating Inference for Models</a>: 通过加速推理框架来加速推理。</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_4-inference_acceleration#gpu-based-acceleration">GPU Based Acceleration</a>: 基于 GPU 加速
<ul class="lvl-4">
<li class="lvl-6"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_4-inference_acceleration#using-tensorrt-directly">Using TensorRT Directly</a> 直接将模型转为 TensorRT Engine 来加速。</li>
<li class="lvl-6"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_4-inference_acceleration#using-tensorrts-integration-with-pytorchtensorflow">Using TensorRT’s Integration with PyTorch/TensorFlow</a> 使用与 <a href="https://www.youtube.com/watch?v=TU5BMU6iYZ0">PyTorch</a>/TensorFlow 集成的 TensorRT 转换。
<ul class="lvl-6">
<li class="lvl-8"><a href="https://pytorch.org/TensorRT/tutorials/serving_torch_tensorrt_with_triton.html">PyTorch</a></li>
<li class="lvl-8"><a href="https://github.com/tensorflow/tensorrt/tree/master/tftrt/triton">TensorFlow</a></li>
</ul>
</li>
<li class="lvl-6"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_4-inference_acceleration#using-tensorrts-integration-with-onnx-runtime">Using TensorRT’s Integration with ONNX RunTime</a></li>
</ul>
</li>
<li class="lvl-4"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_4-inference_acceleration#cpu-based-acceleration">CPU Based Acceleration</a> 基于 OpenVINO 加速。</li>
<li class="lvl-4"><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_4-inference_acceleration#accelerating-large-transformer-models">Accelerating Large Transformer Models</a> 加速大模型。</li>
<li class="lvl-4"><a href="https://github.com/triton-inference-server/model_navigator">Model Navigator</a> 检验模型转换覆盖及简化部署流程的工具。</li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_5-Model_Ensembles">Executing Multiple Models With Model Ensembles</a> 将多个模型组合进行推理，使用前面得文字检测，文字识别，分别对两个模型配置前后处理得 python backend，然后串联形成在 Triton Server 端运行得组合模型推理服务。</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/tutorials/tree/main/Conceptual_Guide/Part_6-building_complex_pipelines">Building Complex Pipelines:Stable Diffusion</a>: 使用多个框架后端构件推理服务，并且使用 BLS API 构件复杂得非线性管道。</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/tutorials/blob/main/Feature_Guide/Data_Pipelines/README.md">Data Pipeline</a>: Triton 中 Python backend 对 Tensor 的处理步骤。</p>
<ul class="lvl-2">
<li class="lvl-4">Model Inspect Tool: <a href="https://netron.app/">Netron</a>, <a href="https://github.com/NVIDIA/TensorRT/tree/main/quickstart/deploy_to_triton">Polygraphy</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/deeplearning/triton-inference-server/release-notes/index.html">Release Notes</a></p>
</li>
</ul>
<h3 id="Deploying-Using-Triton">Deploying Using Triton</h3>
<p><a href="https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/performance_tuning.html">Deploying Using Triton</a></p>
<h3 id="Triton-Configuration"><a href="https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/model_configuration.html">Triton Configuration</a></h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/NVIDIA/TensorRT/tree/main/quickstart/deploy_to_triton">polygraphy</a> 用于确定模型的输入输出，更多示例<a href="https://github.com/NVIDIA/TensorRT/tree/main/tools/Polygraphy/examples/cli/inspect">参考</a>。</p>
</li>
<li class="lvl-2">
<p><a href="https://netron.app/">Netron</a>：在线模型查看工具</p>
</li>
</ul>
<h3 id="Model-Repository">Model Repository</h3>
<p><a href="https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/model_repository.html">Model Repository</a></p>
<h3 id="Jetson-and-JetPack-Support">Jetson and JetPack Support</h3>
<p><a href="https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/jetson.html">Jetson and JetPack Support</a></p>
<h3 id="HTTP-and-GRPC-Protocol-Support">HTTP and GRPC Protocol Support</h3>
<p><a href="https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/protocol/README.html">HTTP and GRPC Protocol Support</a>: Triton Server 支持的各种 HTTP/REST 和 GRPC 协议扩展。参考使用示例:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># --------------- logging extension -----------------</span></span><br><span class="line"><span class="comment"># 设置 log verbose 为 1</span></span><br><span class="line">curl -s -w <span class="string">'\n%{http_code}\n'</span> -d <span class="string">'{"log_verbose_level":1}'</span> -X POST localhost:8000/v2/logging</span><br><span class="line"><span class="comment"># 获取 log config</span></span><br><span class="line">curl -s localhost:8000/v2/logging | jq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -------------- repository extension ---------------</span></span><br><span class="line"><span class="comment"># 查看model</span></span><br><span class="line">curl -X POST localhost:8000/v2/repository/index | jq</span><br><span class="line"><span class="comment"># 加载/卸载指定模型</span></span><br><span class="line">curl -X POST localhost:8000/v2/repository/models/<span class="variable">${MODEL_NAME}</span>/load | jq</span><br><span class="line">curl -X POST localhost:8000/v2/repository/models/<span class="variable">${MODEL_NAME}</span>/unload | jq</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Optimization">Optimization</h3>
<p><a href="https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/optimization.html">Optimization</a><br>
- <a href="https://github.com/triton-inference-server/client/blob/main/src/c%2B%2B/perf_analyzer/README.md">Perf Analyzer</a>: 模型度量评估工具，针对部署在 server 中的模型能对吞吐量，GPU 利用率，时延等等做一个详细的评估输出.<br>
- <a href="https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/model_analyzer.html">Model Analyzer</a>: 该工具会自动使用 perf_analyzer 对模型做一个全方位的评估，并能输出详细的 html/pdf 报告.</p>
<h3 id="Backend">Backend</h3>
<p><a href="https://github.com/triton-inference-server/python_backend">Python backend</a></p>
<h3 id="Tips-3">Tips</h3>
<h4 id="Model-format">Model format</h4>
<p><code>.ckpt</code> 是 tensorflow 框架下保存的模型，包含以下几个子文件：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>model.ckpt.meta ：保存 Tensorflow 计算图结构，可以理解为神经网络的网络结构</p>
</li>
<li class="lvl-2">
<p>model.ckpt ：保存 Tensorflow 程序中每一个变量的取值，变量是模型中可训练的部分</p>
</li>
<li class="lvl-2">
<p>checkpoint ：保存一个目录下所有模型文件列表</p>
</li>
</ul>
<p><code>.onnx</code> 是一种针对机器学习所设计的开放式的文件格式，用于存储训练好的模型。它使得不同的深度学习框架（如 Pytorch, MXNet）可以采用相同格式存储模型数据。简而言之，ONNX 是一种便于在各个主流深度学习框架中迁移模型的中间表达格式.</p>
<p><code>.pt</code>/<code>.torchscript</code> 是 ptorch 模型框架保存格式.</p>
<h4 id="Triton-REST-API">Triton REST API</h4>
<p>常用的 Triton 的 REST API</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检测 triton 健康</span></span><br><span class="line">curl -v localhost:8000/v2/health/ready</span><br><span class="line"><span class="comment"># 模型 name 配置</span></span><br><span class="line">curl -v localhost:8000/v2/models/name/config | jq</span><br></pre></td></tr></tbody></table></figure>
<h4 id="查看模型输入输出">查看模型输入输出</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用 polygraphy</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">python -m pip install colored polygraphy --extra-index-url https://pypi.ngc.nvidia.com</span><br><span class="line"><span class="comment"># 确定模型的输入输出</span></span><br><span class="line">POLYGRAPHY_AUTOINSTALL_DEPS=1 polygraphy inspect model model_repository/name/1/model.plan</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用 netron</p>
</li>
</ul>
<h4 id="Yolov5-pt-to-ONNX">Yolov5 pt to ONNX</h4>
<p>将模型转换为 onnx，基于 yolo 模型，使用 yolo 仓库提供的 export 脚本</p>
<blockquote>
<p>[!IMPORTANT]<br>
若需要支持 batch 推理，则需要打开 --dynamic 选项。</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --gpus all -v $(<span class="built_in">pwd</span>):/workspace nvcr.io/nvidia/pytorch:23.04-py3</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ultralytics/yolov5.git &amp;&amp; <span class="built_in">cd</span> yolov5</span><br><span class="line">python export.py --include onnx --weights model.pt --img 1280 --dynamic --device=0</span><br></pre></td></tr></tbody></table></figure>
<p>将模型保存在需要的位置，并补充模型配置文件 config.pbtxt，如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tree model_repository/model</span><br><span class="line">model_repository/model</span><br><span class="line">└── 1</span><br><span class="line">    └── model.onnx</span><br></pre></td></tr></tbody></table></figure>
<p>优化导出模型，将 preprocessing 和 postprocessing 加入到模型图中</p>
<blockquote>
<p>[!TIP]<br>
参考 yolov5-rt 自动化转化前后处理到模型中。</p>
</blockquote>
<!--
https://github.com/zhiqwang/yolov5-rt-stack
https://github.com/bug-developer021/YOLOV5_optimization_on_triton/blob/main/docs/batchedNMS.md
-->
<h4 id="ALBERT-to-ONNX">ALBERT to ONNX</h4>
<!--

https://github.com/onnx/tensorflow-onnx
https://github.com/chainyo/transformers-pipeline-onnx/blob/main/ner_pipeline.ipynb -->
<p>使用 <a href="https://github.com/onnx/tensorflow-onnx">tf2onnx</a> 转换，转换命令<a href="https://github.com/onnx/tensorflow-onnx#getting-started">参考</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install -U tf2onnx</span><br><span class="line">docker run -it --gpus all -v $(<span class="built_in">pwd</span>):/workspace nvcr.io/nvidia/tensorflow:23.04-tf2-py3</span><br><span class="line">python -m tf2onnx.convert --checkpoint  tensorflow-model-meta-file-path --output model.onnx --inputs input0:0,input1:0 --outputs output0:0</span><br></pre></td></tr></tbody></table></figure>
<p>参考 triton to albert <a href="https://github.com/NVIDIA/DeepLearningExamples/blob/master/TensorFlow/LanguageModeling/BERT/triton/run_squad_triton_client.py">client</a></p>
<h4 id="Transformers-to-ONNX">Transformers to ONNX</h4>
<p>将 Transformers 模型转 ONNX <a href="https://huggingface.co/docs/transformers/serialization">参考</a></p>
<h4 id="ONNX-Patch">ONNX Patch</h4>
<p>支持 CPU/GPU 部署</p>
<blockquote>
<p>[!TIP]<br>
使用三方<a href="https://github.com/jiangjiajun/PaddleUtils/tree/main/onnx">工具</a>可以操作 ONNX 模型裁剪、修改节点命名等。</p>
</blockquote>
<p>使用 ONNX 推理加速<a href="https://github.com/triton-inference-server/tutorials/blob/main/Conceptual_Guide/Part_4-inference_acceleration/README.md#working-example">方案</a>。</p>
<h4 id="ONNX-转换-TensorRT-Engine">ONNX 转换 TensorRT Engine</h4>
<blockquote>
<p>[!TIP]<br>
通常 TensorRT 部署的推理速度较快。</p>
</blockquote>
<p>将 ONNX 模型转为 TensorRT Engine，仅支持 GPU 部署（需要在对应部署机器配置适配，会对生成的 TensorRT Engine 进行优化）。</p>
<blockquote>
<p>[!TIP]<br>
<code>onnx2trt_utils.cpp:374: Your ONNX model has been generated with INT64 weights, while TensorRT does not natively support INT64. Attempting to cast down to INT32.</code></p>
<p>该问题可以通过 onnx-simplifier 简化 onnx 模型解决：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install onnx-simplifier</span><br><span class="line">onnxsim model.onnx simplfied_model.onnx</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>将 ONNX 模型转为 TensorRT Engine。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --gpus all -v $(<span class="built_in">pwd</span>):/trt_optimize nvcr.io/nvidia/tensorrt:23.04-py3</span><br><span class="line"><span class="built_in">cd</span> /trt_optimize</span><br><span class="line">trtexec --onnx=model.onnx --saveEngine=model.plan --useCudaGraph</span><br></pre></td></tr></tbody></table></figure>
<p>使用 Model Analyzer 评估最优配置文件 config.pbtxt</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --gpus=all --shm-size=256m --<span class="built_in">rm</span> -p8000:8000 -p8001:8001 -p8002:8002 -v $(<span class="built_in">pwd</span>):/workspace nvcr.io/nvidia/tritonserver:23.04-py3</span><br><span class="line">pip3 install triton-model-analyzer</span><br><span class="line"><span class="comment"># 输出评估缓存</span></span><br><span class="line"><span class="built_in">mkdir</span> output profile_results</span><br><span class="line"><span class="comment"># 自动评估，耗时长，这里预筛出延迟10ms的配置评估结果</span></span><br><span class="line">model-analyzer profile \</span><br><span class="line">    --model-repository model_repository \</span><br><span class="line">    --profile-models drawing_rt \</span><br><span class="line">    --triton-launch-mode=<span class="built_in">local</span> \</span><br><span class="line">    --output-model-repository-path output \</span><br><span class="line">    --override-output-model-repository \</span><br><span class="line">    --latency-budget 10 \</span><br><span class="line">    --run-config-search-mode quick</span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速评估，指定参数</span></span><br><span class="line">model-analyzer profile \</span><br><span class="line">    --model-repository model_repository \</span><br><span class="line">    --profile-models drawing_rt \</span><br><span class="line">    --triton-launch-mode=<span class="built_in">local</span> \</span><br><span class="line">    --output-model-repository-path output \</span><br><span class="line">    --override-output-model-repository \</span><br><span class="line">    --export-path profile_results \</span><br><span class="line">    --run-config-search-max-concurrency 2 \</span><br><span class="line">    --run-config-search-max-model-batch-size 2 \</span><br><span class="line">    --run-config-search-max-instance-count 2</span><br></pre></td></tr></tbody></table></figure>
<p>使用 <a href="https://towardsdatascience.com/how-to-convert-your-custom-model-into-tensorrt-5a2ea1dec2e4">TPAT</a> 转换 ONNX 自动化生成 TensorRT Engine。</p>
<h4 id="ONNX-TensorRT-Batch">ONNX/TensorRT Batch</h4>
<p>动态 Batch 处理需要，对模型的输入输出，设置为动态类型。</p>
<p>基于 yolo 的模型需要修改 <a href="http://export.py">export.py</a> 脚本，配置输出脚本，以导出 batch 的 ONNX 模型。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 对block对应得输入，重命名</span></span><br><span class="line">dx = {</span><br><span class="line">    <span class="string">"images"</span>: {<span class="number">0</span>: <span class="string">"batch"</span>},</span><br><span class="line">    <span class="string">"output"</span>: {<span class="number">0</span>: <span class="string">"batch"</span>, <span class="number">1</span>: <span class="string">"100800"</span>, <span class="number">2</span>: <span class="string">"16"</span>},</span><br><span class="line">    <span class="string">"onnx::Sigmoid_473"</span>: {<span class="number">0</span>: <span class="string">"batch"</span>},</span><br><span class="line">    <span class="string">"onnx::Sigmoid_611"</span>: {<span class="number">0</span>: <span class="string">"batch"</span>},</span><br><span class="line">    <span class="string">"onnx::Sigmoid_748"</span>: {<span class="number">0</span>: <span class="string">"batch"</span>},</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">python export.py --include onnx --weights weights/box_810.pt --img 1280 --batch-size 1 --dynamic</span><br></pre></td></tr></tbody></table></figure>
<p>或者直接使用最新 yolov5 版本导出 dynamic 版本，<a href="AI.md#yolo-%E8%BD%AC%E6%8D%A2-onnx">参考</a></p>
<p>生成 TensorRT Engine 时需要设置支持的动态维度。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">trtexec --onnx=model.onnx --saveEngine=model.plan --useCudaGraph --minShapes=images:1x3x1280x1280 --optShapes=images:1x3x1280x1280 --maxShapes=images:4x3x1280x1280</span><br></pre></td></tr></tbody></table></figure>
<h4 id="dali-backend">dali_backend</h4>
<blockquote>
<p>[!NOTE]<br>
<a href="https://github.com/triton-inference-server/dali_backend">dali_backend</a>:The Triton backend that allows running GPU-accelerated data pre-processing pipelines implemented in DALI’s python API.</p>
</blockquote>
<p>dali_backend 支持在 tritonserver 中构建 ensemble 方式构建的应用，参考<a href="https://github.com/triton-inference-server/client#ensemble-image-classification-example-application">官方示例</a>.</p>
<h4 id="指定model推理">指定 model 推理</h4>
<p>准备推理脚本，启动服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --gpus=all --shm-size=256m --<span class="built_in">rm</span> -p8000:8000 -p8001:8001 -p8002:8002 -v $(<span class="built_in">pwd</span>):/workspace nvcr.io/nvidia/tritonserver:23.04-py3</span><br><span class="line"><span class="built_in">cd</span> /workspace</span><br><span class="line">tritonserver --model-repository=model_repository --log-verbose=1 --model-control-mode=explicit --load-model model-name</span><br></pre></td></tr></tbody></table></figure>
<p>安装依赖</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install tritonclient[http] opencv-python-headless</span><br><span class="line">python model_infer_client.py</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Ensemble-pipeline">Ensemble(pipeline)</h4>
<blockquote>
<p>[!IMPORTANT]<br>
<code>UNAVAILABLE: Internal: Unable to initialize shared memory key 'triton_python_backend_shm_region_2' to requested size (67108864 bytes). If you are running Triton inside docker, use '--shm-size' flag to control the shared memory region size. Each Python backend model instance requires at least 64MBs of shared memory. Error: No space left on device</code></p>
<p>使用 Ensemble 模式需要加载共享内存大小，–shm-size=256m，大小根据实际需求设置。</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --gpus=all --shm-size=256m --<span class="built_in">rm</span> -p8000:8000 -p8001:8001 -p8002:8002 -v $(<span class="built_in">pwd</span>):/workspace nvcr.io/nvidia/tritonserver:23.04-py3</span><br><span class="line"><span class="built_in">cd</span> /workspace/</span><br><span class="line">apt-get update &amp;&amp; apt-get install libgl1 -y --no-install-recommends &amp;&amp; pip install opencv-python opencv-python-headless</span><br><span class="line">tritonserver --model-repository=model_repository/ --log-verbose 1 --exit-on-error 0 --model-control-mode poll</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Model-Warm-up">Model Warm-up</h4>
<p>模型加载，会在模型初始化时耗费时间，使用 <code>ModelWarmup</code> 可以有效规避第一次请求的花销。<a href="https://github.com/triton-inference-server/common/blob/main/protobuf/model_config.proto"><code>ModelWarmup</code></a> 参考模型配置。官方示例<a href="https://github.com/triton-inference-server/server/blob/main/qa/L0_warmup/test.sh">参考测试</a>。</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">model_warmup [</span><br><span class="line">    {</span><br><span class="line">        name: "warmup_requests"</span><br><span class="line">        batch_size: 1</span><br><span class="line">        inputs: {</span><br><span class="line">            key: "drawing_preprocessing_input"</span><br><span class="line">            value: {</span><br><span class="line">                input_data_file: "warm-up.jpg"</span><br><span class="line">                dims: [ 1507865 ]</span><br><span class="line">                data_type: TYPE_UINT8</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>
<p>上面模型配置使用模型子文件夹下 warm-up.jpg，在模型加载时作为输入。</p>
<h4 id="Jetson-Compatibility">Jetson Compatibility</h4>
<!-- https://medium.com/forsight-ai/how-to-install-nvidia-dali-triton-backend-on-jetson-devices-9dea8973b699 -->
<h4 id="pytorch-with-triton">pytorch with triton</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pytorch.org/TensorRT/tutorials/serving_torch_tensorrt_with_triton.html#">Demo</a></p>
</li>
</ul>
<h3 id="Solution">Solution</h3>
<p>结合 Triton 提供的 model 服务推理功能，可以实现如<a href="https://github.com/triton-inference-server/server/tree/main/deploy">示例</a> 中 k8s 和 mlflow 集成解决方案。</p>
<blockquote>
<p>[!WARNING]<br>
minikube 上测试 gpu 非常麻烦，参考 <a href="https://stackoverflow.com/questions/62212168/cannot-use-gpu-on-minikube-with-docker-driver">stackoverflow</a> 和 <a href="https://github.com/NVIDIA/k8s-device-plugin#nvidia-device-plugin-for-kubernetes">github</a></p>
</blockquote>
<h4 id="k8s-Integration">k8s Integration</h4>
<h4 id="mlflow-Integration">mlflow Integration</h4>
<h4 id="Customized-Server">Customized Server</h4>
<h2 id="TensorRT">TensorRT</h2>
<hr>
<p><a href="https://developer.nvidia.com/tensorrt">TensorRT</a> 是一个高性能的深度学习推理库，可用于优化和部署深度学习模型。它使用 GPU 加速来提高推理性能，并提供了许多优化技术，例如网络剪枝、量化和层融合，以减少模型的计算和内存需求。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://developer.nvidia.com/tensorrt-getting-started#tutorials">TensorRT Tutorials</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/deeplearning/tensorrt/quick-start-guide/index.html#deployment">TensorRT-Based Model Deploy</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/NVIDIA/TensorRT">TensorRT Repository</a></p>
</li>
</ul>
<!-- https://blog.csdn.net/kunhe0512/category_11813620.html -->
<h3 id="Tips-4">Tips</h3>
<h4 id="安装-2">安装</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>debian distribution <a href="https://docs.nvidia.com/deeplearning/tensorrt/install-guide/index.html#installing-debian">installation</a></p>
</li>
<li class="lvl-2">
<p>tensorrt <a href="https://developer.nvidia.com/tensorrt">download link</a> with download</p>
</li>
</ul>
<h4 id="查看-tensorrt-版本">查看 tensorrt 版本</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">dpkg-query -W tensorrt</span><br><span class="line">dpkg -l | grep nvinfer</span><br><span class="line">ldconfig -p | grep nvinfer</span><br></pre></td></tr></tbody></table></figure>
<h2 id="HPC">HPC</h2>
<hr>
<p><a href="https://docs.nvidia.com/hpc-sdk/compilers/index.html">Nvidia HPC</a> 是一种高性能计算解决方案，旨在加速科学计算和数据分析。它使用 GPU 加速器来提高计算速度，从而使科学家和研究人员能够更快地进行计算密集型任务。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://catalog.ngc.nvidia.com/orgs/nvidia/collections/nvhpc">HPC SDK</a></p>
</li>
<li class="lvl-2">
<p><a href="https://catalog.ngc.nvidia.com/orgs/hpc/collections/nvidia_hpc">HPC Collection</a></p>
</li>
</ul>
<h2 id="Cuda">Cuda</h2>
<hr>
<p><a href="https://docs.nvidia.com/cuda/">Nvidia Cuda</a> 简化开发人员能利用基于 Cuda 的 GPU 执行并行优化编程.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html">Cuda Programming</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/contents.html">Cuda Best Practice</a>.</p>
</li>
</ul>
<h2 id="OpenVINO">OpenVINO</h2>
<hr>
<p><a href="https://docs.openvino.ai/latest/home.html">OpenVINO</a> 是一个开源的优化和部署深度学习模型工具包。</p>
<h2 id="DALI">DALI</h2>
<hr>
<p><a href="https://docs.nvidia.com/deeplearning/dali/user-guide/docs/#">Nvidia DALI（Data Loading Library）</a>是一个用于数据预处理和增强的库，旨在加速深度学习模型的训练和推理。DALI 提供了高度优化的 CPU 和 GPU 数据管道，可以在数据加载和预处理方面显著提高性能。DALI 还提供了许多常用的数据增强操作，例如裁剪、缩放、旋转和翻转等，可以帮助用户更轻松地进行数据增强。在 Triton 中，DALI 可以与 PyTorch 和 TensorFlow 等深度学习框架一起使用，以加速模型的训练和推理。如果需要更快的数据加载和预处理速度，可以考虑使用 <a href="https://github.com/NVIDIA/DALI">Nvidia DALI</a>。</p>
<p>参考<a href="https://developer.nvidia.com/DALI">主页</a>。<a href="https://docs.nvidia.com/deeplearning/dali/user-guide/docs/examples/index.html">教程</a>将指导通过第一步和<a href="https://docs.nvidia.com/deeplearning/dali/user-guide/docs/supported_ops.html">支持的操作</a>将放在一起的 GPU 驱动的数据处理管道。</p>
<p>DALI 用户手册<a href="https://docs.nvidia.com/deeplearning/dali/user-guide/docs/examples/index.html">大纲</a>。</p>
<h3 id="DALI-Operation">DALI Operation</h3>
<p><a href="https://docs.nvidia.com/deeplearning/dali/user-guide/docs/examples/operations_index.html">DALI Operation</a> 包含了对常用的图形、音频、视频的处理加工教程和示例。调用接口参考 <a href="https://docs.nvidia.com/deeplearning/dali/user-guide/docs/supported_ops.html">Operation Interface Reference</a> 。</p>
<h3 id="安装-3">安装</h3>
<p>根据 <a href="https://github.com/NVIDIA/DALI">DALI</a> 文档<a href="https://docs.nvidia.com/deeplearning/dali/user-guide/docs/installation.html">安装</a>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install --extra-index-url https://pypi.nvidia.com nvidia-dali-cuda120</span><br><span class="line">pip install --extra-index-url https://developer.download.nvidia.com/compute/redist --upgrade nvidia-dali-cuda120</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Common-Process">Common Process</h3>
<h4 id="获取当前管道信息">获取当前管道信息</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">cur = dali.pipeline.Pipeline.current()</span><br><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">"\ndali config:\n"</span>,</span><br><span class="line">    <span class="string">" "</span>.join(</span><br><span class="line">        [</span><br><span class="line">            <span class="string">f"max_batch_size=<span class="subst">{cur.max_batch_size}</span>\n"</span>,</span><br><span class="line">            <span class="string">f"num_threads=<span class="subst">{cur.num_threads}</span>\n"</span>,</span><br><span class="line">            <span class="string">f"device_id=<span class="subst">{cur.device_id}</span>\n"</span>,</span><br><span class="line">        ]</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Image-Preprocess">Image Preprocess</h3>
<p>适配 yolo 的 letterbox 图片预处理，将图片按原有宽高比缩小在 img_size 大小，并在 img_size 比例较大的一侧添加填充。</p>
<p>方案一: resize 后使用剪切并填充.</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 定义dali数据预处理管道</span></span><br><span class="line"><span class="keyword">import</span> nvidia.dali <span class="keyword">as</span> dali</span><br><span class="line"><span class="keyword">import</span> nvidia.dali.types <span class="keyword">as</span> types</span><br><span class="line"><span class="keyword">from</span> nvidia.dali.plugin.triton <span class="keyword">import</span> autoserialize</span><br><span class="line"></span><br><span class="line">IMG_SIZE = <span class="number">1280</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@autoserialize</span></span><br><span class="line"><span class="meta">@dali.pipeline_def(<span class="params">batch_size=<span class="number">256</span>, num_threads=<span class="number">9</span>, device_id=<span class="number">0</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pipe</span>():</span><br><span class="line">    new_shape = (IMG_SIZE, IMG_SIZE)</span><br><span class="line">    images = dali.fn.external_source(device=<span class="string">"cpu"</span>, name=<span class="string">"DALI_INPUT"</span>)</span><br><span class="line">    <span class="comment"># 解码图片</span></span><br><span class="line">    images = dali.fn.decoders.image(images, device=<span class="string">"cpu"</span>, output_type=types.RGB)</span><br><span class="line">    <span class="comment"># 保持高宽比，并限制最大不超过指定的图片大小</span></span><br><span class="line">    images = dali.fn.resize(images.gpu(), size=new_shape, mode=<span class="string">"not_larger"</span>)</span><br><span class="line">    <span class="comment"># 裁剪图片，并填充超出的部分</span></span><br><span class="line">    images = dali.fn.crop_mirror_normalize(</span><br><span class="line">        images,</span><br><span class="line">        dtype=types.FLOAT,  <span class="comment"># 输出数值类型</span></span><br><span class="line">        output_layout=<span class="string">"CHW"</span>,  <span class="comment"># 输出图片的布局</span></span><br><span class="line">        fill_values=<span class="number">114.0</span> / <span class="number">255</span>,  <span class="comment"># 填充的颜色必须有效，否则无法裁剪出填充的部分</span></span><br><span class="line">        crop=new_shape,  <span class="comment"># 裁剪大小</span></span><br><span class="line">        out_of_bounds_policy=<span class="string">"pad"</span>,  <span class="comment"># 超出部分进行填充</span></span><br><span class="line">        std=[<span class="number">0.229</span> * <span class="number">255</span>, <span class="number">0.224</span> * <span class="number">255</span>, <span class="number">0.225</span> * <span class="number">255</span>],  <span class="comment"># 数值进行标准差补偿</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> images</span><br></pre></td></tr></tbody></table></figure>
<p>方案二: resize 后使用切片并填充.</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> nvidia.dali <span class="keyword">as</span> dali</span><br><span class="line"><span class="keyword">import</span> nvidia.dali.types <span class="keyword">as</span> types</span><br><span class="line"></span><br><span class="line">IMG_SIZE = <span class="number">1280.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pipeline_def(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    batch_size=max_batch_size,</span></span></span><br><span class="line"><span class="params"><span class="meta">    num_threads=<span class="number">4</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    device_id=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">image_process_v1</span>():</span><br><span class="line">    images = dali.fn.external_source(device=<span class="string">"cpu"</span>, name=<span class="string">"DALI_INPUT"</span>)</span><br><span class="line">    images = dali.fn.decoders.image(images, device=<span class="string">"cpu"</span>, output_type=types.RGB)</span><br><span class="line">    shapes = dali.fn.shapes(images)</span><br><span class="line">    reisze_images = dali.fn.resize(</span><br><span class="line">        images.gpu(),</span><br><span class="line">        size=(IMG_SIZE, IMG_SIZE),</span><br><span class="line">        mode=<span class="string">"not_larger"</span>,</span><br><span class="line">    )</span><br><span class="line">    resize_shape = dali.fn.shapes(reisze_images)</span><br><span class="line">    anch = dali.fn.stack(</span><br><span class="line">        (IMG_SIZE - resize_shape[<span class="number">1</span>]) / <span class="number">2</span>,</span><br><span class="line">        (IMG_SIZE - resize_shape[<span class="number">0</span>]) / <span class="number">2</span>,</span><br><span class="line">    )</span><br><span class="line">    image_processed = dali.fn.<span class="built_in">slice</span>(</span><br><span class="line">        reisze_images,</span><br><span class="line">        -anch,</span><br><span class="line">        (IMG_SIZE, IMG_SIZE),</span><br><span class="line">        fill_values=<span class="number">127</span>,</span><br><span class="line">        out_of_bounds_policy=<span class="string">"pad"</span>,</span><br><span class="line">        normalized_shape=<span class="literal">False</span>,</span><br><span class="line">        normalized_anchor=<span class="literal">False</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> (images, shapes, image_processed, anch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pipe = image_process_v1()</span><br><span class="line">pipe.build()</span><br><span class="line">pipe_out = pipe.run()</span><br><span class="line">show_images(pipe_out[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(pipe_out[<span class="number">1</span>])</span><br><span class="line">show_images(pipe_out[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(pipe_out[<span class="number">3</span>])</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Transformers-2">Transformers</h2>
<!--
https://www.bilibili.com/video/BV1sW4y1J7cL?p=3
https://www.youtube.com/playlist?list=PL4JICuWNgPN7hDJEIMcrhVC6Kw3vktbaA
-->
<h2 id="NLP">NLP</h2>
<!--
自然语言处理 transformer bert
 https://www.youtube.com/watch?v=wLKsaZWeuCM
transformers on nlp
 https://www.youtube.com/playlist?list=PLM2PCubgVusY4D7-R9iA6RAACNYKNXXUu
tensorflow 2.0 on nlp
 https://www.youtube.com/playlist?list=PLFI1Cd4723_SHhKoXVNHGQVQSPvvmKjTM
math of ml
 https://github.com/aespresso/a_journey_into_math_of_ml
-->
<h2 id="Yolov5">Yolov5</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/172121380">yolov5 基础</a></p>
</li>
<li class="lvl-2">
<p><a href="https://start.oneflow.org/oneflow-yolo-doc/tutorials/00_chapter/overview.html">yolov5 解读</a></p>
</li>
</ul>
<h3 id="Resource">Resource</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/ultralytics/yolov5">yolov5</a>: 官方仓库.</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/msclock/yolov5-utils">yolov5-utils</a>: 将官方仓库打包好的 pip pkg.</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/robmarkcole/yolov5-flask">yolov5-flask</a>: yolov5 完善的 flask app.</p>
</li>
</ul>
<h3 id="输出IOU">输出 IOU</h3>
<p><code>IOU = 两个矩形交集的面积/两个矩形的并集面积</code> , 两矩形表示检测矩形 (predicted) 和标注 (ground-truth) 矩形.</p>
<p>将待测图像输入网络得到的输出结果是一个高维矩阵，<code>[-1, H, W, B, (4 + 1 + C)]</code>. 一幅图片被分割为了 H*W 块.（参看论文中的 Pr (object)∗IOU）</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>H: 表示纵向分割的块的数目</p>
</li>
<li class="lvl-2">
<p>W: 表示横向分割的块的数目</p>
</li>
<li class="lvl-2">
<p>B: 表示 anchors 的数目</p>
</li>
<li class="lvl-2">
<p>C: 表示 classes 的数目</p>
</li>
<li class="lvl-2">
<p>4:x,y,w,h，</p>
</li>
<li class="lvl-2">
<p>1:confidence</p>
</li>
</ul>
<h2 id="bert-albert">bert/albert</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.zhihu.com/column/hellonlp">hellonlp</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://zhuanlan.zhihu.com/p/164873441">多标签文本分类 albert</a>, 参考 <a href="https://github.com/hellonlp/classifier-multi-label/tree/master/classifier_multi_label">github</a></li>
</ul>
</li>
</ul>
<h3 id="模型资源">模型资源</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://huggingface.co/bert-base-uncased">bert-base-uncased</a>: HuggingFace bert 模型.</p>
</li>
<li class="lvl-2">
<p><a href="https://huggingface.co/voidful/albert_chinese_tiny">albert_chinese_tiny</a>:HuggingFace chinese albert 模型.</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/brightmart/albert_zh">albert_zh</a> 中文训练模型框架.</p>
</li>
</ul>
<!--
https://github.com/ysh329/deep-learning-model-convertor

https://blog.csdn.net/qq_33934427/article/details/123800910
https://github.com/jiangxinyang227/bert-for-task
https://www.tensorflow.org/text/tutorials/classify_text_with_bert
https://github.com/brightmart/albert_zh/tree/master
https://www.cnblogs.com/jiangxinyang/articles/10241243.html

https://www.bilibili.com/video/BV1a44y1H7Jc?p=7
https://www.bilibili.com/video/BV1JV4y1r7HP
 -->
<h2 id="LLM">LLM</h2>
<!--
https://zhuanlan.zhihu.com/p/597586623
https://www.nvidia.cn/deep-learning-ai/solutions/large-language-models/
 -->
<h3 id="ChatGLM">ChatGLM</h3>
<p><a href="https://github.com/THUDM/ChatGLM-6B">ChatGLM</a> 是一个基于大型语言模型的对话生成模型，它可以生成自然流畅的对话，可以用于聊天机器人、智能客服等场景。ChatGLM 使用了 GPT-2 模型，该模型是由 OpenAI 开发的一种基于 Transformer 的语言模型，可以生成高质量的自然语言文本。ChatGLM-6B 是 ChatGLM 的一个版本，它使用了包含 60 亿个参数的 GPT-2 模型，可以生成更加自然流畅的对话。</p>
<p>模型相关链接:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://huggingface.co/THUDM/chatglm2-6b">huggingface chatglm2</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/THUDM/ChatGLM-6B/blob/main/api.py">chatglm fast api demo</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/THUDM/ChatGLM-6B/blob/main/ptuning/README.md">chatglm tuning</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/hiyouga/ChatGLM-Efficient-Tuning">ChatGLM-Efficient-Tuning</a></p>
</li>
</ul>
<p>参考应用方案:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/imClumsyPanda/langchain-ChatGLM">基于本地知识库的 ChatGLM 问答</a></p>
</li>
</ul>
<h4 id="测试官方-Demo">测试官方 Demo</h4>
<p>依赖:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>GPU &gt;= 6 G or CPU &gt;= 32G (实际测试 5G 即可)</p>
</li>
<li class="lvl-2">
<p>pip: <code>pip install protobuf transformers==4.30.2 cpm_kernels torch&gt;=2.0 gradio mdtex2html sentencepiece accelerate</code></p>
</li>
</ul>
<blockquote>
<p>[!TIP]<br>
Error: RuntimeError: <a href="https://github.com/THUDM/ChatGLM-6B/issues/839">Library cuda is not initialized</a></p>
<p>Fix: <code>ln -s /usr/lib/x86_64-linux-gnu/libcuda.so /usr/local/cuda/lib64/libcuda.so</code></p>
</blockquote>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer, AutoModel</span><br><span class="line"></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(</span><br><span class="line">    <span class="string">"THUDM/chatglm-6b-int4"</span>, trust_remote_code=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model = (</span><br><span class="line">    AutoModel.from_pretrained(</span><br><span class="line">        <span class="string">"THUDM/chatglm-6b-int4"</span>,</span><br><span class="line">        trust_remote_code=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    .half()</span><br><span class="line">    .cuda()</span><br><span class="line">)</span><br><span class="line">model = model.<span class="built_in">eval</span>()</span><br><span class="line">response, history = model.chat(tokenizer, <span class="string">"你好"</span>, history=[])</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line">response, history = model.chat(tokenizer, <span class="string">"晚上睡不着应该怎么办"</span>, history=history)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="VisualGLM">VisualGLM</h3>
<p>VisualGLM-6B 是一个开源的，支持图像、中文和英文的多模态对话语言模型，语言模型基于 <a href="https://github.com/THUDM/ChatGLM-6B">ChatGLM-6B</a>，具有 62 亿参数；图像部分通过训练 <a href="https://arxiv.org/abs/2301.12597">BLIP2-Qformer</a> 构建起视觉模型与语言模型的桥梁，整体模型共 78 亿参数。</p>
<p>模型相关链接:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://huggingface.co/THUDM/visualglm-6b">huggingface visualglm</a></p>
</li>
</ul>
<h2 id="ImageBind">ImageBind</h2>
<p><a href="https://github.com/facebookresearch/ImageBind">ImageBind</a> 多模态互转.</p>
<h2 id="segment-anything">segment-anything</h2>
<p><a href="https://github.com/facebookresearch/segment-anything">segment-anything</a> MetaAI 分割模型.</p>
<h2 id="milvus">milvus</h2>
<p><a href="https://github.com/milvus-io/milvus">milvus</a> 向量数据库 (非结构化数据库).</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://milvus.io/docs">milvus 官方文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/476025527">云原生向量数据库 Milvus 扫盲</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/634013251">是否需要一个向量数据库</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/139847892">以图搜视频 demo</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/milvus-io/pymilvus">milvus python sdk</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/zilliztech/cloud-vectordb-examples">milvus/zilliz example</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/qism/milvus_performance">milvus_performance</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zilliz.com/vector-database-benchmark-tool">vector database benchmark</a></p>
</li>
</ul>
<h3 id="Design">Design</h3>
<h4 id="架构">架构</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://milvus.io/docs/architecture_overview.md">https://milvus.io/docs/architecture_overview.md</a></p>
</li>
</ul>
<h4 id="索引">索引</h4>
<p>最近邻搜索算法</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>搜索：将查询向量和搜索空间每个向量比较相似性，相似性可选择欧氏距离，维度夹角等</p>
</li>
<li class="lvl-2">
<p>优缺点：搜索质量完美，和每个向量都做比较，时间复杂度极高，仅支持小规模数据集 (百万)</p>
</li>
<li class="lvl-2">
<p>milvus: FLAT</p>
</li>
</ul>
<p>近似近邻搜索 - 聚类算法 - kmeans</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>搜索：构建索引时，选定要分类的数量，随机选择分类数量个点分别划分向量空间的每个向量，然后计算出每个分类空间中的聚类中心点 (平均向量点), 重新再分类，然后重复迭代，直到收敛。搜索时，选择查询向量距离最近的聚类中心点，比较该分类空间中的向量即可</p>
</li>
<li class="lvl-2">
<p>优化：增加聚类的数量，增加搜索的空间的数量</p>
</li>
<li class="lvl-2">
<p>优缺点：分治搜索，搜索速度和质量成反比</p>
</li>
<li class="lvl-2">
<p>milvus: IVF_FLAT,IVF_SQ8</p>
</li>
</ul>
<blockquote>
<p>[!NOTE]<br>
IVF（Inverted File）是一种用于加速近似最近邻搜索的索引结构。IVF_FLAT 是 IVF 索引的一种类型。</p>
<p>IVF 索引将向量数据集划分为多个小的聚类中心，每个聚类中心都有一个倒排文件。当进行查询时，Milvus 会根据查询向量的特征找到最相似的聚类中心，然后只在这些聚类中心的倒排文件中搜索，从而减少搜索的时间复杂度。</p>
</blockquote>
<p>投影法</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>搜索：构建索引时，对每个维度，使用易于碰撞的哈希函数映射向量空间中的向量，形成分类空间。搜索时，使用相同的哈希函数计算搜索向量得到对应的分类空间，比较分类空间中的向量即可.</p>
</li>
<li class="lvl-2">
<p>优化：将单个向量分为多段 (小维度) 向量降低分类空间形成的索引大小，增加近似搜索空间的数量</p>
</li>
<li class="lvl-2">
<p>优缺点：哈希搜索，收敛搜索更快</p>
</li>
<li class="lvl-2">
<p>milvus: ANNOY</p>
</li>
</ul>
<p>有损压缩 - 量化 - 积量化 (PQ)</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>搜索：使用分类空间中的的质心点编码代替向量存储在内存，将编码映射成码本.</p>
</li>
<li class="lvl-2">
<p>优化：将向量分段为低维度向量，对子向量进行量化，将码本的增加速率从指数降为加法</p>
</li>
<li class="lvl-2">
<p>优缺点：节省内存，搜索质量视向量聚类的稀疏而定，码本会形成性能瓶颈</p>
</li>
<li class="lvl-2">
<p>milvus: IVF_PQ</p>
</li>
</ul>
<p>基于图的搜索算法 (HNSW)</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>搜索：建立图结构，每个向量点都使用合适的方法计算出建立连接的邻节点，比如德劳内 (Delaunay) 三角剖分法.</p>
</li>
<li class="lvl-2">
<p>优化：将向量空间点，依次拿出放到搜索空间计算近邻点，以此形成类似三角剖分法路径和噪声干扰路径 (有利于相聚更远的两个向量建立连接), 即向粗后慢</p>
</li>
<li class="lvl-2">
<p>优化 2: 基于图的分层搜索算法，将前面提到的聚类质心按分类大小从大到小分层建立图结构，分层从上到下节点间连接越密集，即先保证快速导航，进入下一层精细搜索</p>
</li>
<li class="lvl-2">
<p>优缺点：搜索速度稳定，但占用内存极大，无法像积量化压缩向量，还要维护分层结构</p>
</li>
<li class="lvl-2">
<p>milvus: HNSW</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://milvus.io/docs/index.md">https://milvus.io/docs/index.md</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/unstructured-data-service/how-to-choose-an-index-in-milvus-4f3d15259212">https://medium.com/unstructured-data-service/how-to-choose-an-index-in-milvus-4f3d15259212</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zilliz.com/learn/choosing-right-vector-index-for-your-project">https://zilliz.com/learn/choosing-right-vector-index-for-your-project</a></p>
</li>
</ul>
<h4 id="度量">度量</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>CV: Euclidean distance (L2), Inner product(IP)</p>
</li>
<li class="lvl-2">
<p>NLP: Inner product(IP), Hamming</p>
</li>
<li class="lvl-2">
<p>molecular: Jaccard</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://milvus.io/docs/metric.md">https://milvus.io/docs/metric.md</a></p>
</li>
</ul>
<h3 id="Getting-started">Getting started</h3>
<h4 id="install-2">install</h4>
<p>使用 standalone 模式安装</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>基于 <a href="https://milvus.io/docs/install_standalone-docker.md">docker-compose</a> 安装</p>
</li>
<li class="lvl-2">
<p>基于 <a href="https://milvus.io/docs/install_standalone-helm.md">helm</a> 安装</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">helm repo add milvus https://milvus-io.github.io/milvus-helm/ &amp;&amp; helm repo update</span><br><span class="line">helm install my-release \</span><br><span class="line">    milvus/milvus \</span><br><span class="line">    --<span class="built_in">set</span> cluster.enabled=<span class="literal">false</span> \</span><br><span class="line">    --<span class="built_in">set</span> etcd.replicaCount=1 \</span><br><span class="line">    --<span class="built_in">set</span> minio.mode=standalone \</span><br><span class="line">    --<span class="built_in">set</span> pulsar.enabled=<span class="literal">false</span></span><br><span class="line">kubectl get pod my-release-milvus-standalone-54c4f88cb9-f84pf --template=<span class="string">'{{(index (index .spec.containers 0).ports 0).containerPort}}{{"\n"}}'</span></span><br><span class="line">kubectl port-forward service/my-release-milvus 27017:19530</span><br><span class="line">helm uninstall my-release</span><br></pre></td></tr></tbody></table></figure>
<p>使用 cluser 模式</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">helm repo add milvus https://milvus-io.github.io/milvus-helm/ &amp;&amp; helm repo update</span><br><span class="line">helm install my-release milvus/milvus</span><br><span class="line">helm uninstall my-release</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Examples">Examples</h3>
<p>处理所有非结构化数据，如反向图像搜索、音频搜索、分子搜索、视频分析、问答系统、自然语言处理等示例.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://milvus.io/docs/example_code.md">https://milvus.io/docs/example_code.md</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/milvus-io/bootcamp">https://github.com/milvus-io/bootcamp</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/towhee-io/examples">https://github.com/towhee-io/examples</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/msclock/milvus_solution">milvus evaluation solution</a></p>
</li>
<li class="lvl-2">
<p><a href="https://osschat.io/">milvus official osschat</a></p>
</li>
</ul>
<h2 id="Service-Encoding">Service Encoding</h2>
<p>处于安全考虑，通常需要将代码进行加密，以防止源码泄露。在 AI 服务中常见的加密方式有:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将源码转为 exe</p>
</li>
<li class="lvl-2">
<p>授权 license</p>
</li>
<li class="lvl-2">
<p>加密模型</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/weixin_43508499/article/details/124390983">模型加密示例</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/zong596568821xp/article/details/120522664">部署深度学习模型时的全流程加密方案探索</a></p>
</li>
</ul>
<h3 id="将源码转为exe">将源码转为 exe</h3>
<p>较为流程的转换方案是使用 pyinstaller 和 nuikta 将源码转为 exe. 这里使用 nuikta 方案.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.com/msclock/pytools/-/tree/master/nuitka">https://gitlab.com/msclock/pytools/-/tree/master/nuitka</a></p>
</li>
</ul>
<h3 id="授权license">授权 license</h3>
<h3 id="加密模型">加密模型</h3>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>Triton Serving</tag>
        <tag>AI Serving</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 实践</title>
    <url>/posts/a1fb79d2/</url>
    <content><![CDATA[<h2 id="Vim">Vim</h2>
<h3 id="查找">查找</h3>
<p>要在 Vim 中查找文本，可以使用以下命令：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>/pattern - 向前查找包含 “pattern” 的文本</p>
</li>
<li class="lvl-2">
<p>?pattern - 向后查找包含 “pattern” 的文本</p>
</li>
<li class="lvl-2">
<p>n - 跳转到下一个匹配项</p>
</li>
<li class="lvl-2">
<p>N - 跳转到上一个匹配项</p>
</li>
</ul>
<h3 id="跳转">跳转</h3>
<p>要在 Vim 中跳转到特定的行，可以使用以下命令：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>:n</code> - 跳转到第 n 行</p>
</li>
<li class="lvl-2">
<p><code>:0</code> - 跳转到文件的开头</p>
</li>
<li class="lvl-2">
<p><code>:$</code> - 跳转到文件的结尾</p>
</li>
</ul>
<span id="more"></span>
<p>要在 Vim 中跳转到另一个文件，可以使用以下命令：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>:e path/to/file - 打开另一个文件</p>
</li>
<li class="lvl-2">
<p>:bnext - 跳转到下一个缓冲区</p>
</li>
<li class="lvl-2">
<p>:bprev - 跳转到上一个缓冲区</p>
</li>
<li class="lvl-2">
<p>:ls - 列出所有缓冲区</p>
</li>
<li class="lvl-2">
<p>:bdelete - 删除当前缓冲区</p>
</li>
</ul>
<h3 id="多选">多选</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># enter visual mode</span></span><br><span class="line">ctrl+v</span><br><span class="line"><span class="comment"># move cursor</span></span><br><span class="line">hgjk</span><br><span class="line"><span class="comment"># copy with yank</span></span><br><span class="line">y</span><br><span class="line"><span class="comment"># paste</span></span><br><span class="line">p</span><br></pre></td></tr></tbody></table></figure>
<h3 id="替换">替换</h3>
<p>要替换文本，可以使用以下命令：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>:%s/old/new/g</code>: 替换所有出现的 “old” 文本为 “new” 文本</p>
</li>
<li class="lvl-2">
<p><code>:s/old/new/g</code>: 替换当前行中出现的 “old” 文本为 “new” 文本</p>
</li>
<li class="lvl-2">
<p><code>:s/old/new/gc</code>: 替换当前行中出现的 “old” 文本为 “new” 文本，并提示是否要进行替换</p>
</li>
</ul>
<h2 id="AstroNVim"><a href="https://astronvim.com/">AstroNVim</a></h2>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>airflow 框架使用经验</title>
    <url>/posts/986b0e9c/</url>
    <content><![CDATA[<p>主要总结 airflow 框架使用经验。</p>
<h2 id="Beginner">Beginner</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>Airflow Introduction</p>
</li>
<li class="lvl-2">
<p>Run Airflow in Python Env</p>
</li>
</ul>
<span id="more"></span>
<ul class="lvl-0">
<li class="lvl-2">
<p>Run Airflow in Docker</p>
</li>
<li class="lvl-2">
<p>Airflow Basics and Core Concepts</p>
</li>
<li class="lvl-2">
<p>Airflow Task Lifecycle</p>
</li>
<li class="lvl-2">
<p>Airflow Basic Architecture</p>
</li>
<li class="lvl-2">
<p>Airflow DAG with Bash Operator</p>
</li>
<li class="lvl-2">
<p>Airflow DAG with Python Operator</p>
</li>
<li class="lvl-2">
<p>Data Sharing via Airflow XComs</p>
</li>
<li class="lvl-2">
<p>Airflow Task Flow API</p>
</li>
<li class="lvl-2">
<p>Airflow Catch Up and Backfill</p>
</li>
<li class="lvl-2">
<p>Airflow Scheduler with Cron Expression</p>
</li>
<li class="lvl-2">
<p>Airflow Connection to Postgres</p>
</li>
<li class="lvl-2">
<p>Airflow Postgres Operator</p>
</li>
<li class="lvl-2">
<p>Airflow Docker Install Python Package 2 ways</p>
</li>
<li class="lvl-2">
<p>Airflow AWS S3 Sensor Operator</p>
</li>
<li class="lvl-2">
<p>Airflow Hooks S3 PostgreSQL</p>
</li>
</ul>
<h3 id="reference">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=K9AnJ9_ZAXE">https://www.youtube.com/watch?v=K9AnJ9_ZAXE</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=IH1-0hwFZRQ">https://www.youtube.com/watch?v=IH1-0hwFZRQ</a></p>
</li>
<li class="lvl-2">
<p><a href="https://marclamberti.com/blog/airflow-xcom/">https://marclamberti.com/blog/airflow-xcom/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/marclamberti/docker-airflow">https://github.com/marclamberti/docker-airflow</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/c/ApacheAirflow">https://www.youtube.com/c/ApacheAirflow</a></p>
</li>
</ul>
<h2 id="Operator">Operator</h2>
<h3 id="TriggerDagRunOperator">TriggerDagRunOperator</h3>
<p>使用新的 TriggerDagRunOperator，可以等待触发的 DAG 完成。不再需要创建自己的自定义运算符。这与将参数 wait_for_completion 设置为 true 一样简单。此外，参数 reset_dag_run 还允许回填触发的 DAGRuns，这是绝对关键的。</p>
<h4 id="reference-2">reference</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=8uKW0mPWmCk">https://www.youtube.com/watch?v=8uKW0mPWmCk</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.notion.so/The-TriggerDagRunOperator-699b5483f34a42e495183fd028b68267">https://www.notion.so/The-TriggerDagRunOperator-699b5483f34a42e495183fd028b68267</a></p>
</li>
</ul>
<h3 id="DockerOperator">DockerOperator</h3>
<p>Airflow DockerOperator 是一个非常强大的操作员。</p>
<p>它在 docker 容器中执行任务。使用 DockerOperator 有多种优势，例如：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>测试任务的更简单方法</p>
</li>
<li class="lvl-2">
<p>控制任务所需的资源</p>
</li>
<li class="lvl-2">
<p>避免依赖关系冲突</p>
</li>
</ul>
<p>以及更多。</p>
<h4 id="reference-3">reference</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=MdW2ZHHJWeo">https://www.youtube.com/watch?v=MdW2ZHHJWeo</a></p>
</li>
</ul>
<h2 id="Test-on-Airflow">Test on Airflow</h2>
<p>通过使用 airflow scheduler cli 可以方便的测试 dag 和 task.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># in airflow scheduler</span></span><br><span class="line">airflow task <span class="built_in">test</span> [dag_id] [task_id] [execution <span class="built_in">date</span>,如-1表示当前时间]</span><br><span class="line"><span class="comment"># 如果在容器外部</span></span><br><span class="line">docker <span class="built_in">exec</span> [container_id] airflow tasks <span class="built_in">test</span> [dag_id] [task_id] -1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="reference-4">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=ANJnYbLwLjE">https://www.youtube.com/watch?v=ANJnYbLwLjE</a></p>
</li>
</ul>
<h2 id="Airflow-Observability">Airflow Observability</h2>
<h3 id="reference-5">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=Hc4pYAUL6Qs">https://www.youtube.com/watch?v=Hc4pYAUL6Qs</a></p>
</li>
</ul>
<h2 id="Airflow-on-k8s">Airflow on k8s</h2>
<h3 id="KubernetesExecutor">KubernetesExecutor</h3>
<p>在本地多节点 Kubernetes 集群上使用 KubernetesExecutor 运行 Apache Airflow.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>相比其它 executor, KubernetesExecutor 动态创建工作节点，避免资源浪费</p>
</li>
<li class="lvl-2">
<p>任务间在 pod 间是隔离容错的</p>
</li>
<li class="lvl-2">
<p>减小 scheduler 由于边缘驱动触发压力</p>
</li>
</ul>
<h4 id="deploy-airflow-with-helm">deploy airflow with helm</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>non prod 和 prod 区分于 database 是否部署.</p>
</li>
<li class="lvl-2">
<p>由统一的管理多配置部署管理.</p>
</li>
<li class="lvl-2">
<p>配置参数化配置.</p>
</li>
<li class="lvl-2">
<p>scheduler,web server,database 单 pod 部署.</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/212959434.png?token=AKLDRN26UI5VKZDJKCOOJL3DKPYJM" alt="image."></p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">passing = KubernetesPodOperator(</span><br><span class="line">    namespace=<span class="string">"default"</span>,</span><br><span class="line">    image=<span class="string">"python:3.8-bullseye-slim"</span>,</span><br><span class="line">    cmds=[<span class="string">"python"</span>, <span class="string">"-c"</span>],</span><br><span class="line">    arguments=[<span class="string">"print('hello word')"</span>],</span><br><span class="line">    labels={<span class="string">"foo"</span>: <span class="string">"bar"</span>},</span><br><span class="line">    name=<span class="string">"passing-test"</span>,</span><br><span class="line">    task_id=<span class="string">"passing-task"</span>,</span><br><span class="line">    get_logs=<span class="literal">True</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="k8s-pod-operator">k8s pod operator</h4>
<p>由 scheduler 调度 worker 创建工作容器.</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/213549478.png?token=AKLDRN3BUF33SEOODYTJCULDKPY7C" alt="image."></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>通常在 executor_config 配置 KubernetesExecutor.</p>
</li>
</ul>
<h4 id="install-kind-helm-airflow">install kind &amp; helm &amp; airflow</h4>
<p>kind 本地多集群管理工具<br>
helm: 多集群服务脚本部署工具</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用 kind 创建本地集群</p>
</li>
<li class="lvl-2">
<p>helm 添加 airflow repos</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 airflow helm 仓库</span></span><br><span class="line">helm repo add airflow https://marclamberti.github.io/airflow-eks-helm-char</span><br><span class="line">helm repo update</span><br><span class="line">helm repo list</span><br><span class="line">helm search airflow</span><br><span class="line"><span class="comment"># 打印到本地配置 values.yaml</span></span><br><span class="line">helm show values airflow/airflow &gt; value.yaml</span><br><span class="line"><span class="comment"># helm 部署 airflow</span></span><br><span class="line">helm install -f values.yaml --kube-context kind-airflow-cluster airflow airflow/airflow</span><br><span class="line"><span class="comment"># 查看 airflow 部署</span></span><br><span class="line">kubectl get pods --context kind-airflow-cluster</span><br><span class="line"><span class="comment"># 导出本地访问端口</span></span><br><span class="line">kubectl port-forward svc/airflow-webserver 8080:8080 --context kind-airflow-cluster</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像 在values.yaml指定镜像重新部署</span></span><br><span class="line"><span class="comment"># FROM apache/airflow:1.10.10.1-alpha2-python3.7</span></span><br><span class="line"><span class="comment"># COPY dags $AIRFLOW_HOME/dags</span></span><br><span class="line">docker build -t airflow-image:v1.0.0</span><br><span class="line"><span class="comment"># 删除本地集群</span></span><br><span class="line"><span class="comment"># kind delete cluster --name=airflow-cluster</span></span><br><span class="line">helm upgrade -f values.yaml --kube-context kind-airflow-cluster airflow airflow/airflow</span><br></pre></td></tr></tbody></table></figure>
<h4 id="reference-6">reference</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=AjBADrVQJv0">https://www.youtube.com/watch?v=AjBADrVQJv0</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=3VDeKmxHWYA">https://www.youtube.com/watch?v=3VDeKmxHWYA</a></p>
</li>
</ul>
<h3 id="reference-7">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://marclamberti.com/blog/airflow-on-kubernetes-get-started-in-10-mins/">https://marclamberti.com/blog/airflow-on-kubernetes-get-started-in-10-mins/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://varunbpatil.github.io/2020/10/01/airflow-on-kubernetes.html">https://varunbpatil.github.io/2020/10/01/airflow-on-kubernetes.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.netapp.com/zh-cn/netapp-solutions/ai/aicp_example_apache_airflow_workflows_overview.html">https://docs.netapp.com/zh-cn/netapp-solutions/ai/aicp_example_apache_airflow_workflows_overview.html</a></p>
</li>
</ul>
<h3 id="reference-8">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://marclamberti.com/blog/category/apache-airflow/">https://marclamberti.com/blog/category/apache-airflow/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://maxcotec.com/blog/apache-airflow-architecture/">https://maxcotec.com/blog/apache-airflow-architecture/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>Apifox</title>
    <url>/posts/3adb19d8/</url>
    <content><![CDATA[<h2 id="apifox">apifox</h2>
<p>一站式 api 设计测试及文档生成管理工具。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://apifox.com/">https://apifox.com/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>应用架构</title>
    <url>/posts/8f889db4/</url>
    <content><![CDATA[<p>本文总结了架构设计的基本理念。</p>
<span id="more"></span>
<h2 id="服务设计理念">服务设计理念</h2>
<h3 id="软件即服务">软件即服务</h3>
<h4 id="应用设计-12-基本准则">应用设计 12 基本准则</h4>
<p>比较流程的应用设计 <a href="https://12factor.net/">12</a> 基本准则</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用标准化流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目。</p>
</li>
<li class="lvl-2">
<p>和操作系统之间尽可能的划清界限，在各个系统中提供最大的可移植性。</p>
</li>
<li class="lvl-2">
<p>适合部署在现代的云计算平台，从而在服务器和系统管理方面节省资源。</p>
</li>
<li class="lvl-2">
<p>将开发环境和生产环境的差异降至最低，并使用持续交付实施敏捷开发。</p>
</li>
<li class="lvl-2">
<p>可以在工具、架构和开发流程不发生明显变化的前提下实现扩展。</p>
</li>
</ul>
<h4 id="基准代码">基准代码</h4>
<p>一份基准代码，多份部署</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>一个应用不是分布式系统，仅需一个代码版本控制即可。</p>
</li>
<li class="lvl-2">
<p>所有部署（测试、生产等）对应一份基准代码。</p>
</li>
</ul>
<h4 id="依赖声明">依赖声明</h4>
<p>显示声明依赖关系</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用不应该隐式依赖于系统级类库，而是通过类库打包工具显示声明依赖。</p>
</li>
<li class="lvl-2">
<p>同样不应该依赖于系统级工具，而是以类库打包的方式打包进应用。</p>
</li>
</ul>
<h4 id="配置">配置</h4>
<p>在环境中存储配置</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>用于当基准代码能立刻开源，而不暴露任何敏感信息。</p>
</li>
<li class="lvl-2">
<p>环境变量有利于不同的部署，且颗粒度要相对小和独立。</p>
</li>
</ul>
<h4 id="后端服务">后端服务</h4>
<p>将后端服务当作附加资源</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>这里后端服务为程序运行所需要的通过网络调用的各种服务，将类似的数据库（MySQL、CouchDB），消息 / 队列系统（RabbitMQ），SMTP（邮件发送服务），以及缓存系统（Redis）等配置成可本地及第三方可配置的附加部署资源，使松耦合资源和应用部署，达到最小代码修改的目的。</p>
</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/09/12/4NDMFhVLxbk3ARJ.png" alt="attached-resources.png."></p>
<h4 id="构建，发布，运行">构建，发布，运行</h4>
<p>严格分离构建和运行</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>基准代码的部署，严格分为构建（仓库代码转为可执行包过程）、发布（将构建结果和发布部署配置结合确定发布版本，并能立即投入运行环境中使用）、运行（指定对应的发布版本，在执行环境中启动一系列应用程序）。</p>
</li>
<li class="lvl-2">
<p>严格区分有利于回退部署，更容易发现问题。</p>
</li>
</ul>
<h4 id="进程">进程</h4>
<p>以一个或多个无状态进程运行应用</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用进程必须无状态且<a href="https://en.wikipedia.org/wiki/Shared-nothing_architecture">无共享</a>，任何需要持久化的数据都要存储在 <strong>后端服务</strong> 内。</p>
</li>
<li class="lvl-2">
<p>内存区域或磁盘空间可以作为进程在做某种事务型操作时的缓存。</p>
</li>
<li class="lvl-2">
<p>用户数据缓存中的数据应该保存在诸如 Memcached 或 Redis 这样的带有过期时间的缓存中。</p>
</li>
</ul>
<h4 id="端口绑定">端口绑定</h4>
<p>通过端口绑定提供服务</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>互联网应用 <strong>通过端口绑定来提供服务</strong> ，并监听发送至该端口的请求。</p>
</li>
<li class="lvl-2">
<p>通常的实现思路是，将网络服务器类库通过 <strong><a href="#%E4%BE%9D%E8%B5%96%E5%A3%B0%E6%98%8E">依赖声明</a></strong> 载入应用。例如，Python 的 <a href="https://www.tornadoweb.org/en/stable/">Tornado</a>。几乎所有服务器软件都可以通过进程绑定端口来等待请求。</p>
</li>
</ul>
<h4 id="并发">并发</h4>
<p>通过进程模型进程扩展，任何计算机程序，一旦启动，就会生成一个或多个进程。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>进程是一等公民，基于 <strong><a href="https://adam.herokuapp.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/">unix 守护进程模型</a></strong>。</p>
</li>
<li class="lvl-2">
<p>将不同的任务分配不同的进程类型调度并发进程模型。</p>
</li>
<li class="lvl-2">
<p>所有应用程序必须可以在多台物理机器间跨进程工作。</p>
</li>
<li class="lvl-2">
<p>基于 <a href="#%E8%BF%9B%E7%A8%8B">进程设计</a> 在系统急需扩展时变得简单及稳妥。</p>
</li>
<li class="lvl-2">
<p>建议使用操作系统进程管理（systemd，分布式进程管理云平台，foreman 等工具），管理输出流，崩溃，重启等请求。</p>
</li>
</ul>
<h4 id="易处理">易处理</h4>
<p>快速启动和优雅终止可最大化健壮性</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>应用进程应该时可以瞬间开启或停止，有利于迅速部署变化的 <a href="#%E5%9F%BA%E5%87%86%E4%BB%A3%E7%A0%81">基准代码</a> 或 <a href="#%E9%85%8D%E7%BD%AE">配置</a> 。</p>
</li>
<li class="lvl-2">
<p>进程应当最求最小启动时间，提供更敏捷的 <a href="#%E6%9E%84%E5%BB%BA%E5%8F%91%E5%B8%83%E8%BF%90%E8%A1%8C">发布</a> 及扩展过程。</p>
</li>
<li class="lvl-2">
<p>进程应该在接受到 <strong>SIGTERM</strong> 优雅的终止。优雅终止是指停止监听服务的端口，即拒绝所有新的请求，并继续执行当前已接收的请求，然后退出。</p>
</li>
<li class="lvl-2">
<p>对于 worker 进程来说，优雅终止是指将当前任务退回队列。例如，<a href="http://www.rabbitmq.com/">RabbitMQ</a> 中，worker 可以发送一个 <a href="http://www.rabbitmq.com/amqp-0-9-1-quickref.html#basic.nack">NACK</a> 信号。此类型的进程所隐含的要求是，任务都应该 <a href="http://en.wikipedia.org/wiki/Reentrant_%28subroutine%29">可重复执行</a> ， 这主要由将结果包装进事务或是使重复操作 <a href="https://en.wikipedia.org/wiki/Idempotence">幂等</a> 来实现。</p>
</li>
<li class="lvl-2">
<p>进程还应当在面对突然死亡时保持健壮，例如底层硬件故障。<a href="https://lwn.net/Articles/191059/">Crash-only design</a> 将这种概念转化为 <a href="https://docs.couchdb.org/en/3.2.2-docs/">合乎逻辑的理论</a>。</p>
</li>
</ul>
<h4 id="开发环境与线上环境等价">开发环境与线上环境等价</h4>
<p>尽可能的保持开发，预发布，线上环境相同</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>差异体现在，时间差异（编写代码和上线的时间）、人员差异（开发人员、部署运维人员的间代码）、工具差异（本地部署开发环境及线上环境）</p>
</li>
<li class="lvl-2">
<p>做到<a href="http://avc.com/2011/02/continuous-deployment/">持续部署</a>，就需要做到本地和线上最小化差异</p>
</li>
<li class="lvl-2">
<p>方法，缩小时间差异：开发人员可以几小时，甚至几分钟就部署代码；缩小人员差异：开发人员不只要编写代码，更应该密切参与部署过程以及代码在线上的表现；缩小工具差异：尽量保证开发环境以及线上环境的一致性。</p>
</li>
<li class="lvl-2">
<p><a href="#%E5%90%8E%E7%AB%AF%E6%9C%8D%E5%8A%A1">后端服务</a> 是保持开发与线上等价的重要部分，例如数据库，队列系统，以及缓存。许多语言都提供了简化获取后端服务的类库。如，队列（Python/Django，Celery，RabbitMQ, Beanstalkd, Redis）。</p>
</li>
<li class="lvl-2">
<p>开发人员应该反对在不同环境间使用不同的后端服务，是因为，不同的后端服务意味着会突然出现的不兼容，造成的错误导致持续部署问题的解决需要非常大的代价。</p>
</li>
<li class="lvl-2">
<p>使用类似 <a href="https://www.chef.io/products/chef-infra">Chef</a> 和 <a href="http://docs.puppetlabs.com/">Puppet</a> 的声明式配置工具，结合像 <a href="https://www.vagrantup.com/intro">Vagrant</a> 这样轻量的虚拟环境就可以使得开发人员的本地环境与线上环境无限接近。</p>
</li>
</ul>
<h4 id="日志">日志</h4>
<p>把日志当作事件流，日志使得应用程序运行的动作变得透明。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>日志应该是 <a href="https://adam.herokuapp.com/past/2011/4/1/logs_are_streams_not_files/">事件流</a> 的汇总。</p>
</li>
<li class="lvl-2">
<p>应用本身<strong>从不考虑存储自己的输出流</strong>。每一个运行的进程都会直接的标准输出（stdout）事件流。</p>
</li>
<li class="lvl-2">
<p>在预发布或线上部署中，每个进程的输出流由运行环境截获，并将其他输出流整理在一起，然后一并发送给一个或多个最终的处理程序，用于查看或是长期存档。这些存档路径对于应用来说不可见也不可配置，而是完全交给程序的运行环境管理。类似 <a href="https://github.com/heroku/logplex">Logplex</a> 和 <a href="https://github.com/fluent/fluentd">Fluentd</a> 的开源工具可以达到这个目的。</p>
</li>
<li class="lvl-2">
<p>输出流可以发送到 <a href="https://www.splunk.com/">Splunk</a> 这样的日志索引及分析系统，或 <a href="http://hive.apache.org/">Hadoop/Hive</a> 这样的通用数据存储系统。这些系统为查看应用的历史活动提供了强大而灵活的功能。</p>
</li>
</ul>
<h4 id="管理进程">管理进程</h4>
<p>后台管理任务当作一次性进程运行，区别于处理应用的常规业务任务进程。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>一次性管理进程应该和正常的 <a href="#%E8%BF%9B%E7%A8%8B">常驻进程</a> 使用同样的环境。</p>
</li>
<li class="lvl-2">
<p>随基准代码使用相同的配置、发布，避免同步问题。</p>
</li>
<li class="lvl-2">
<p>所有进程类型应该使用同样的 <a href="#%E4%BE%9D%E8%B5%96%E5%A3%B0%E6%98%8E">依赖隔离</a> 技术。</p>
</li>
</ul>
<h2 id="微服务">微服务</h2>
<h3 id="架构考虑">架构考虑</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>业务需求，系统实现功能。</p>
</li>
<li class="lvl-2">
<p>技术栈，公司员工擅长的技术栈。</p>
</li>
<li class="lvl-2">
<p>成本，人力财力支持。</p>
</li>
<li class="lvl-2">
<p>组织架构，部分小组支持。</p>
</li>
<li class="lvl-2">
<p>可扩展性，软件设计需求变化，业务变更。</p>
</li>
<li class="lvl-2">
<p>可维护性，系统学习成本，bug 修复成本。</p>
</li>
</ul>
<h3 id="架构">架构</h3>
<h4 id="单体架构">单体架构</h4>
<p>功能、业务集成在发布中，部署运行在同一个进程中。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>一层架构：业务逻辑、数据库混合等。</p>
</li>
<li class="lvl-2">
<p>MVC 模式：Model、View、Controller，简单来说分层设计。</p>
</li>
<li class="lvl-2">
<p>前后端：单体架构分离。</p>
</li>
</ul>
<p>单体架构特征及难易：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>易于开发，开发工具等</p>
</li>
<li class="lvl-2">
<p>易于测试，测试框架等</p>
</li>
<li class="lvl-2">
<p>易于部署，一份代码发布部署</p>
</li>
<li class="lvl-2">
<p>易于水平伸缩，代码的 copy。</p>
</li>
<li class="lvl-2">
<p>难于维护，代码膨胀。</p>
</li>
<li class="lvl-2">
<p>难于构建、测试、部署成本大。</p>
</li>
<li class="lvl-2">
<p>难于上手，接手困难。</p>
</li>
<li class="lvl-2">
<p>难于创新，框架固定，升级风险。</p>
</li>
<li class="lvl-2">
<p>难于扩展，水平（需求逻辑）、垂直（物理硬件）扩展。</p>
</li>
</ul>
<h4 id="微服务架构">微服务架构</h4>
<p>使用一套小服务开发单个应用，每个服务运行在<strong>单独的进程</strong>中，采取<strong>轻量级的通信</strong>机制互联，并且每个服务都可以<strong>自动化部署</strong>。</p>
<p>微服务架构特征：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>单一职责，紧密相关业务放在一起。</p>
</li>
<li class="lvl-2">
<p>轻量级通信，<strong>http/grpc</strong> 平台无关，语言无关。</p>
</li>
<li class="lvl-2">
<p>隔离性，单独进程隔离。</p>
</li>
<li class="lvl-2">
<p>数据隔离，降低实现复杂性，方便微服务间实现无状态通信及不断添加微服务。</p>
</li>
<li class="lvl-2">
<p>技术多样性，技术栈多样性。</p>
</li>
</ul>
<p>第二代微服务：k8s, service mesh, serverless。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>k8s: 云平台。</p>
</li>
<li class="lvl-2">
<p>service mesh：服务同行。</p>
</li>
<li class="lvl-2">
<p>serverless：无服务无需关注底层。</p>
</li>
</ul>
<h3 id="微服务优势">微服务优势</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>围绕业务构建团队，根据康威定律，团队决定成果。</p>
</li>
<li class="lvl-2">
<p>去中心化数据管理，以业务区分将数据存储</p>
<ul class="lvl-2">
<li class="lvl-4">团队，内聚，独立开发业务，没有依赖，沟通成本低。</li>
<li class="lvl-4">产品，服务彼此独立部署，没有依赖，充分利用资源（频繁使用的服务可以部署多份）。</li>
</ul>
</li>
</ul>
<blockquote>
<p>[!IMPORTANT]<br>
微服务不是银弹，没有任何一种技术和管理上的进步，可以极大的提升生产效率。在微服务实践中需要做相应的取舍。</p>
</blockquote>
<h3 id="微服务劣势">微服务劣势</h3>
<p>网络通信需要做极大的优化，基本上等于分布式痛点，现有的比较流行的开源解决方式是使用 istio。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>服务注册 / 发现</p>
</li>
<li class="lvl-2">
<p>路由，流量转移</p>
</li>
<li class="lvl-2">
<p>弹性，熔断，超时，重试</p>
</li>
<li class="lvl-2">
<p>安全</p>
</li>
<li class="lvl-2">
<p>可观测性</p>
</li>
</ul>
<h2 id="分布式">分布式</h2>
<h3 id="分布式八大难点">分布式八大难点</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>网络，需要做数据消息缓存。</p>
</li>
<li class="lvl-2">
<p>延时，单个调用从单体调用 ns 到 ms。</p>
</li>
<li class="lvl-2">
<p>带宽，考虑同一时间的负载，主要和延时相关。</p>
</li>
<li class="lvl-2">
<p>安全，通信必须考虑安全加密、类库漏洞等。</p>
</li>
<li class="lvl-2">
<p>网络拓扑，k8s、服务网格处理单点故障、自动伸缩、服务迁移影响。</p>
</li>
<li class="lvl-2">
<p>服务器管理，资源管理配置及依赖。</p>
</li>
<li class="lvl-2">
<p>监控和可观测性（新增），系统存在问题需能告警及跟踪。</p>
</li>
<li class="lvl-2">
<p>消息传输成本，grpc/json 通信协议。</p>
</li>
<li class="lvl-2">
<p>网络同质，不同客户端及环境使用的网络不同质需要做针对化处理。</p>
</li>
</ul>
<h2 id="系统设计">系统设计</h2>
<p>系统设计尽量遵循 MVP 原则.</p>
<blockquote>
<p>[!IMPORTANT]<br>
MVP (Minimum viable Product) 以最小的代价提供一个可测试交付的版本，然后再后续开发中直到一个稳定的状态。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/ByteByteGoHq/system-design-101">https://github.com/ByteByteGoHq/system-design-101</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md">系统设计入门</a></p>
</li>
</ul>
<h2 id="TDD">TDD</h2>
<p><a href="http://wiki.c2.com/?TestDrivenDevelopment">Test Driven Development</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://wiki.c2.com/?DoSimpleThings">DoSompleThings</a></p>
</li>
<li class="lvl-2">
<p><a href="http://wiki.c2.com/?CodeUnitTestFirst">CodeUnitTestFirst</a></p>
</li>
</ul>
<p>以下是对 TDD (Test Driven Development) 的归纳总结</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>TDD 是一种开发方法论，它要求在编写实际代码之前先编写测试代码。</p>
</li>
<li class="lvl-2">
<p>TDD 的基本原则是：先写一个失败的测试，然后编写足够的代码使其通过，最后进行重构。</p>
</li>
<li class="lvl-2">
<p>TDD 的好处包括：提高代码质量、减少 bug、提高代码可维护性、加快开发速度等。</p>
</li>
<li class="lvl-2">
<p>TDD 的核心是测试驱动，通过编写测试用例来驱动代码的开发。</p>
</li>
<li class="lvl-2">
<p>TDD 的流程包括：编写测试、运行测试、编写代码、运行测试、重构代码。</p>
</li>
<li class="lvl-2">
<p>TDD 的关键是编写简单、清晰、可测试的代码。</p>
</li>
<li class="lvl-2">
<p>TDD 适用于各种编程语言和项目类型。</p>
</li>
</ul>
<h2 id="简历">简历</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>项目</p>
<ul class="lvl-2">
<li class="lvl-4">规模</li>
<li class="lvl-4">背景</li>
<li class="lvl-4">价值</li>
<li class="lvl-4">困难</li>
<li class="lvl-4">成果</li>
<li class="lvl-4">技术栈</li>
</ul>
</li>
<li class="lvl-2">
<p>教育</p>
<ul class="lvl-2">
<li class="lvl-4">专业</li>
<li class="lvl-4">学历</li>
<li class="lvl-4">竞赛</li>
<li class="lvl-4">证书</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>choco 包管理器</title>
    <url>/posts/78ce69fa/</url>
    <content><![CDATA[<p>本文总结了 windows 包管理工具常用命令</p>
<h2 id="install">install</h2>
<p>通过 powershell 安装</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Set your PowerShell execution policy</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned <span class="literal">-Force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Chocolatey</span></span><br><span class="line"><span class="built_in">iwr</span> https://chocolatey.org/install.ps1 <span class="literal">-UseBasicParsing</span> | <span class="built_in">iex</span></span><br><span class="line"></span><br><span class="line">choco <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line">choco upgrade chocolatey</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h2 id="常用命令">常用命令</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>choco list -li 查看本地安装的软件</p>
</li>
<li class="lvl-2">
<p>choco search nodejs 查找安装包</p>
</li>
<li class="lvl-2">
<p>choco install sed 下载</p>
</li>
<li class="lvl-2">
<p>choco uninstall sed 卸载</p>
</li>
<li class="lvl-2">
<p>choco upgrade sed 更新（update）</p>
</li>
</ul>
<h2 id="常用开发工具">常用开发工具</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>docker-desktop/kubernetes-helm/kind</p>
</li>
<li class="lvl-2">
<p>dapr</p>
</li>
<li class="lvl-2">
<p>fzf/tree/sed/grep/rsync</p>
</li>
<li class="lvl-2">
<p>git</p>
</li>
<li class="lvl-2">
<p>JetBrainsNF</p>
</li>
<li class="lvl-2">
<p>neovim</p>
</li>
<li class="lvl-2">
<p>nvm</p>
</li>
<li class="lvl-2">
<p>kubectl</p>
</li>
</ul>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定版本安装</span></span><br><span class="line">choco install kubectl <span class="literal">--version</span>=<span class="number">1.22</span>.<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="reference">reference</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.chocolatey.org/en-us/choco/commands/">https://docs.chocolatey.org/en-us/choco/commands/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>Badge</title>
    <url>/posts/3f316719/</url>
    <content><![CDATA[<h2 id="Badge">Badge</h2>
<p>代码仓库中的 Badge（徽章）是一种用于展示项目状态或元数据的小型图标。它们通常以图像或文本的形式显示在项目的 README 文件、文档页面或社区平台上。</p>
<p>以下是一些常见的 Badge 类型及其作用：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>构建状态：徽章可以显示项目的构建状态，例如是否通过了持续集成（CI）流程，或者最新的构建结果。这样的徽章可以让用户快速了解项目的构建情况，并确定代码的稳定性。</p>
</li>
<li class="lvl-2">
<p>测试覆盖率：徽章可以显示项目的测试覆盖率。这可以帮助开发人员评估项目的测试质量和代码覆盖范围，并鼓励团队保持良好的测试习惯。</p>
</li>
<li class="lvl-2">
<p>版本号：徽章可以显示项目的当前版本号。这对于用户和开发人员来说是一个有用的参考，可以让他们知道他们使用的是哪个版本，或者是否需要升级到最新版本。</p>
</li>
<li class="lvl-2">
<p>文档状态：徽章可以显示项目文档的状态，例如是否更新、是否有详细的文档覆盖等。这对于用户来说是一个重要的指标，可以帮助他们评估项目的可用性和易用性。</p>
</li>
<li class="lvl-2">
<p>许可证信息：徽章可以显示项目所使用的开源许可证类型和版本信息。这对于其他开发人员来说是一个重要的元数据，可以帮助他们了解项目的许可证限制和使用条件。</p>
</li>
</ul>
<p>徽章通常以 Markdown 或 HTML 代码的形式嵌入到项目文档中，并链接到相关的状态或元数据页面。它们可以提供有用的信息和指导，使用户和开发人员更好地了解和使用项目。同时，徽章也为项目增添了一些可视化的元素，使其更具吸引力和专业性。</p>
<span id="more"></span>
<h2 id="Resource">Resource</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://badge.fury.io/">version badge</a></td>
<td><a href="http://fury.io">fury.io</a></td>
<td>badge 工具 </td>
</tr>
<tr>
<td><a href="https://shields.io/">shields badge</a></td>
<td>shields</td>
<td>badge 工具</td>
</tr>
</tbody>
</table>
<h2 id="Shields-Badge">Shields Badge</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://shields.io/badges">https://shields.io/badges</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/@therafamartins/make-your-customized-badges-in-a-few-minutes-18e75475e271">https://medium.com/@therafamartins/make-your-customized-badges-in-a-few-minutes-18e75475e271</a></p>
</li>
</ul>
<h3 id="分类">分类</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>pypi: <code>https://img.shields.io/pypi/v/:packageName</code></p>
</li>
<li class="lvl-2">
<p>github license: <code>https://img.shields.io/github/license/:user/:repo</code></p>
</li>
<li class="lvl-2">
<p>github release: <code>https://img.shields.io/github/v/release/:user/:repo</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>copier</title>
    <url>/posts/ae78e30a/</url>
    <content><![CDATA[<h2 id="Resource">Resource</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/copier-org/copier/">copier</a></td>
<td>copier-org</td>
<td> 模板生成器</td>
</tr>
</tbody>
</table>
<h2 id="copier">copier</h2>
<p>copier 是一个模板生成器，可以生成任意类型的模板.</p>
<span id="more"></span>
<h3 id="使用">使用</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pipx install copier</span><br><span class="line"></span><br><span class="line">copier copy &lt;template&gt; &lt;output&gt;</span><br><span class="line">copier update</span><br></pre></td></tr></tbody></table></figure>
<h3 id="jinja">jinja</h3>
<h4 id="和"><code>-%]</code> 和 <code>%]</code></h4>
<p><code>%]</code> 和 <code>[%</code> 确保保留这些前后额外的空白字符，<code>-%]</code> 和 <code>[%-</code> 确保在渲染结果中不会出现额外的空白字符。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>[%- endif %] 表示在 endif 标记之前删除任何尾随的空格和换行符。</p>
</li>
<li class="lvl-2">
<p>[% endif -%] 表示在 endif 标记之后删除任何尾随的空格和换行符。</p>
</li>
<li class="lvl-2">
<p>[% endif %] 不会删除尾随的空格和换行符。</p>
</li>
</ul>
<h4 id="include">include</h4>
<p>在 jinja 中使用 include 拆分成多个模板，方便复用替换</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/serious-scaffold/serious-scaffold-python/pull/187">https://github.com/serious-scaffold/serious-scaffold-python/pull/187</a></p>
</li>
<li class="lvl-2">
<p><a href="https://copier.readthedocs.io/en/stable/configuring/#importing-jinja-templates-and-macros">https://copier.readthedocs.io/en/stable/configuring/#importing-jinja-templates-and-macros</a></p>
</li>
</ul>
<h2 id="收集的模板">收集的模板</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/serious-scaffold/serious-scaffold-python">https://github.com/serious-scaffold/serious-scaffold-python</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/lincc-frameworks/python-project-template">https://github.com/lincc-frameworks/python-project-template</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>cpp 实践</title>
    <url>/posts/caeaa4a1/</url>
    <content><![CDATA[<h2 id="开发社区">开发社区</h2>
<p>搜集的 C++ 问答社区</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://developercommunity.visualstudio.com/cpp">Visual Studio (Microsoft)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.reddit.com/r/cpp/">reddit</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.codingame.com/learn">coedingGame</a></p>
</li>
<li class="lvl-2">
<p><a href="https://bytes.com/browse/">bytes</a></p>
</li>
<li class="lvl-2">
<p><a href="https://medium.com/">medium</a></p>
</li>
<li class="lvl-2">
<p><a href="https://dev.to/">dev.to</a></p>
</li>
</ul>
<h2 id="相关资源">相关资源</h2>
<p>C++ 比较庞杂，开源社区资源，整理如下：</p>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://isocpp.org/">ISO CPP</a></td>
<td>isocpp</td>
<td> 规范 </td>
</tr>
<tr>
<td><a href="https://isocpp.org/">C++ Core Guidelines</a></td>
<td>isocpp</td>
<td> 规范 </td>
</tr>
<tr>
<td><a href="https://cpp-note.readthedocs.io/zh/latest/index.html">C++ Note</a></td>
<td>TOMO-CAT</td>
<td> 基本语法 </td>
</tr>
<tr>
<td><a href="https://abseil.io/tips/">C++ Tips</a></td>
<td>Abseil 及 Google</td>
<td> 规范 </td>
</tr>
<tr>
<td><a href="https://google.github.io/styleguide/cppguide.html">Google C++ Style Guide</a></td>
<td>Google</td>
<td> 规范 </td>
</tr>
<tr>
<td><a href="https://www.cppstories.com/p/resources/">C++ Stories</a></td>
<td>Bartłomiej Filipek</td>
<td> 博客 </td>
</tr>
<tr>
<td><a href="https://fenbf.github.io/AwesomePerfCpp/">AwesomePerfCpp</a></td>
<td>fenbf</td>
<td> 博客 </td>
</tr>
<tr>
<td><a href="https://github.com/jobbole/awesome-cpp-cn">awesome cpp cn</a></td>
<td>jobbole</td>
<td> 框架 </td>
</tr>
<tr>
<td><a href="https://github.com/fffaraz/awesome-cpp">awesome cpp</a></td>
<td>fffaraz</td>
<td> 框架 </td>
</tr>
<tr>
<td><a href="https://cppinsights.io/">C++ Insights</a></td>
<td>cppinsights</td>
<td> 工具 </td>
</tr>
<tr>
<td><a href="https://godbolt.org/">C++ Compiler Explorer</a></td>
<td>godbolt</td>
<td> 工具 </td>
</tr>
<tr>
<td><a href="https://cpulator.01xz.net/">Computer simulator</a></td>
<td>cpulator</td>
<td> 工具 </td>
</tr>
<tr>
<td><a href="https://wandbox.org/">sandbox</a></td>
<td>melpon</td>
<td> 工具 </td>
</tr>
<tr>
<td><a href="https://key.words.run/cn?aid=6370f724ea64396ce2e709e0">Reshaper 激活码</a></td>
<td> Reshaper</td>
<td> 插件 / 工具 </td>
</tr>
<tr>
<td><a href="https://www.wholetomato.com/">Visual Assist</a></td>
<td>Visual Assist</td>
<td> 插件 / 工具 </td>
</tr>
<tr>
<td><a href="https://johnnysswlab.com/">Performance Effect</a></td>
<td>johnnysswlab</td>
<td>blog</td>
</tr>
<tr>
<td><a href="https://www.open-std.org/JTC1/SC22/WG21/">ISO/IEC C++</a></td>
<td>ISO/IEC</td>
<td> 标准规范 </td>
</tr>
<tr>
<td><a href="https://www.open-std.org/JTC1/SC22/WG14/">ISO/IEC C</a></td>
<td>ISO/IEC</td>
<td> 标准规范 </td>
</tr>
<tr>
<td><a href="https://www.open-std.org/JTC1/SC22/WG15/">ISO/IEC POSIX</a></td>
<td>ISO/IEC</td>
<td> 标准规范 </td>
</tr>
<tr>
<td><a href="https://github.com/cpp-best-practices">cpp-best-practices</a></td>
<td>cpp-best-practices</td>
<td>Jason Turner</td>
</tr>
<tr>
<td><a href="https://cppnext">cppnext</a></td>
<td>Alex Dathskovsky blog</td>
<td> 博客 </td>
</tr>
<tr>
<td><a href="https://alandefreitas.github.io/moderncpp/">moderncpp</a></td>
<td>Alan De Freitas</td>
<td> 博客 </td>
</tr>
<tr>
<td><a href="https://github.com/sandordargo/cpp-resources">cpp-resources</a></td>
<td>sandordargo</td>
<td>github 仓库 </td>
</tr>
<tr>
<td><a href="https://caiorss.github.io/C-Cpp-Notes/">c-cpp-notes</a></td>
<td>caiorss</td>
<td> 博客</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="vscode">vscode</h2>
<h3 id="Devcontainer">Devcontainer</h3>
<p>推荐使用 devcontainer 配置 <a href="https://github.com/devcontainers/images/tree/main/src/cpp">cpp</a> 开发环境，只需要在 devcontainer.json 中添加</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"C++"</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"build"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"dockerfile"</span><span class="punctuation">:</span> <span class="string">"Dockerfile.dev"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="comment">// Update 'VARIANT' to pick an Ubuntu OS version: ubuntu-22.04, ubuntu-21.04, ubuntu-20.04, ubuntu-18.04</span></span><br><span class="line">        <span class="comment">// Use Ubuntu 18.04 or Ubuntu 21.04 on local arm64/Apple Silicon</span></span><br><span class="line">        <span class="attr">"VARIANT"</span><span class="punctuation">:</span> <span class="string">"ubuntu-22.04"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// User in container</span></span><br><span class="line">        <span class="attr">"USERNAME"</span><span class="punctuation">:</span> <span class="string">"vscode"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"context"</span><span class="punctuation">:</span> <span class="string">"./.."</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>
<p>其中， Dockerfile.dev 中基础镜像选择 <a href="http://mcr.microsoft.com/devcontainers/cpp">mcr.microsoft.com/devcontainers/cpp</a> 进行扩展：</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">ARG</span> VARIANT=ubuntu-<span class="number">22.04</span></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/vscode/devcontainers/cpp:${VARIANT}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Extsension">Extsension</h3>
<p>用于 Cpp 开发的常用 VSCode 插件：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>C/C++：官方提供的 C++ 插件，提供了代码补全、语法高亮、调试等功能。</p>
</li>
<li class="lvl-2">
<p>C++ Intellisense：提供了更强大的代码补全功能，支持头文件、宏定义等。</p>
</li>
<li class="lvl-2">
<p>C++ TestMate：提供了一个测试资源管理器，可以方便地运行和调试 C++ 测试。</p>
</li>
<li class="lvl-2">
<p>C++ Insights：提供了一个侧边栏，可以方便地查看 C++ 代码的编译器输出。</p>
</li>
<li class="lvl-2">
<p>CMake Tools：提供了一个集成的 CMake 工具，可以方便地生成和构建 C++ 项目。</p>
</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"extensions"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">"ms-vscode.cpptools"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"austin.code-gnu-global"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"mitaki28.vscode-clang"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"twxs.cmake"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"vector-of-bool.cmake-tools"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"llvm-vs-code-extensions.vscode-clangd"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"mjbvz.vscode-lldb"</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Debug">Debug</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://code.visualstudio.com/docs/cpp">https://code.visualstudio.com/docs/cpp</a></p>
</li>
</ul>
<h2 id="CI">CI</h2>
<h3 id="GitHub-Action">GitHub Action</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/aminya/setup-cpp">setup-cpp</a></p>
</li>
</ul>
<h2 id="Resource-Template">Resource Template</h2>
<h3 id="cpp-项目模板">cpp 项目模板</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/cpp-best-practices/cmake_template">cpp-best-practices/cmake_template</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/hugorbarbosa/cpp-project-template">hugorbarbosa/cpp-project-template</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/MangaD/cpp-project-template">MangaD/cpp-project-template</a></p>
</li>
</ul>
<h3 id="cmake-模块模板">cmake 模块模板</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/cmake-registry">cmake-registry</a></p>
</li>
<li class="lvl-2">
<p><a href="https://aminya.github.io/project_options/html/index.html">project_options: 较全面的项目配置</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.kitware.com/cmake/community/-/wikis/FAQ">cmake community faq</a></p>
</li>
</ul>
<h2 id="CMake">CMake</h2>
<!--
https://www.youtube.com/watch?v=y9kSr5enrSk
https://github.com/MangaD/cpp-project-template/tree/main
-->
<p>CMake 是 C++ 非常成熟的开发工具链。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.kitware.com/cmake/community">https://gitlab.kitware.com/cmake/community</a></p>
</li>
</ul>
<h3 id="CMake-Beginner">CMake Beginner</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/guide/tutorial/index.html">官方教程</a>: 包括版本、库、目标、安装、测试、打包</p>
</li>
<li class="lvl-2">
<p><a href="https://gist.github.com/luncliff/6e2d4eb7ca29a0afd5b592f72b80cb5c">luncliff cmake tutorial</a></p>
</li>
</ul>
<h3 id="CMake-Variables">CMake Variables</h3>
<h4 id="CMAKE-MODULE-PATH">CMAKE_MODULE_PATH</h4>
<p><code>CMAKE_MODULE_PATH</code> 是以分号分隔的列表，供 <code>include()</code> 或 <code>find_package()</code> 使用。初始为空，由用户设定。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/variable/CMAKE_MODULE_PATH.html">https://cmake.org/cmake/help/latest/variable/CMAKE_MODULE_PATH.html</a></p>
</li>
</ul>
<h4 id="CMAKE-PREFIX-PATH">CMAKE_PREFIX_PATH</h4>
<p><code>CMAKE_PREFIX_PATH</code> 是以分号分隔的列表，供 <code>find_package()</code>, <code>find_program()</code>, <code>find_library()</code>, <code>find_file()</code> 和 <code>find_path()</code> 使用，初始为空，由用户设定.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html">https://cmake.org/cmake/help/latest/variable/CMAKE_PREFIX_PATH.html</a></p>
</li>
</ul>
<h4 id="Platform-Specific">Platform Specific</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>osx: MACOS, APPLE</p>
</li>
<li class="lvl-2">
<p>windows: WIN32</p>
</li>
<li class="lvl-2">
<p>linux: LINUX, UNIX AND NOT APPLE</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/393316878">https://zhuanlan.zhihu.com/p/393316878</a></p>
</li>
</ul>
<h3 id="CMake-Configuration">CMake Configuration</h3>
<p>CMake 配置区分可分为单配置类型生成器和多配置类型生成器</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>单配置类型： <a href="https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#makefile-generators"><code>Makefile Generators</code></a>和 <a href="https://cmake.org/cmake/help/latest/generator/Ninja.html#generator:Ninja"><code>Ninja</code></a></p>
</li>
<li class="lvl-2">
<p>多配置类型：<a href="https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#visual-studio-generators"><code>Visual Studio</code></a>, <a href="https://cmake.org/cmake/help/latest/generator/Xcode.html#generator:Xcode"><code>Xcode</code></a>, or <a href="https://cmake.org/cmake/help/latest/generator/Ninja%20Multi-Config.html#generator:Ninja%20Multi-Config"><code>Ninja Multi-Config</code></a></p>
</li>
</ul>
<h4 id="配置内置变量说明">配置内置变量说明</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html#variable:CMAKE_BUILD_TYPE">CMAKE_BUILD_TYPE</a>，指定配置生成器的构建类型。</p>
</li>
</ul>
<p>这静态指定将在此构建树中构建的构建类型（配置）。可能的值为空、 <code>Debug</code> 、 <code>Release</code> 、 <code>RelWithDebInfo</code> 、 <code>MinSizeRel</code> ，<code>...</code> 这个变量只对单配置生成器（例如 <code>Makefile Generators</code> 和 <code>Ninja</code> ）有意义，即那些在 CMake 运行以生成构建树时选择单个配置的生成器与在生成的构建环境中提供构建配置选择的多配置生成器相反。有许多 <code>per-config</code> 属性和变量（通常遵循干净的 <code>SOME_VAR_&lt;CONFIG&gt;</code> 命令约定），例如 <code>CMAKE_C_FLAGS_&lt;CONFIG&gt;</code> ，指定为大写： <code>CMAKE_C_FLAGS_[DEBUG|Release|RELWITHDEBINFO|MINSIZEREL|...]</code> 。例如，在配置为构建类型 <code>Debug</code> 的构建树中，CMake 将看到将 <code>CMAKE_C_FLAGS_DEBUG</code> 设置添加到 <code>CMAKE_C_FLAGS</code> 设置中。另见 <code>CMAKE_CONFIGURATION_TYPES</code> 。</p>
<p>请注意，配置名称不区分大小写。此变量的值将与调用 CMake 时指定的值相同。例如，如果 <code>-DCMAKE_BUILD_TYPE=Release</code> 被指定，则该值 <code>CMAKE_BUILD_TYPE</code> 将 <code>Release</code> 。该变量配置类型总是存在。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/variable/CMAKE_CONFIGURATION_TYPES.html#variable:CMAKE_CONFIGURATION_TYPES">CMAKE_CONFIGURATION_TYPES</a>，指定多配置生成的构建类型。</p>
</li>
</ul>
<p>该类型在单配置类型是总是为空。否则，按照生成器默认的类型生成 <code>Debug</code> 、 <code>Release</code> 、 <code>RelWithDebInfo</code> 、 <code>MinSizeRel</code> 等类型。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/prop_gbl/GENERATOR_IS_MULTI_CONFIG.html">GENERATOR_IS_MULTI_CONFIG</a>，获取当前是否是多配置类型。使用示例:</p>
</li>
</ul>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># multi config setting</span></span><br><span class="line"><span class="keyword">get_property</span>(GENERATOR_IS_MULTI_CONFIG GLOBAL</span><br><span class="line">            PROPERTY GENERATOR_IS_MULTI_CONFIG)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"GENERATOR_IS_MULTI_CONFIG ${GENERATOR_IS_MULTI_CONFIG}"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"CMAKE_CONFIGURATION_TYPES ${CMAKE_CONFIGURATION_TYPES}"</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE}"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">${GENERATOR_IS_MULTI_CONFIG}</span>)</span><br><span class="line">  <span class="keyword">set</span>(multi_config_path</span><br><span class="line">      <span class="string">"${CMAKE_BUILD_TYPE}"</span></span><br><span class="line">      CACHE <span class="keyword">STRING</span> <span class="string">"Multi Config Path"</span> FORCE)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="comment"># write a json file indicating the multi config mode</span></span><br><span class="line"><span class="keyword">file</span>(</span><br><span class="line">WRITE <span class="variable">${CMAKE_BINARY_DIR}</span>/multi_config.json</span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">    \"multi_config\": ${GENERATOR_IS_MULTI_CONFIG}</span></span><br><span class="line"><span class="string">}"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="CMakePresets">CMakePresets</h3>
<p>用于 CMake 通用的 configure、build、test 等配置步骤。</p>
<h4 id="CMakePresets-模板">CMakePresets 模板</h4>
<p>确保环境</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>cmake &gt;=3.20</p>
</li>
<li class="lvl-2">
<p>Visual Studio 环境</p>
<ul class="lvl-2">
<li class="lvl-4"><code>C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\</code></li>
<li class="lvl-4"><code>C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64</code></li>
<li class="lvl-4"><code>C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\bin</code></li>
</ul>
</li>
<li class="lvl-2">
<p>Linux 环境</p>
<ul class="lvl-2">
<li class="lvl-4">g++</li>
<li class="lvl-4">clang++</li>
</ul>
</li>
</ul>
<h5 id="模板一">模板一</h5>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"configurePresets"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"common-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"binaryDir"</span><span class="punctuation">:</span> <span class="string">"${sourceDir}/out/build/${presetName}"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"installDir"</span><span class="punctuation">:</span> <span class="string">"${sourceDir}/out/install/${presetName}"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"common-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"generator"</span><span class="punctuation">:</span> <span class="string">"Ninja"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"condition"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"equals"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"lhs"</span><span class="punctuation">:</span> <span class="string">"${hostSystemName}"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"rhs"</span><span class="punctuation">:</span> <span class="string">"Linux"</span></span><br><span class="line">            <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"architecture"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"strategy"</span><span class="punctuation">:</span> <span class="string">"external"</span></span><br><span class="line">            <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_C_COMPILER"</span><span class="punctuation">:</span> <span class="string">"gcc"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"CMAKE_CXX_COMPILER"</span><span class="punctuation">:</span> <span class="string">"g++"</span></span><br><span class="line">            <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"vendor"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"microsoft.com/VisualStudioSettings/CMake/1.0"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                    <span class="attr">"hostOS"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">"Linux"</span></span><br><span class="line">                    <span class="punctuation">]</span></span><br><span class="line">                <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"microsoft.com/VisualStudioRemoteSettings/CMake/1.0"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                    <span class="attr">"sourceDir"</span><span class="punctuation">:</span> <span class="string">"$env{HOME}/.vs/$ms{projectDirName}"</span></span><br><span class="line">                <span class="punctuation">}</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-debug"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 Debug"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-Release"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 Release"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Release"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-asan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=address"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Address"</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-tsan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=thread"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Thread"</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-lsan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=leak"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Leak"</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-ubsan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=undefined"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Undefined"</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"windows-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"common-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"generator"</span><span class="punctuation">:</span> <span class="string">"Ninja"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_C_COMPILER"</span><span class="punctuation">:</span> <span class="string">"cl"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"CMAKE_CXX_COMPILER"</span><span class="punctuation">:</span> <span class="string">"cl"</span></span><br><span class="line">            <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"architecture"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"strategy"</span><span class="punctuation">:</span> <span class="string">"external"</span></span><br><span class="line">            <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"toolset"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"host=x64"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"strategy"</span><span class="punctuation">:</span> <span class="string">"external"</span></span><br><span class="line">            <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"condition"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"equals"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"lhs"</span><span class="punctuation">:</span> <span class="string">"${hostSystemName}"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"rhs"</span><span class="punctuation">:</span> <span class="string">"Windows"</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"windows-x64-debug"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"windows-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 Debug"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"windows-x64-Release"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"windows-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 Release"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Release"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"windows-x64-asan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"windows-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=address"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Address"</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"testPresets"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"common-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"Basic shared test settings"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"execution"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"noTestsAction"</span><span class="punctuation">:</span> <span class="string">"error"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"stopOnFailure"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"output"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"outputOnFailure"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"common-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"windows-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"common-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-debug"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 Debug"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"linux-x64-debug"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-Release"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 Release"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"linux-x64-Release"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-asan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=address"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"linux-x64-asan"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-tsan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=thread"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"linux-x64-tsan"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-lsan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=leak"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"linux-x64-lsan"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"linux-x64-ubsan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"linux-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=undefined"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"linux-x64-ubsan"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"windows-x64-debug"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"windows-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 Debug"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"windows-x64-debug"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"windows-x64-Release"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"windows-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 Release"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"windows-x64-Release"</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"windows-x64-asan"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"windows-base"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"x64 sanitize=address"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"windows-x64-asan"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="模板二">模板二</h5>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"version"</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"configurePresets"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"base"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"Basic Config"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"Basic build using Ninja generator"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// The generator is always ninja because of cross-platform performance</span></span><br><span class="line">      <span class="attr">"generator"</span><span class="punctuation">:</span> <span class="string">"Ninja"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// It enables hidden when presets present</span></span><br><span class="line">      <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"binaryDir"</span><span class="punctuation">:</span> <span class="string">"${sourceDir}/out/build/${presetName}"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"installDir"</span><span class="punctuation">:</span> <span class="string">"${sourceDir}/out/install/${presetName}"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="comment">// x64 architecture conf</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"architecture"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"strategy"</span><span class="punctuation">:</span> <span class="string">"external"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x86"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"architecture"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"x86"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"strategy"</span><span class="punctuation">:</span> <span class="string">"external"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="comment">// Debug conf</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// Custom definition variable</span></span><br><span class="line">        <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"Release"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"RelWithDebInfo"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"MSVC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// MSVC compiler</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"CMAKE_C_COMPILER"</span><span class="punctuation">:</span> <span class="string">"cl"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"CMAKE_CXX_COMPILER"</span><span class="punctuation">:</span> <span class="string">"cl"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// MSVC toolset conf</span></span><br><span class="line">      <span class="attr">"toolset"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"host=x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"strategy"</span><span class="punctuation">:</span> <span class="string">"external"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"condition"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"equals"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"lhs"</span><span class="punctuation">:</span> <span class="string">"${hostSystemName}"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"rhs"</span><span class="punctuation">:</span> <span class="string">"Windows"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"Clang"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"CMAKE_C_COMPILER"</span><span class="punctuation">:</span> <span class="string">"clang"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"CMAKE_CXX_COMPILER"</span><span class="punctuation">:</span> <span class="string">"clang++"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"condition"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"equals"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"lhs"</span><span class="punctuation">:</span> <span class="string">"${hostSystemName}"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"rhs"</span><span class="punctuation">:</span> <span class="string">"Linux"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"toolset"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"host=x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"strategy"</span><span class="punctuation">:</span> <span class="string">"external"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"GNUC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"hidden"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"CMAKE_C_COMPILER"</span><span class="punctuation">:</span> <span class="string">"gcc"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"CMAKE_CXX_COMPILER"</span><span class="punctuation">:</span> <span class="string">"g++"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"condition"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"equals"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"lhs"</span><span class="punctuation">:</span> <span class="string">"${hostSystemName}"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"rhs"</span><span class="punctuation">:</span> <span class="string">"Linux"</span></span><br><span class="line">      <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"toolset"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"value"</span><span class="punctuation">:</span> <span class="string">"host=x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"strategy"</span><span class="punctuation">:</span> <span class="string">"external"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-MSVC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"MSVC for x64 (Debug)"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"base"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"MSVC"</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Release-MSVC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"MSVC for x64 (Release)"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"base"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"Release"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"MSVC"</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-Clang"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"Clang/LLVM for x64 (Debug)"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"base"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"Clang"</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Release-Clang"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"Clang/LLVM for x64 (Release)"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"base"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"Release"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"Clang"</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"GNUC for x64 (Debug)"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"base"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"GNUC"</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Release-GNUC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"GNUC for x64 (Release)"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"base"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"x64"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"Release"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">"GNUC"</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-MSVC-asan"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-MSVC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-MSVC with /fsanitize=address"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Address"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC-asan"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Address"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC-tsan"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Thread"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC-lsan"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Leak"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC-ubsan"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"inherits"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"USE_SANITIZER"</span><span class="punctuation">:</span> <span class="string">"Undefined"</span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"testPresets"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-MSVC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-MSVC"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Release-MSVC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"x64-Release-MSVC"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-Clang"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-Clang"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Release-Clang"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"x64-Release-Clang"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-GNUC"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Release-GNUC"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"x64-Release-GNUC"</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-MSVC-asan"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"x64-Debug-MSVC-asan"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h5 id="模板三">模板三</h5>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"cmakeMinimumRequired"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"major"</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"minor"</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"patch"</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"configurePresets"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"default"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"displayName"</span><span class="punctuation">:</span> <span class="string">"Default Config"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"binaryDir"</span><span class="punctuation">:</span> <span class="string">"${sourceDir}/build"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"toolchainFile"</span><span class="punctuation">:</span> <span class="string">"$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cacheVariables"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"CMAKE_BUILD_TYPE"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"VCPKG_OVERLAY_PORTS"</span><span class="punctuation">:</span> <span class="string">"${sourceDir}/deps"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"CMAKE_INSTALL_PREFIX"</span><span class="punctuation">:</span> <span class="string">"out"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"ASIO_GRPC_BUILD_TESTS"</span><span class="punctuation">:</span> <span class="string">"TRUE"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"ASIO_GRPC_DISCOVER_TESTS"</span><span class="punctuation">:</span> <span class="string">"TRUE"</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"buildPresets"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"default"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"default"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configuration"</span><span class="punctuation">:</span> <span class="string">"Debug"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"testPresets"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"default"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configurePreset"</span><span class="punctuation">:</span> <span class="string">"default"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"configuration"</span><span class="punctuation">:</span> <span class="string">"Debug"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"output"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"outputOnFailure"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"execution"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">                <span class="attr">"noTestsAction"</span><span class="punctuation">:</span> <span class="string">"error"</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"timeout"</span><span class="punctuation">:</span> <span class="number">180</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">"jobs"</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">            <span class="punctuation">}</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="CMake-Regex">CMake Regex</h3>
<h4 id="规则约束">规则约束</h4>
<p>在 CMake 中，可以在几个上下文中使用正则表达式，例如 <code>string(REGEX MATCH)</code> 命令和 <code>ctest</code> 命令的 <code>-R</code> 选项。与 Ruby 或 Perl 等相比，该正则表达式具有低功能，例如，字母数字和下划线 <code>_</code> 中所述修改相应参数的值。此外，也不能使用表示重复的 <code>{n}</code> 等。<a href="https://cmake.org/cmake/help/latest/command/string.html">可以使用的元字符如下</a>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>开头 <code>^</code></p>
</li>
<li class="lvl-2">
<p>末尾 <code>$</code></p>
</li>
<li class="lvl-2">
<p>任意字符 <code>.</code></p>
</li>
<li class="lvl-2">
<p>匹配中列出的字符 <code>[]</code> 及其范围 <code>-</code></p>
</li>
<li class="lvl-2">
<p>非匹配列出的字符 <code>[^]</code></p>
</li>
<li class="lvl-2">
<p>重复 0 次以上 <code>*</code></p>
</li>
<li class="lvl-2">
<p>一次或多次重复 <code>+</code></p>
</li>
<li class="lvl-2">
<p>0 次，或者 1 次 <code>?</code></p>
</li>
<li class="lvl-2">
<p>指定的模式之一 <code>|</code></p>
</li>
<li class="lvl-2">
<p>分组 <code>()</code></p>
</li>
</ul>
<h4 id="CMAKE-MATCH-n"><code>CMAKE_MATCH_&lt;n&gt;</code></h4>
<p>为组 0 到 9 捕获由最后一个正则表达式匹配的组 <code>&lt;n&gt;</code> 。组 0 是整个匹配项。组 1 到 9 是 <code>()</code> 语法捕获的子表达式。</p>
<p>当使用正则表达式匹配时，CMake 将匹配内容填充到 <a href="https://cmake.org/cmake/help/latest/variable/CMAKE_MATCH_n.html"><code>CMAKE_MATCH_&lt;n&gt;</code></a> 变量中。匹配时， <a href="https://cmake.org/cmake/help/latest/variable/CMAKE_MATCH_COUNT.html#variable:CMAKE_MATCH_COUNT"><code>CMAKE_MATCH_COUNT</code></a> 变量保存匹配表达式的数量。</p>
<h4 id="正则常用场景">正则常用场景</h4>
<p>可以在以下位置使用正则表达式</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/string.html">https://cmake.org/cmake/help/latest/command/string.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://qiita.com/mrk_21/items/4bb58f64a82e73c42cb3">CMake: 正規表現</a></p>
</li>
</ul>
<h5 id="命令">命令</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/string.html">string(REGEX MATCH)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/string.html">string(REGEX MATCHALL)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/string.html">string(REGEX REPLACE)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/file.html">file(STRINGS)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/if.html">if(MATCHES)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/install.html">install(DIRECTORY)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/source_group.html">source_group()</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/include_regular_expression.html">include_regular_expression()</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/ctest_test.html">ctest_test()</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/command/ctest_memcheck.html">ctest_memcheck()</a></p>
</li>
</ul>
<p>显示读取 pyproject.toml 版本号</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># unless specified version, read the file pyproject.toml version information</span></span><br><span class="line"><span class="keyword">if</span>(PROJECT_VERSION)</span><br><span class="line">  <span class="keyword">message</span>(STATUS <span class="string">"explicit the version ${PROJECT_VERSION}"</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">  <span class="keyword">file</span>(</span><br><span class="line">    STRINGS <span class="string">"${CMAKE_SOURCE_DIR}/pyproject.toml"</span> ver_read</span><br><span class="line">    ENCODING <span class="string">"UTF-8"</span></span><br><span class="line">    REGEX [[^version = <span class="string">"(.+)"</span>]])</span><br><span class="line">  <span class="keyword">string</span>(REGEX MATCH [[^version = <span class="string">"([^-]+)-?(.+)?"</span>]] matches_out <span class="string">"${ver_read}"</span>)</span><br><span class="line">  <span class="keyword">message</span>(</span><br><span class="line">    STATUS</span><br><span class="line">      <span class="string">"Read the project version ${CMAKE_MATCH_0} from the file pyproject.toml ${ver_read}"</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">if</span>(<span class="string">"${CMAKE_MATCH_1}"</span> <span class="keyword">STREQUAL</span> <span class="string">""</span>)</span><br><span class="line">    <span class="keyword">message</span>(FATAL_ERROR <span class="string">"we need a version specified."</span>)</span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line">  <span class="keyword">set</span>(CMAKE_PROJECT_VERSION <span class="variable">${CMAKE_MATCH_1}</span>)</span><br><span class="line">  <span class="keyword">if</span>(CMAKE_MATCH_2)</span><br><span class="line">    <span class="keyword">set</span>(VERSION_SUFFIX <span class="variable">${CMAKE_MATCH_2}</span>)</span><br><span class="line">    <span class="keyword">message</span>(STATUS <span class="string">"VERSION_SUFFIX:${VERSION_SUFFIX}"</span>)</span><br><span class="line">  <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></tbody></table></figure>
<h5 id="变量">变量</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/variable/CMAKE_LIBRARY_ARCHITECTURE_REGEX.html">CMAKE_LIBRARY_ARCHITECTURE_REGEX</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/prop_dir/INCLUDE_REGULAR_EXPRESSION.html">INCLUDE_REGULAR_EXPRESSION</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/prop_test/FAIL_REGULAR_EXPRESSION.html">FAIL_REGULAR_EXPRESSION</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/prop_test/PASS_REGULAR_EXPRESSION.html">PASS_REGULAR_EXPRESSION</a></p>
</li>
</ul>
<h5 id="模块">模块</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/module/ExternalData.html">ExtenalData</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/module/CMakeGraphVizOptions.html">CMakeGraphVizOptions</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/module/CPack.html">CPack</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/module/CheckCSourceCompiles.html">CheckCSourceCompiles</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/module/CheckCXXSourceCompiles.html">CheckCxxSourceCompiles</a></p>
</li>
</ul>
<h5 id="命令行">命令行</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p>ctest -L/-R/-E/-LE</p>
</li>
</ul>
<h3 id="CMake-Project">CMake Project</h3>
<h4 id="cmake-init">cmake-init</h4>
<p><a href="https://github.com/friendlyanon/cmake-init">cmake-init</a> 专用于初始化基于 CMake 构建的项目。只需要简单的运行命令 <code>cmake-init &lt;project-name&gt;</code>, 即可根据提示初始化不同的构建方案.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install cmake-init</span><br></pre></td></tr></tbody></table></figure>
<h3 id="CMake-Vscode-Integration">CMake Vscode Integration</h3>
<h4 id="Vscode-CMake-Tools">Vscode CMake Tools</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/microsoft/vscode-cmake-tools/blob/main/docs/debug-launch.md">https://github.com/microsoft/vscode-cmake-tools/blob/main/docs/debug-launch.md</a></p>
</li>
</ul>
<h3 id="CMake-Tips">CMake Tips</h3>
<p>这里总结了一下 CMake 实际项目中应用的技巧。</p>
<h4 id="集成-C-C-threads">集成 C/C++ threads</h4>
<p>CMAKE 中提供了单独的 threads 模块集成方式，这里是示例 <a href="https://godbolt.org/z/46nrYGhsc">threads</a> 利用了 C API pthread 实现 RAII 锁。</p>
<blockquote>
<p>[!CAUTION]<br>
<a href="https://zhuanlan.zhihu.com/p/128519905">using std::thread in a library loaded with dlopen leads to a sigsev</a></p>
</blockquote>
<h4 id="构建结果输出到统一路径">构建结果输出到统一路径</h4>
<p>配置将在构建生成的 Runtime，Libraries，archives 都生成到对应的 binary 目录，而不是对应源码位置的子目录下。</p>
<blockquote>
<p>[!TIP]<br>
将构建生产构件都输出当对应的目录，有利于测试如 Gtest，否则对应得测试会生成到相应得同名目录下，造成.exe 或 elf 找不到依赖库等 crash 。</p>
</blockquote>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># GNU install standard dirs</span></span><br><span class="line"><span class="keyword">include</span>(GNUInstallDirs)</span><br><span class="line"><span class="comment"># Configure uniform output directory for Runtime,Libraries,archives</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="variable">${CMAKE_BINARY_DIR}</span>/<span class="variable">${CMAKE_INSTALL_LIBDIR}</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="variable">${CMAKE_BINARY_DIR}</span>/<span class="variable">${CMAKE_INSTALL_LIBDIR}</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="variable">${CMAKE_BINARY_DIR}</span>/<span class="variable">${CMAKE_INSTALL_BINDIR}</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="配置-DEBUG-宏">配置 _DEBUG 宏</h4>
<p>通常 Windows 下调试时会配置 _DEBUG 宏，但在 Linux 下需要手动增加配置。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Debug configuration</span></span><br><span class="line"><span class="keyword">if</span>(CMAKE_BUILD_TYPE <span class="keyword">STREQUAL</span> Debug)</span><br><span class="line">  <span class="keyword">add_definitions</span>(-D_DEBUG)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></tbody></table></figure>
<h4 id="追加-CMake-脚本路径">追加 CMake 脚本路径</h4>
<p>通常会将工程的 cmake 脚本放到一个 cmake 的目录，然后统一在 CMAKE_MODULE_PATH 中导入，方便后续调用相应模块。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># CMake module tools import custom cmake modules</span></span><br><span class="line"><span class="keyword">list</span>(APPEND CMAKE_MODULE_PATH <span class="string">"${CMAKE_CURRENT_SOURCE_DIR}/cmake"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="CMake-中注释">CMake 中注释</h4>
<p><code>#[[</code>注释可以跨越多行，并且不会被编译器解释为代码。</p>
<blockquote>
<p>[!CAUTION]<br>
多行注释不会被 cmake-format 格式化。</p>
</blockquote>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#[[ This is</span></span><br><span class="line"><span class="comment">  a multi-line</span></span><br><span class="line"><span class="comment">  comment ]]</span></span><br><span class="line"><span class="comment"># This is a single-line comment</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#[=======================================================================[.rst:</span></span><br><span class="line">Title</span><br><span class="line">-----</span><br><span class="line"></span><br><span class="line">The first line takes up <span class="number">80</span> spaces with rst style syntax declaration.The last line takes up <span class="number">75</span> spaces.</span><br><span class="line"></span><br><span class="line">Variables</span><br><span class="line">^^^^^^^^^</span><br><span class="line"></span><br><span class="line"><span class="comment">#]=======================================================================]</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="将选项通过目标链接">将选项通过目标链接</h4>
<p>其它目标依赖通过将编译或链接选项生成一个 INTERFACE 目标，进而传递该目标包含的各种配置选项。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Add a common compile setting interface</span></span><br><span class="line"><span class="keyword">add_library</span>(common-compile-settings INTERFACE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_compile_features</span>(common-compile-settings INTERFACE cxx_std_11)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_compile_options</span>(common-compile-settings INTERFACE</span><br><span class="line">  <span class="comment"># clang-like or GNU flags</span></span><br><span class="line">  $&lt;$&lt;<span class="keyword">OR</span>:$&lt;CXX_COMPILER_ID:Clang&gt;,$&lt;CXX_COMPILER_ID:AppleClang&gt;,$&lt;CXX_COMPILER_ID:GNU&gt;&gt;:</span><br><span class="line">    -Wall -Wextra -Wno-unused-parameter -Wno-type-limits -Werror&gt;</span><br><span class="line">  <span class="comment"># msvc flags</span></span><br><span class="line">  $&lt;$&lt;CXX_COMPILER_ID:MSVC&gt;:/W0 /D_WIN32_WINNT=<span class="number">0</span>x0A00 /EHsc&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the interface with PRIVATE link mode so that the settings would</span></span><br><span class="line"><span class="comment"># not be propergated to a target depending on the target other_tgt</span></span><br><span class="line"><span class="keyword">add_library</span>(other_tgt</span><br><span class="line">    src/some.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">target_link_libraries</span>(</span><br><span class="line">    other_tgt</span><br><span class="line">    PRIVATE</span><br><span class="line">        common-compile-settings</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="搜索文件">搜索文件</h4>
<p>方式一: <a href="https://cmake.org/cmake/help/latest/command/file.html"><code>file(GLOB_RECURSE ...)</code></a> 搜索文件的方式可以方便地获取指定目录下的所有文件，包括子目录中的文件。然而，这种方式并不推荐在大型项目中使用，因为它会导致以下问题：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>性能问题：由于搜索整个目录树，因此会导致性能问题，特别是在大型项目中。</p>
</li>
<li class="lvl-2">
<p>不稳定性：由于该命令依赖于文件系统，因此可能会受到文件系统的限制，例如文件名长度限制。</p>
</li>
<li class="lvl-2">
<p>可读性问题：使用该命令可能会使 CMakeLists.txt 文件变得难以阅读和维护。</p>
</li>
</ul>
<p>因此，对于大型项目，建议手动列出所有源文件，以便更好地控制构建过程。如果仍然想使用该命令，请确保的项目规模较小，并且已经测试了该命令的性能和稳定性。</p>
<p>方式二：<a href="https://cmake.org/cmake/help/latest/command/aux_source_directory.html"><code>aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</code></a> 是一个旧的 CMake 命令，用于将指定目录中的所有源文件添加到一个变量中。然而，这个命令已经被弃用了，因为它不能正确地处理源文件的依赖关系。相反，应该使用 <code>file(GLOB_RECURSE ...)</code> 命令来获取源文件列表，然后将它们添加到目标中。</p>
<h4 id="导出符号">导出符号</h4>
<p>控制 cpp 符号导出在动态或插件链接库是非常必要的步骤，在 windows 中符号默认都不导出，linux 中默认都导出。</p>
<p>通常为了跨平台实现编译链接，需要使用针对性处理。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#  only export all symbols on windows but no static symbols</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(Tgt PROPERTIES</span><br><span class="line">    WINDOWS_EXPORT_ALL_SYMBOLS <span class="keyword">ON</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.kitware.com/cmake/community/-/wikis/doc/tutorials/BuildingWinDLL">https://gitlab.kitware.com/cmake/community/-/wikis/doc/tutorials/BuildingWinDLL</a></p>
</li>
</ul>
<h4 id="禁用-CMakeLists-txt-路径构建">禁用 CMakeLists.txt 路径构建</h4>
<p>对构建目录存在 CMakeLists.txt 脚本目录的情况报错，其目的是强制将构建缓存和构建脚本分离。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Error if building out of a build directory</span></span><br><span class="line"><span class="keyword">file</span>(TO_CMAKE_PATH <span class="string">"${PROJECT_BINARY_DIR}/CMakeLists.txt"</span> LOC_PATH)</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">EXISTS</span> <span class="string">"${LOC_PATH}"</span>)</span><br><span class="line">  <span class="keyword">message</span>(</span><br><span class="line">    FATAL_ERROR</span><br><span class="line">      <span class="string">"You cannot build in a source directory (or any directory with "</span></span><br><span class="line">      <span class="string">"CMakeLists.txt file). Please make a build subdirectory. Feel free to "</span></span><br><span class="line">      <span class="string">"remove CMakeCache.txt and CMakeFiles."</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></tbody></table></figure>
<h4 id="符号可见性">符号可见性</h4>
<p>CMake 中 <a href="https://www.youtube.com/watch?v=m0DwB4OvDXk">Visibility Control</a> 标准的库符号导出，需要严格控制。windows 下默认不导出，linux 默认全导出。这里通过 CMake 控制符号导出能减小这部分工作量。</p>
<p>通常尽可能预设将所有符号隐藏，然后使用 generate_export_header 生成符号导出修饰前缀。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_CXX_VISIBILITY_PRESET hidden)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_VISIBILITY_INLINES_HIDDEN YES)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_library</span>(MyTgt ...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成合适的 mytgt_export.h</span></span><br><span class="line"><span class="comment"># 确保 MyTgt_EXPORT 定义</span></span><br><span class="line"><span class="comment"># 添加符号导出宏 MyTgt_EXPORT 添加到目标 MyTgt</span></span><br><span class="line"><span class="keyword">include</span>(GenerateExportHeader)</span><br><span class="line">generate_export_header(MyTgt)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="库版本控制">库版本控制</h4>
<p>对于动态库，需要做 Library Version 时，CMake 也提供了工具。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(Example ...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libExample.so -&gt; libExample.so.2.4.7 NAME LINK</span></span><br><span class="line"><span class="comment"># libExample.so.2 -&gt; libExample.so.2.4.7 SONAME</span></span><br><span class="line"><span class="comment"># libExample.so.2.4.7 REAL LIBRARY</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(</span><br><span class="line">    Example PROPERTIES</span><br><span class="line">        SOVERSION <span class="number">2</span></span><br><span class="line">        VERSION <span class="number">2.4</span>.<span class="number">7</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!WARNING]<br>
如果缺失 SOVERSION，如果 Example 只做了一个简单的内部修改，然后增加了 patch 为 2.4.8，对于依赖于 Example 的 2.4.7 版本的项目来说，简单更新 Example 库就不再合适，而是需要重新编译链接指向 2.4.8，但这实际上是不必要的。所以都建议加上 <strong>SOVERSION</strong>。</p>
</blockquote>
<p>包版本控制，需要导出版本 cmake 脚本。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># require AConfig.cmake AConfigVersion.cmake</span></span><br><span class="line"><span class="keyword">find_package</span>(A <span class="number">2.3</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>使用工具自动生成</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(CMakePackageConfigHelpers)</span><br><span class="line">write_basic_package_version_file(</span><br><span class="line">    AConfigVersion.cmake</span><br><span class="line">    VERSION <span class="number">2.4</span>.<span class="number">7</span></span><br><span class="line">    COMPATIBILITY SameMajorVersion</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/qq295109601/article/details/118063009">windows 及 linux 下库版本控制</a></p>
</li>
</ul>
<h4 id="打包库">打包库</h4>
<p>配置安装规则 (Installing Rules)。安装规则包括安装运行库、头文件、文档等等，以下是不断对安装规则不断改进的过程。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html">https://cmake.org/cmake/help/latest/guide/importing-exporting/index.html</a></p>
</li>
</ul>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Version 1: 只是安装对应工件</span></span><br><span class="line"><span class="keyword">include</span>(GNUInstallDis) <span class="comment"># GNU dir-installed layout</span></span><br><span class="line"><span class="keyword">install</span>(TARGETS Example</span><br><span class="line">    RUNTIME DESTINATION <span class="variable">${CMAKE_INSTALL_BINDIR}</span></span><br><span class="line">    LIBRARY DESTINATION <span class="variable">${CMAKE_INSTALL_LIBDIR}</span></span><br><span class="line">    ARCHIVE DESTINATION <span class="variable">${CMAKE_INSTALL_LIBDIR}</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># CMake &gt;=3.14 same as [[install(TARGETS Example)]] as the above</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Version 2:通常安装包会区分运行库（Runtime）和开发库（Development）</span></span><br><span class="line"><span class="keyword">install</span>(TARGETS Example</span><br><span class="line">    RUNTIME DESTINATION <span class="variable">${CMAKE_INSTALL_BINDIR}</span></span><br><span class="line">        COMPONENT Runtime</span><br><span class="line">    LIBRARY DESTINATION <span class="variable">${CMAKE_INSTALL_LIBDIR}</span></span><br><span class="line">        COMPONENT Runtime</span><br><span class="line">        NAMELINK_COMPONENT Development <span class="comment"># CMake &gt;= 3.12</span></span><br><span class="line">    ARCHIVE DESTINATION <span class="variable">${CMAKE_INSTALL_LIBDIR}</span></span><br><span class="line">        COMPONENT Development</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Version 3: 通常加上 SomeProj_ 前缀避免安装规则被其它项目通过 add_subdirctory 的集成的安装规则干扰</span></span><br><span class="line"><span class="keyword">install</span>(TARGETS Example</span><br><span class="line">    RUNTIME DESTINATION <span class="variable">${CMAKE_INSTALL_BINDIR}</span></span><br><span class="line">        COMPONENT SomeProj_Runtime</span><br><span class="line">    LIBRARY DESTINATION <span class="variable">${CMAKE_INSTALL_LIBDIR}</span></span><br><span class="line">        COMPONENT SomeProj_Runtime</span><br><span class="line">        NAMELINK_COMPONENT SomeProj_Development</span><br><span class="line">    ARCHIVE DESTINATION <span class="variable">${CMAKE_INSTALL_LIBDIR}</span></span><br><span class="line">        COMPONENT SomeProj_Development</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure>
<p>构建库及依赖的 RPATH，通常需要小心设置。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Build and Test, CMake 会将 RPATH 给到库及相关执行程序。</p>
</li>
<li class="lvl-2">
<p>Package and Install, CMake 将 <strong>RPATH</strong> 替换为<strong>空</strong>。</p>
</li>
<li class="lvl-2">
<p>Run and Failed, 缺少 RPATH，通常由 DT_RPATH 及 DT_RUNPATH 确定，如果两者都存在，则前者被丢弃。LD_LIBRARY_PATH 在 DT_RPATH 之后评估，DT_RUNPATH 在 LD_LIBRARY_PATH 之后评估。优先级顺序为 <strong>DT_RPATH -&gt; LD_LIBRARY_PATH -&gt; DT_RUNPATH</strong>。</p>
</li>
</ul>
<blockquote>
<p>[!CAUTION]<br>
配置 SO 动态库搜索规则，当使用 <code>-Wl,-rpath,path/to/so/location,--disable-new-dtags</code> 时为 DT_RPATH 配置，当使用 <code>-Wl,-rpath,path/to/so/location,--enable-new-dtags</code> 时为 DT_RUNPATH 配置（gcc-7 已设置默认打开配置）。DT_RPATH 搜索到后，就不会再考虑 LD_LIBRARY_PATH，所以也推荐配置 DT_RUNPATH。</p>
</blockquote>
<p>综上，动态库的搜索路径优先级是：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>DT_RPATH</p>
</li>
<li class="lvl-2">
<p>LD_LIBRARY_PATH</p>
</li>
<li class="lvl-2">
<p>DT_RUNPATH</p>
</li>
</ul>
<p>从历史的角度来说，一开始是只有 DT_RPATH 的，问题是 DT_RPATH 在编译时一旦设了就不能靠 LD_LIBRARY_PATH 来自定义加载的路径了，每次要测不同的库的时候（放的位置可能不同）就得重新 build 可执行文件，这样很烦。因此才引入了 DT_RUNPATH ，编译后在运行时还可以用 LD_LIBRARY_PATH 来覆盖掉，这样就不用每次重新编译了，只需要 NEEDED 里的 Value 一致即可。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Simple rpath configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># on Apple are there different keyword @loader_path</span></span><br><span class="line"><span class="comment">#     check env variables first</span></span><br><span class="line"><span class="comment">#   recursive searching like DT_RPATH</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">NOT</span> APPLE)</span><br><span class="line"> <span class="comment"># $ORIGIN means the location of the binary requiring the dependency</span></span><br><span class="line"> <span class="keyword">set</span>(CMAKE_INSTALL_RPATH $ORIGIN)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">add_library</span>(Example ...)</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!NOTE]<br>
当使用动态链接器（<a href="http://ld.so">ld.so</a>）加载共享库时，<strong>$ORIGIN</strong> 可以用于指定相对于可执行文件的路径的搜索目录。这使得共享库可以相对于可执行文件的位置进行定位，而不是使用绝对路径或者在系统范围内搜索共享库。</p>
<p><strong>@loaderpath(macOS)</strong> 和 <strong>$ORIGIN(Unix)</strong> 都是用于在可执行文件和共享库中指定动态链接器搜索依赖项的路径的特殊字符串，指向包含当前可执行文件或共享库的目录。它们的主要区别在于它们的作用范围和解析方式。</p>
<p>@loaderpath 不能在环境变量中使用。</p>
<p>$ORIGIN 的解析是在运行时进行的，而不是在链接时进行的。这意味着 $ORIGIN 可以用于在不同的环境中运行相同的可执行文件或共享库，而不需要修改它们的路径。例如，如果可执行文件或共享库位于 /path/to/myapp/bin/myapp 中，则 $ORIGIN 将被解析为 /path/to/myapp/bin/，即可执行文件所在的相对路径，无论在哪个目录中运行它。</p>
<p>另见 <a href="https://stackoverflow.com/questions/6329888/difference-between-origin-and-loader-path-environment-variable">stackoverflow</a> 及 <a href="https://www.man7.org/linux/man-pages/man8/ld.so.8.html">ld</a>.</p>
</blockquote>
<p>以下是一个示例，其中使用了 $ORIGIN 变量来加载共享库：</p>
<p>假设有一个可执行文件 /home/user/myapp，<a href="http://xn--libfoo-9m7igl43b30qfrd8t2bm1i310nv0sa9o1a.so">它需要加载一个共享库 libfoo.so</a>，该共享库位于可执行文件所在目录的 lib 子目录中。可以使用以下命令来加载共享库：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/user</span><br><span class="line"><span class="built_in">mkdir</span> lib</span><br><span class="line"><span class="built_in">cp</span> /path/to/libfoo.so lib/</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$ORIGIN</span>/lib</span><br><span class="line">./myapp</span><br></pre></td></tr></tbody></table></figure>
<p>在这个例子中，将共享库复制到可执行文件所在目录的 lib 子目录中，并使用 <strong>$ORIGIN/lib</strong> 来指定共享库的搜索目录。这使得动态链接器可以相对于可执行文件的位置找到共享库。</p>
<p>根据之前的讨论，为 bin executable 配置 rpath 为<strong>当前路径</strong>及 <strong>lib 所在路径</strong>如下：</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#[=======================================================================[.rst:</span></span><br><span class="line">Runpath Configuration</span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line">This scripts setup a runpath properly when use <span class="keyword">add_library</span> to generate</span><br><span class="line">a shared library. The path of shared libraries will be pointed to lib</span><br><span class="line">directory by variable CMAKE_INSTALL_BIN.</span><br><span class="line"></span><br><span class="line"><span class="comment">#]=======================================================================]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># use, i.e. don't skip the full RPATH for the build tree</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_SKIP_BUILD_RPATH <span class="keyword">FALSE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># when building, don't use the install RPATH already (but later on when</span></span><br><span class="line"><span class="comment"># installing)</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_WITH_INSTALL_RPATH <span class="keyword">OFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Prepare RPATH</span></span><br><span class="line"><span class="keyword">file</span>(RELATIVE_PATH _rel <span class="variable">${CMAKE_INSTALL_FULL_BINDIR}</span></span><br><span class="line">     <span class="variable">${CMAKE_INSTALL_FULL_LIBDIR}</span>)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"_rel:${_rel}"</span>)</span><br><span class="line"><span class="keyword">if</span>(APPLE)</span><br><span class="line">  <span class="keyword">set</span>(_rpath <span class="string">"@loader_path/${_rel}"</span>)</span><br><span class="line"><span class="keyword">else</span>()</span><br><span class="line">  <span class="keyword">set</span>(_rpath <span class="string">"$ORIGIN/${_rel}"</span>)</span><br><span class="line"><span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"_rpath:${_rpath}"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add auto dly-load path such as</span></span><br><span class="line"><span class="keyword">list</span>(APPEND CMAKE_INSTALL_RPATH <span class="variable">${_rpath}</span>;$ORIGIN)</span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"CMAKE_INSTALL_RPATH:${CMAKE_INSTALL_RPATH}"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the automatically determined parts of the RPATH which point to directories</span></span><br><span class="line"><span class="comment"># outside the build tree to the install RPATH</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INSTALL_RPATH_USE_LINK_PATH <span class="keyword">TRUE</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>完整的安装规则配置 demo，参考仓库如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/common">triton/common</a></p>
</li>
</ul>
<h4 id="FetchContent">FetchContent</h4>
<p>FetchContent 参考应用示例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/python_backend">triton/python_backend</a></p>
</li>
</ul>
<h4 id="配置库-libConfig-cmake">配置库 libConfig.cmake</h4>
<p>为了为静态库 lib 编写 CMake 配置文件，需要创建一个名为 libConfig.cmake 的文件。在该文件中，可以设置库的导入路径、链接库和其他相关设置。</p>
<p>以下是一个示例 libConfig.cmake 文件的模板，集成使用 include 该模块即可</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 设置lib的导入路径</span></span><br><span class="line"><span class="keyword">set</span>(lib_INCLUDE_DIRS <span class="string">"&lt;path_to_lib_include_directory&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置lib的链接库</span></span><br><span class="line"><span class="keyword">set</span>(lib_LIBRARIES <span class="string">"&lt;path_to_lib_library_file&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出lib的配置</span></span><br><span class="line"><span class="keyword">set</span>(lib_FOUND <span class="keyword">TRUE</span>)</span><br><span class="line"><span class="keyword">set</span>(lib_VERSION_MAJOR &lt;major_version&gt;)</span><br><span class="line"><span class="keyword">set</span>(lib_VERSION_MINOR &lt;minor_version&gt;)</span><br><span class="line"><span class="keyword">set</span>(lib_VERSION_PATCH &lt;patch_version&gt;)</span><br><span class="line"><span class="keyword">set</span>(lib_VERSION <span class="string">"&lt;version_string&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将lib相关的配置信息添加到全局变量中</span></span><br><span class="line"><span class="keyword">set</span>(_IMPORT_PREFIX <span class="string">"&lt;path_to_lib_directory&gt;"</span>)</span><br><span class="line"><span class="keyword">set</span>(_IMPORT_PREFIX_Release <span class="string">"&lt;path_to_lib_directory&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加lib的目标</span></span><br><span class="line"><span class="keyword">add_library</span>(lib INTERFACE IMPORTED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置lib的包含路径和链接库</span></span><br><span class="line"><span class="keyword">set_target_properties</span>(lib PROPERTIES</span><br><span class="line">  INTERFACE_INCLUDE_DIRECTORIES <span class="string">"${lib_INCLUDE_DIRS}"</span></span><br><span class="line">  INTERFACE_LINK_LIBRARIES <span class="string">"${lib_LIBRARIES}"</span></span><br><span class="line">  INTERFACE_COMPILE_DEFINITIONS <span class="string">"LIB_VERSION_MAJOR=${lib_VERSION_MAJOR};LIB_VERSION_MINOR=${lib_VERSION_MINOR};LIB_VERSION_PATCH=${lib_VERSION_PATCH};LIB_VERSION=${lib_VERSION}"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入其他依赖</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">${_IMPORT_PREFIX}</span>/lib1/lib1Targets.cmake)</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">${_IMPORT_PREFIX}</span>/lib2/lib2Targets.cmake)</span><br></pre></td></tr></tbody></table></figure>
<p>需要根据您的库的实际情况修改上述模板中的路径和其他相关设置。确保将 <code>&lt;path_to_lib_include_directory&gt;</code> 替换为 lib 的包含目录的路径，将 <code>&lt;path_to_lib_library_file&gt;</code> 替换为 lib 的库文件的路径，并根据需要添加或修改其他设置。</p>
<h4 id="CMake-Debugger">CMake Debugger</h4>
<p>从 3.27 开始，CMake 支持调试器，可通过 vscode 调试 CMake 脚本。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://devblogs.microsoft.com/cppblog/introducing-cmake-debugger-in-vs-code-debug-your-cmake-scripts-using-open-source-cmake-debugger/">https://devblogs.microsoft.com/cppblog/introducing-cmake-debugger-in-vs-code-debug-your-cmake-scripts-using-open-source-cmake-debugger/</a></p>
</li>
</ul>
<h4 id="include-gurad">include_gurad</h4>
<p>提供一个 include_guard 避免重复引入</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line">include_gurad(GLOBAL)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="集成常用的静态检测工具">集成常用的静态检测工具</h4>
<p>在 cmake 中集成静态检查工具.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>iwyu: CMAKE_CXX_INCLUDE_WHAT_YOU_USE</p>
</li>
<li class="lvl-2">
<p>lwyu: CMAKE_LINK_WHAT_YOU_USE</p>
</li>
<li class="lvl-2">
<p>cpplint: CMAKE_CXX_CPPCHECK</p>
</li>
<li class="lvl-2">
<p>cppcheck: CMAKE_CXX_CPPCHECK</p>
</li>
<li class="lvl-2">
<p>clang tidy: CMAKE_CXX_CLANG_TIDY</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.kitware.com/static-checks-with-cmake-cdash-iwyu-clang-tidy-lwyu-cpplint-and-cppcheck/">https://www.kitware.com/static-checks-with-cmake-cdash-iwyu-clang-tidy-lwyu-cpplint-and-cppcheck/</a></p>
</li>
</ul>
<h4 id="避免-展开干扰">避免 <code>;</code> 展开干扰</h4>
<p>通常 CMake 中 list 以字符串以 <code>;</code> 分隔的方式展开。这样会导致 CMake 引用变量时候出现问题，需要做特殊处理。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取以.specific_suffix为后缀的文件</span></span><br><span class="line"><span class="keyword">file</span>(GLOB_RECURSE list_depends</span><br><span class="line">    RELATIVE <span class="string">"${CMAKE_CURRENT_SOURCE_DIR}/suffix_specific_folder"</span></span><br><span class="line">    <span class="string">"${CMAKE_CURRENT_SOURCE_DIR}/suffix_specific_folder/*.specific_suffix"</span>)</span><br><span class="line"><span class="comment"># 将list以字符串以`;`分隔替换为\$&lt;SEMICOLON&gt;</span></span><br><span class="line"><span class="keyword">string</span>(REPLACE <span class="string">";"</span> <span class="string">"\\$&lt;SEMICOLON&gt;"</span> list_depends <span class="string">"${list_depends}"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于以;分隔的字符串宏展开</span></span><br><span class="line"><span class="keyword">target_compile_options</span>(</span><br><span class="line">  <span class="variable">${target_name}</span></span><br><span class="line">  PRIVATE -DLIST_DEPENDS=<span class="string">"${list_depends}"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="CMake中处理rpath">CMake 中处理 rpath</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/RPATH-handling">https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/RPATH-handling</a></p>
</li>
</ul>
<h4 id="CMake-install-imported-lib">CMake install imported lib</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/41175354/can-i-install-shared-imported-library">https://stackoverflow.com/questions/41175354/can-i-install-shared-imported-library</a></p>
</li>
</ul>
<h4 id="Platform-check">Platform check</h4>
<p>cmake 提供对平台功能的模块。</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(CheckIncludeFile)</span><br><span class="line"><span class="keyword">include</span>(CheckSymbolExists)</span><br><span class="line"><span class="keyword">include</span>(CheckTypeSize)</span><br><span class="line"><span class="keyword">include</span>(CheckFunctionExists)</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.kitware.com/cmake/community/-/wikis/doc/tutorials/How-To-Write-Platform-Checks">https://gitlab.kitware.com/cmake/community/-/wikis/doc/tutorials/How-To-Write-Platform-Checks</a></p>
</li>
</ul>
<h3 id="CMake-ctest">CMake ctest</h3>
<p>ctest 可执行文件是 CMake 测试驱动程序。CMake 生成的构建树是为使用 enable_testing () 和 add_test () 命令的项目创建的，它具有测试支持。该程序将运行测试并报告结果。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/manual/ctest.1.html">https://cmake.org/cmake/help/latest/manual/ctest.1.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/module/CTest.html">https://cmake.org/cmake/help/latest/module/CTest.html</a></p>
</li>
</ul>
<h4 id="cdash">cdash</h4>
<p>cdash 用于发布 CMake 运行 ctest 的测试结果。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cmake.org/cmake/help/latest/manual/ctest.1.html#id23">https://cmake.org/cmake/help/latest/manual/ctest.1.html#id23</a></p>
</li>
</ul>
<h2 id="vcpkg">vcpkg</h2>
<p><a href="https://learn.microsoft.com/vcpkg/">vcpkg</a> 是 C++ 比较成熟的包管理器，覆盖大部分平台。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://devblogs.microsoft.com/cppblog/category/vcpkg/">https://devblogs.microsoft.com/cppblog/category/vcpkg/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/vcpkg/maintainers/variables">Portfile Variable Reference</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/vcpkg/users/versioning">Versioning reference</a></p>
</li>
</ul>
<h3 id="Integration">Integration</h3>
<p>vcpkg 集成模式包含 <a href="https://learn.microsoft.com/vcpkg/examples/installing-and-using-packages"><code>Classic mode</code></a> 和 <a href="https://learn.microsoft.com/vcpkg/examples/manifest-mode-cmake"><code>Manifest mode</code></a>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/vcpkg/users/buildsystems/cmake-integration">CMake Integration</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://learn.microsoft.com/en-us/vcpkg/users/buildsystems/cmake-integration#cmake_toolchain_file">CMAKE_TOOLCHAIN_FILE</a></li>
<li class="lvl-4"><a href="https://learn.microsoft.com/en-us/vcpkg/users/buildsystems/cmake-integration#using-multiple-toolchain-files">Multiple Toolchain</a></li>
<li class="lvl-4"><a href="https://learn.microsoft.com/en-us/vcpkg/users/buildsystems/cmake-integration#settings-reference">Settings Reference</a></li>
</ul>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/vcpkg/reference/vcpkg-json">vcpkg.json reference</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/vcpkg/reference/vcpkg-configuration-json">vcpkg-configuration reference</a></p>
</li>
</ul>
<h3 id="dependencies">dependencies</h3>
<h4 id="overrides-version">overrides version</h4>
<p>使用 overrides 固化版本。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/microsoft/vcpkg/discussions/25622">https://github.com/microsoft/vcpkg/discussions/25622</a></p>
</li>
</ul>
<h3 id="triplet">triplet</h3>
<h4 id="custom-triplet">custom triplet</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/vcpkg/users/examples/overlay-triplets-linux-dynamic">使用自定义 triplets</a></p>
</li>
</ul>
<h3 id="port">port</h3>
<p>创建 port 提交示例</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/northwindtraders/vcpkg-registry/commit/dd751ef4c5d0a7c2872e16354b1607f102855f63">https://github.com/northwindtraders/vcpkg-registry/commit/dd751ef4c5d0a7c2872e16354b1607f102855f63</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/microsoft/vcpkg/pull/30005/files">https://github.com/microsoft/vcpkg/pull/30005/files</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/northwindtraders/vcpkg-registry">https://github.com/northwindtraders/vcpkg-registry</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/vcpkg/maintainers/functions/vcpkg_from_github#sha512">determine sha512 for in vcpkg_from_github</a></p>
</li>
</ul>
<h4 id="patch-port">patch port</h4>
<p>当需要改动源码来通过编译时，可以使用 git diff 生成 patch 文件和 port 一起提交到 registry</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/vcpkg/examples/patching">https://learn.microsoft.com/en-us/vcpkg/examples/patching</a></p>
</li>
</ul>
<h4 id="empty-policy">empty policy</h4>
<p>空包策略是 VCPKG 中的一种特性，它允许用户安装一个空的库包，以便在项目中占位，但实际上不包含任何库文件 (包含函数、类、变量等代码的二进制文件)。这在某些情况下可能很有用，例如当用户需要占位符来满足其他依赖关系时。</p>
<p>代码步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>设置一个名为 VCPKG_POLICY_EMPTY_PACKAGE 的变量。</p>
</li>
<li class="lvl-2">
<p>将该变量的值设置为 enabled，表示启用空包策略。</p>
</li>
</ul>
<h4 id="vcpkg-cmake-wrapper-cmake">vcpkg-cmake-wrapper.cmake</h4>
<p>自定义在 vcpkg 的 find_package 执行 include 的模块.</p>
<h4 id="baseline">baseline</h4>
<p>生成或更新 baseline</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vcpkg x-update-baseline --add-initial-baseline</span><br></pre></td></tr></tbody></table></figure>
<h4 id="update-port">update port</h4>
<p>在私有 vcpkg 存储库上，可以使用 vcpkg 可执行文件生成所有 rev 解析哈希并提交 ports.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vcpkg format-manifest ports/mypackage/vcpkg.json</span><br><span class="line">git add ports</span><br><span class="line">git commit -m <span class="string">"update ports"</span></span><br><span class="line">vcpkg x-add-version mypackage --overlay-ports=./ports --x-builtin-registry-versions-dir=./versions/ --x-builtin-ports-root=./ports</span><br><span class="line">git add versions</span><br><span class="line">git commit --amend --no-edit</span><br></pre></td></tr></tbody></table></figure>
<h3 id="vcpkg-加速">vcpkg 加速</h3>
<h4 id="使用代理加速">使用代理加速</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>clash 或其它代理方式加速访问 github</p>
</li>
<li class="lvl-2">
<p>国内私域加速（企业加速等）</p>
</li>
</ul>
<h4 id="搭建私域缓存">搭建私域缓存</h4>
<p>参考 <a href="https://learn.microsoft.com/vcpkg/users/assetcaching">vcpkg 构建缓存</a>。</p>
<h4 id="国内公开缓存">国内公开缓存</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/383683670">JackBoosY 缓存</a></p>
</li>
</ul>
<h3 id="常用命令">常用命令</h3>
<h4 id="export">export</h4>
<p>将包导出作为缓存开发环境，但是不推荐</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用原始格式导出，可以搭建 vcpkg 离线构建环境，只需要在 CMakeLists 中设置 CMAKE_TOOLCHAIN_FILE 为导出的离线 vcpkg.cmake 即可。</span></span><br><span class="line">vcpkg <span class="built_in">export</span> abseil:x64-windows --raw --output=<span class="variable">$PWD</span>/path/to/project/3rdparty</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://devblogs.microsoft.com/cppblog/vcpkg-2023-10-19-release-export-for-manifests-documentation-improvements-and-more/">vcpkg export now supports manifest mode</a></p>
</li>
</ul>
<h4 id="install">install</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># libredwg 包名，tools 功能feature，x64 架构，windows 平台</span></span><br><span class="line">vcpkg install libredwg[tools]:x64-windows</span><br><span class="line"></span><br><span class="line"><span class="comment"># download and unpack sources for debugging, see https://github.com/microsoft/vcpkg/discussions/33259</span></span><br><span class="line">vcpkg install --only-downloads</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Github-Actions">Github Actions</h3>
<!-- todo -->
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/zh-cn/vcpkg/github-integration">https://learn.microsoft.com/zh-cn/vcpkg/github-integration</a></p>
</li>
<li class="lvl-2">
<p><a href="https://devblogs.microsoft.com/cppblog/vcpkg-integration-with-the-github-dependency-graph/">https://devblogs.microsoft.com/cppblog/vcpkg-integration-with-the-github-dependency-graph/</a></p>
</li>
</ul>
<h3 id="vcpkg-registry">vcpkg-registry</h3>
<h4 id="create-registry">create registry</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/zh-cn/vcpkg/maintainers/registries">https://learn.microsoft.com/zh-cn/vcpkg/maintainers/registries</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/vcpkg/maintainers/registries">https://learn.microsoft.com/en-us/vcpkg/maintainers/registries</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://learn.microsoft.com/en-us/vcpkg/maintainers/registries#git-registries">git registry</a></li>
<li class="lvl-4"><a href="https://learn.microsoft.com/en-us/vcpkg/maintainers/registries#filesystem-registries">filesystem registry</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://devblogs.microsoft.com/cppblog/registries-bring-your-own-libraries-to-vcpkg/">https://devblogs.microsoft.com/cppblog/registries-bring-your-own-libraries-to-vcpkg/</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/northwindtraders/vcpkg-registry">registry 示例</a></li>
</ul>
</li>
</ul>
<h4 id="using-registry">using registry</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/northwindtraders/beison-ptr">https://github.com/northwindtraders/beison-ptr</a></p>
</li>
</ul>
<h3 id="vcpkg-configuration">vcpkg configuration</h3>
<p>使用 vcpkg 引导开发环境，通过配置 <code>vcpkg-configuration.json</code> 即可配置项目需要的各种工具.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://devblogs.microsoft.com/cppblog/vcpkg-artifacts/">https://devblogs.microsoft.com/cppblog/vcpkg-artifacts/</a></p>
</li>
</ul>
<h2 id="canon">canon</h2>
<!--
https://www.youtube.com/watch?v=mrSwJBJ-0z8
-->
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/conan-io">https://github.com/conan-io</a></p>
</li>
</ul>
<h3 id="结合cmake">结合 cmake</h3>
<p>conan 提供在 cmake 中运行 conan install 的 cmake 模块，该模块已集成在 cmake-registry 中，可通过 vcpkg 配置.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/conan-io/cmake-conan">https://github.com/conan-io/cmake-conan</a></p>
</li>
</ul>
<h2 id="xmake">xmake</h2>
<p><a href="https://github.com/xmake-io/xmake">xmake</a> 由国人开发的比较全面的构建系统。<a href="https://xmake.io/#/zh-cn/about/course">中文版</a>，是一个基于 Lua 的轻量级现代化 c/c++ 的项目构建工具，主要特点是：语法简单易上手，提供更加可读的项目维护，实现跨平台行为一致的构建体验。</p>
<h3 id="ref-参考">ref 参考</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://xmake.io/#/">https://xmake.io/#/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://tboox.org/cn/2019/11/09/quickstart-1-installation/">https://tboox.org/cn/2019/11/09/quickstart-1-installation/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://xmake.io/#/zh-cn/about/course">https://xmake.io/#/zh-cn/about/course</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/91176441">https://zhuanlan.zhihu.com/p/91176441</a></p>
</li>
</ul>
<h2 id="clang-format">clang-format</h2>
<p>安装 <code>pip/choco/mamba/apt/yum install clang-format</code></p>
<p><a href="https://clang.llvm.org/docs/ClangFormatStyleOptions.html">Format Style Options</a> 格式配置说明</p>
<p>配置样例一</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># .clang-format</span></span><br><span class="line"><span class="comment"># https://clang.llvm.org/docs/ClangFormatStyleOptions.html</span></span><br><span class="line">---</span><br><span class="line">Language: Cpp</span><br><span class="line"><span class="comment"># 访问说明符(public、protected、private)不偏移</span></span><br><span class="line">AccessModifierOffset: -4</span><br><span class="line"><span class="comment"># 开括号(开圆括号、开尖括号、开方括号)后的参数换行需要对齐</span></span><br><span class="line">AlignAfterOpenBracket: Align</span><br><span class="line"><span class="comment"># 连续赋值时，不对齐所有等号</span></span><br><span class="line">AlignConsecutiveAssignments: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 连续声明时，不对齐所有声明的变量名</span></span><br><span class="line">AlignConsecutiveDeclarations: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 对齐连续宏定义的样式</span></span><br><span class="line">AlignConsecutiveMacros: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 将转义的换行符(\)尽可能向左对齐</span></span><br><span class="line">AlignEscapedNewlines: Left</span><br><span class="line"><span class="comment"># 水平对齐二元和三元表达式的操作数</span></span><br><span class="line">AlignOperands: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 对齐连续的尾部注释</span></span><br><span class="line">AlignTrailingComments: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许函数的所有参数放到下一行</span></span><br><span class="line">AllowAllArgumentsOnNextLine: <span class="literal">false</span></span><br><span class="line">AllowAllConstructorInitializersOnNextLine: <span class="literal">false</span></span><br><span class="line">AllowAllParametersOfDeclarationOnNextLine: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 不允许短的代码块放在同一行，如 while 代码块</span></span><br><span class="line">AllowShortBlocksOnASingleLine: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 不允许短的 case 标签代码块放在同一行</span></span><br><span class="line">AllowShortCaseLabelsOnASingleLine: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 不允许在类外定义的非空函数放在同一行</span></span><br><span class="line">AllowShortFunctionsOnASingleLine: Inline</span><br><span class="line"><span class="comment"># 不允许短的 if 语句放在同一行</span></span><br><span class="line">AllowShortIfStatementsOnASingleLine: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 不允许短的循环代码块放在同一行</span></span><br><span class="line">AllowShortLoopsOnASingleLine: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 不要主动在函数定义返回类型处换行，除非超过行字符数限制必须换行</span></span><br><span class="line">AlwaysBreakAfterDefinitionReturnType: None</span><br><span class="line">AlwaysBreakAfterReturnType: None</span><br><span class="line"><span class="comment"># 不允许在多行 string 前换行</span></span><br><span class="line">AlwaysBreakBeforeMultilineStrings: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 总是在 template 声明后换行</span></span><br><span class="line">AlwaysBreakTemplateDeclarations: Yes</span><br><span class="line"><span class="comment"># 不要求函数实参换行时必须每个参数各自一行</span></span><br><span class="line">BinPackArguments: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 不要求函数形参换行时必须每个参数各自一行</span></span><br><span class="line">BinPackParameters: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 配置大括号是否换行</span></span><br><span class="line">BraceWrapping:</span><br><span class="line">  <span class="comment"># case 标签后面大括号不换行</span></span><br><span class="line">  AfterCaseLabel: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># class 定义后面大括号不换行</span></span><br><span class="line">  AfterClass: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 控制语句后面大括号不换行</span></span><br><span class="line">  AfterControlStatement: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># enum 定义后面大括号不换行</span></span><br><span class="line">  AfterEnum: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 函数定义后面大括号不换行</span></span><br><span class="line">  AfterFunction: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 命名空间定义后面大括号不换行</span></span><br><span class="line">  AfterNamespace: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># struct 定义后面大括号不换行</span></span><br><span class="line">  AfterStruct: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># union 定义后面大括号不换行</span></span><br><span class="line">  AfterUnion: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># extern 块后面大括号不换行</span></span><br><span class="line">  AfterExternBlock: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># catch 之前需要换行</span></span><br><span class="line">  BeforeCatch: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># else 之前需要换行</span></span><br><span class="line">  BeforeElse: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># lambda 大括号不换行</span></span><br><span class="line">  BeforeLambdaBody: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># while 之前需要换行</span></span><br><span class="line">  BeforeWhile: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 不要缩进大括号</span></span><br><span class="line">  IndentBraces: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 空函数体可以在同一行</span></span><br><span class="line">  SplitEmptyFunction: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 空语句可以在同一行</span></span><br><span class="line">  SplitEmptyRecord: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 空命名空间可以在同一行</span></span><br><span class="line">  SplitEmptyNamespace: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 需要换行时在二元操作符前换行，除了赋值操作符</span></span><br><span class="line">BreakBeforeBinaryOperators: NonAssignment</span><br><span class="line"><span class="comment"># 在 BraceWrapping 中自定义</span></span><br><span class="line">BreakBeforeBraces: Custom</span><br><span class="line"><span class="comment"># 继承列表换行时逗号不换行</span></span><br><span class="line">BreakBeforeInheritanceComma: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 继承列表换行时冒号换行，逗号不换行</span></span><br><span class="line">BreakInheritanceList: BeforeColon</span><br><span class="line"><span class="comment"># 在三元运算操作符之前换行</span></span><br><span class="line">BreakBeforeTernaryOperators: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 构造函数初始化列表换行时逗号不换行</span></span><br><span class="line">BreakConstructorInitializersBeforeComma: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 构造函数初始化列表换行时冒号换行，逗号不换行</span></span><br><span class="line">BreakConstructorInitializers: BeforeColon</span><br><span class="line"><span class="comment"># 允许断开字符串文字</span></span><br><span class="line">BreakStringLiterals: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 每行字符数限制</span></span><br><span class="line">ColumnLimit: 120</span><br><span class="line">CommentPragmas: <span class="string">"^ IWYU pragma:"</span></span><br><span class="line"><span class="comment"># 不允许不同的命名空间定义在同一行</span></span><br><span class="line">CompactNamespaces: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 构造函数初始化列表要么都在一行，要么每个变量一行</span></span><br><span class="line">ConstructorInitializerAllOnOneLineOrOnePerLine: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 构造函数初始化列表需要 4 个缩进</span></span><br><span class="line">ConstructorInitializerIndentWidth: 4</span><br><span class="line"><span class="comment"># 换行后下一行需要 4 个 缩进</span></span><br><span class="line">ContinuationIndentWidth: 4</span><br><span class="line"><span class="comment"># 变量初始化列表前后不需要空格</span></span><br><span class="line">Cpp11BracedListStyle: <span class="literal">true</span></span><br><span class="line">DerivePointerAlignment: <span class="literal">true</span></span><br><span class="line">DisableFormat: <span class="literal">false</span></span><br><span class="line">ExperimentalAutoDetectBinPacking: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 自动为命名空间结尾处添加注释</span></span><br><span class="line">FixNamespaceComments: <span class="literal">true</span></span><br><span class="line">ForEachMacros:</span><br><span class="line">  - foreach</span><br><span class="line">  - Q_FOREACH</span><br><span class="line">  - BOOST_FOREACH</span><br><span class="line">IncludeBlocks: Preserve</span><br><span class="line">IncludeCategories:</span><br><span class="line">  - Regex: <span class="string">'^&lt;ext/.*\.h&gt;'</span></span><br><span class="line">    Priority: 2</span><br><span class="line">  - Regex: <span class="string">"StdAfx.h"</span></span><br><span class="line">    Priority: -1</span><br><span class="line">  - Regex: <span class="string">'^&lt;.*\.h&gt;'</span></span><br><span class="line">    Priority: 1</span><br><span class="line">  - Regex: <span class="string">"^&lt;.*"</span></span><br><span class="line">    Priority: 2</span><br><span class="line">  - Regex: <span class="string">".*"</span></span><br><span class="line">    Priority: 3</span><br><span class="line">IncludeIsMainRegex: <span class="string">"([-_](test|unittest))?$"</span></span><br><span class="line"><span class="comment"># switch 里的 case 需要缩进</span></span><br><span class="line">IndentCaseLabels: <span class="literal">true</span></span><br><span class="line"><span class="comment"># extern 里的代码块需要缩进</span></span><br><span class="line">IndentExternBlock: Indent</span><br><span class="line"><span class="comment"># 预处理指令不能有缩进</span></span><br><span class="line">IndentPPDirectives: None</span><br><span class="line"><span class="comment"># 使用 4 个缩进</span></span><br><span class="line">IndentWidth: 4</span><br><span class="line"><span class="comment"># 函数声明、定义时在返回类型处换行时，下一行不要缩进</span></span><br><span class="line">IndentWrappedFunctionNames: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 代码块开始处不要有空行</span></span><br><span class="line">KeepEmptyLinesAtTheStartOfBlocks: <span class="literal">false</span></span><br><span class="line">MacroBlockBegin: <span class="string">""</span></span><br><span class="line">MacroBlockEnd: <span class="string">""</span></span><br><span class="line"><span class="comment"># 不能有连续2个及以上的空行</span></span><br><span class="line">MaxEmptyLinesToKeep: 1</span><br><span class="line"><span class="comment"># 命名空间内的内容不要缩进</span></span><br><span class="line">NamespaceIndentation: None</span><br><span class="line">PenaltyBreakAssignment: 2</span><br><span class="line">PenaltyBreakBeforeFirstCallParameter: 1</span><br><span class="line">PenaltyBreakComment: 300</span><br><span class="line">PenaltyBreakFirstLessLess: 120</span><br><span class="line">PenaltyBreakString: 1000</span><br><span class="line">PenaltyBreakTemplateDeclaration: 10</span><br><span class="line">PenaltyExcessCharacter: 1000000</span><br><span class="line">PenaltyReturnTypeOnItsOwnLine: 200</span><br><span class="line"><span class="comment"># * &amp; 紧挨类型名</span></span><br><span class="line">PointerAlignment: Left</span><br><span class="line">RawStringFormats:</span><br><span class="line">  - Language: Cpp</span><br><span class="line">    Delimiters:</span><br><span class="line">      - cc</span><br><span class="line">      - CC</span><br><span class="line">      - cpp</span><br><span class="line">      - Cpp</span><br><span class="line">      - CPP</span><br><span class="line">      - <span class="string">"c++"</span></span><br><span class="line">      - <span class="string">"C++"</span></span><br><span class="line">    CanonicalDelimiter: <span class="string">""</span></span><br><span class="line">    BasedOnStyle: google</span><br><span class="line">  - Language: TextProto</span><br><span class="line">    Delimiters:</span><br><span class="line">      - pb</span><br><span class="line">      - PB</span><br><span class="line">      - proto</span><br><span class="line">      - PROTO</span><br><span class="line">    EnclosingFunctions:</span><br><span class="line">      - EqualsProto</span><br><span class="line">      - EquivToProto</span><br><span class="line">      - PARSE_PARTIAL_TEXT_PROTO</span><br><span class="line">      - PARSE_TEST_PROTO</span><br><span class="line">      - PARSE_TEXT_PROTO</span><br><span class="line">      - ParseTextOrDie</span><br><span class="line">      - ParseTextProtoOrDie</span><br><span class="line">    CanonicalDelimiter: <span class="string">""</span></span><br><span class="line">    BasedOnStyle: google</span><br><span class="line"><span class="comment"># 允许对注释重新排版</span></span><br><span class="line">ReflowComments: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许对 #include 排序</span></span><br><span class="line">SortIncludes: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许对 using 声明排序</span></span><br><span class="line">SortUsingDeclarations: <span class="literal">true</span></span><br><span class="line"><span class="comment"># c 风格类型转换括号后不要有空格</span></span><br><span class="line">SpaceAfterCStyleCast: <span class="literal">false</span></span><br><span class="line"><span class="comment"># template 关键字后面需要一个空格</span></span><br><span class="line">SpaceAfterTemplateKeyword: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 赋值运算符两边需要空格</span></span><br><span class="line">SpaceBeforeAssignmentOperators: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 变量初始化列表大括号前不要有空格</span></span><br><span class="line">SpaceBeforeCpp11BracedList: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 构造函数初始化冒号前需要空格</span></span><br><span class="line">SpaceBeforeCtorInitializerColon: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 继承语句冒号前需要一个空格</span></span><br><span class="line">SpaceBeforeInheritanceColon: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 控制语句后面需要一个空格(if/for/while...)</span></span><br><span class="line">SpaceBeforeParens: ControlStatements</span><br><span class="line"><span class="comment"># 基于范围循环的冒号前需要一个空格</span></span><br><span class="line">SpaceBeforeRangeBasedForLoopColon: <span class="literal">true</span></span><br><span class="line"><span class="comment"># 不要在空的圆括号内添加空格</span></span><br><span class="line">SpaceInEmptyParentheses: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 同行尾随注释 // 前面需要一个空格</span></span><br><span class="line">SpacesBeforeTrailingComments: 1</span><br><span class="line"><span class="comment"># 尖括号前后没有空格</span></span><br><span class="line">SpacesInAngles: <span class="literal">false</span></span><br><span class="line"><span class="comment"># c 风格类型转换的括号中前后没有空格</span></span><br><span class="line">SpacesInCStyleCastParentheses: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 圆括号前后没有空格</span></span><br><span class="line">SpacesInParentheses: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 方括号前后没有空格</span></span><br><span class="line">SpacesInSquareBrackets: <span class="literal">false</span></span><br><span class="line">Standard: Auto</span><br><span class="line">StatementMacros:</span><br><span class="line">  - Q_UNUSED</span><br><span class="line">  - QT_REQUIRE_VERSION</span><br><span class="line">TabWidth: 4</span><br><span class="line">UseTab: Never</span><br></pre></td></tr></tbody></table></figure>
<h2 id="WSL">WSL</h2>
<p><a href="https://learn.microsoft.com/windows/wsl/">WSL</a> 是 Windows 上的 Linux 子系统。</p>
<h3 id="安装">安装</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>在 Store 中安装 Windows subsystem for Linux。</p>
</li>
<li class="lvl-2">
<p>配置非 root 用户登录密码提示。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$USER</span> ALL=\(root\) NOPASSWD:ALL | <span class="built_in">tee</span> /etc/sudoers.d/<span class="variable">$USER</span> \</span><br><span class="line">    &amp;&amp; <span class="built_in">chmod</span> 0440 /etc/sudoers.d/<span class="variable">$USER</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>打开 systemd</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> \[boot\]\nsystemd=<span class="literal">true</span>  &gt;&gt; /etc/wsl.conf</span><br></pre></td></tr></tbody></table></figure>
<p>重启 wsl，<code>wsl --shutdown &lt;your linux distro&gt;</code>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 验证 systemd</span></span><br><span class="line">systemctl list-unit-files --<span class="built_in">type</span>=service</span><br></pre></td></tr></tbody></table></figure>
<h3 id="文件共享">文件共享</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过路径 <code>/mnt/c/path/to/windows</code></p>
</li>
<li class="lvl-2">
<p>通过命令打开浏览器 <code>explorer .</code></p>
</li>
</ul>
<h2 id="Windows">Windows</h2>
<h3 id="MSVC">MSVC</h3>
<h3 id="Visual-Studio">Visual Studio</h3>
<h4 id="编译">编译</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>/PROFILE: 打开 VS 测试覆盖率</p>
</li>
</ul>
<h4 id="插件">插件</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/0xc5/p/17081194.html">VA(Visual Assist)</a></p>
</li>
</ul>
<h3 id="链接">链接</h3>
<p>在 windows 上完整的动态链接参考<a href="https://learn.microsoft.com/windows/win32/dlls/dynamic-link-libraries">官方文档</a>，DLL 搜索路径参考 <a href="https://learn.microsoft.com/windows/win32/dlls/dynamic-link-library-search-order">动态库链接顺序</a>。</p>
<h4 id="动态链接">动态链接</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=6TrJc06IekE">https://www.youtube.com/watch?v=6TrJc06IekE</a></p>
</li>
</ul>
<p><strong>windows 下动态链接信息保存在 .idata 节中</strong> , .idata 是指导入数据表（Import Data Table）。idata 是 PE 文件格式中的一个部分，用于描述程序在运行时所需的外部函数和符号。 其中的 Directory Table 包含了每个 dll 的链接信息，包含有以下信息：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>ImportLookupTable（导入查找表） offset</strong>:</p>
<ul class="lvl-2">
<li class="lvl-4">Ordinal/Name flags</li>
<li class="lvl-4">Ordinal (序号)</li>
<li class="lvl-4"><strong>Hint/Name offset</strong>: 函数名称相对于 Hint/Name Table 的偏移量
<ul class="lvl-4">
<li class="lvl-6">Hint idx to export table</li>
<li class="lvl-6"><strong>Function name</strong></li>
</ul>
</li>
</ul>
</li>
<li class="lvl-2">
<p>DLL timestamp(filled at bind time)</p>
</li>
<li class="lvl-2">
<p>Forwarder Chain</p>
</li>
<li class="lvl-2">
<p><strong>DLL Name(offset in image)</strong></p>
</li>
<li class="lvl-2">
<p><strong>ImportAddressTable offset</strong></p>
<ul class="lvl-2">
<li class="lvl-4">Imported function address</li>
</ul>
</li>
</ul>
<p>在当前程序引用库时，对应入函数调用处使用 jmp 指令时，会通过 .idata 查询链接进当前程序被编译进的引用库 dll1.lib 的对应函数跳转地址，并转到库 dll1.dll 中的 .edata 找到最终的调用实现。如下图:</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20231017/230851900.png" alt="image"></p>
<h4 id="符号可见性-2">符号可见性</h4>
<p>默认符号不到处，除非使用以下声明</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>__declspec (export): 添加符号到 .edata</p>
</li>
<li class="lvl-2">
<p>__declspec (import): 基本不做太多工作，主要用于优化加速符号调用跳转</p>
</li>
</ul>
<h4 id="链接库搜索路径">链接库搜索路径</h4>
<p>Windows 会按照以下顺序搜索目录：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>程序所在的目录</p>
</li>
<li class="lvl-2">
<p>当前目录</p>
</li>
<li class="lvl-2">
<p>Windows 系统目录（例如，C:\Windows\System32）</p>
</li>
<li class="lvl-2">
<p>Windows 目录（例如，C:\Windows）</p>
</li>
<li class="lvl-2">
<p>PATH 环境变量中列出的目录</p>
</li>
</ul>
<blockquote>
<p>[!TIP]<br>
可以使用 <code>setx path "%path%;C:\my\directory"</code>，将其它的链接路径设置到环境变量中。请注意，<code>%path%</code> 是一个特殊的变量，它包含了当前 <code>path</code> 环境变量的值，环境变量是永久的。</p>
</blockquote>
<h4 id="查看依赖-dll">查看依赖 dll</h4>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">&amp; <span class="string">"C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/14.34.31933/bin/Hostx64/x64/dumpbin.exe"</span> /dependents xxx.dll</span><br><span class="line">Microsoft (<span class="built_in">R</span>) COFF/PE Dumper Version <span class="number">14.34</span>.<span class="number">31942.0</span></span><br><span class="line">Copyright (C) Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dump of file abseil_dll.dll</span><br><span class="line"></span><br><span class="line">File <span class="built_in">Type</span>: DLL</span><br><span class="line"></span><br><span class="line">  Image has the following dependencies:</span><br><span class="line"></span><br><span class="line">    KERNEL32.dll</span><br><span class="line">    ADVAPI32.dll</span><br><span class="line">    clang_rt.asan_dbg_dynamic<span class="literal">-x86_64</span>.dll</span><br><span class="line">    MSVCP140D.dll</span><br><span class="line">    dbghelp.dll</span><br><span class="line">    bcrypt.dll</span><br><span class="line">    VCRUNTIME140D.dll</span><br><span class="line">    VCRUNTIME140_1D.dll</span><br><span class="line">    ucrtbased.dll</span><br><span class="line"></span><br><span class="line">  Summary</span><br><span class="line"></span><br><span class="line">      <span class="number">161000</span> .data</span><br><span class="line">       <span class="number">14000</span> .pdata</span><br><span class="line">      <span class="number">557000</span> .rdata</span><br><span class="line">       <span class="number">38000</span> .reloc</span><br><span class="line">        <span class="number">1000</span> .rsrc</span><br><span class="line">      <span class="number">293000</span> .text</span><br></pre></td></tr></tbody></table></figure>
<h3 id="MSVC-C-代码分析">MSVC C++ 代码分析</h3>
<p>Visual Studio 提供了多种用于分析和提升 C++ 代码质量的工具。例如 <a href="https://learn.microsoft.com/cpp/code-quality/?view=msvc-170">Visual Studio (MSVC-170) C++ 代码分析</a></p>
<h3 id="MFC">MFC</h3>
<h4 id="简单的-MFC-示例">简单的 MFC 示例</h4>
<p>示例使用 n 次拟合曲线，并实现功能点选 3 个点，自动画出拟合曲线。实现使用 CMake + vcpkg 工具链，对于 MFC 编译，需要增加配置编译选项，否则，会报错：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>AFXDLL: 配置 AFXDLL 宏</p>
</li>
<li class="lvl-2">
<p>CMAKE_MFC_FLAG: 默认改为动态连接 mfc 库</p>
</li>
<li class="lvl-2">
<p>WIN32: 设置正确的 /SUBSYSTEM 表示一个窗口程序，而不是一个终端程序。</p>
</li>
</ul>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.18</span> FATAL_ERROR)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Vcpkg build environment</span></span><br><span class="line"><span class="keyword">message</span>(STATUS <span class="string">"VCPKG_ROOT:$ENV{VCPKG_ROOT}"</span>)</span><br><span class="line"><span class="keyword">set</span>(VCPKG_ROOT <span class="string">"$ENV{VCPKG_ROOT}"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set cmake tool chain</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_TOOLCHAIN_FILE <span class="variable">${VCPKG_ROOT}</span>/scripts/buildsystems/vcpkg.cmake)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(VCPKG_VERBOSE</span><br><span class="line">    <span class="keyword">ON</span></span><br><span class="line">    CACHE BOOL <span class="string">"Vcpkg VCPKG_VERBOSE"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(fitting)</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(Eigen3 CONFIG REQUIRED)</span><br><span class="line"><span class="keyword">if</span>(CMAKE_HOST_WIN32)</span><br><span class="line">  <span class="keyword">add_definitions</span>(-D_AFXDLL)</span><br><span class="line">  <span class="keyword">set</span>(CMAKE_MFC_FLAG <span class="number">2</span>) <span class="comment"># shared link</span></span><br><span class="line">  <span class="comment"># WIN32 correctly set Visual Studio linker flag /SUBSYSTEM in CMAKE</span></span><br><span class="line">  <span class="keyword">add_executable</span>(<span class="variable">${PROJECT_NAME}</span> WIN32 main.cpp)</span><br><span class="line">  <span class="keyword">target_include_directories</span>(<span class="variable">${PROJECT_NAME}</span> PUBLIC <span class="variable">${CMAKE_CURRENT_LIST_DIR}</span>/)</span><br><span class="line">  <span class="keyword">target_link_libraries</span>(<span class="variable">${PROJECT_NAME}</span> PRIVATE Eigen3::Eigen)</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></tbody></table></figure>
<p>在 vcpkg 中配置使用依赖 Eigen3</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"$schema"</span><span class="punctuation">:</span> <span class="string">"https://raw.githubusercontent.com/microsoft/vcpkg-tool/main/docs/vcpkg.schema.json"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"fitting"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"1.0.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"dependencies"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"eigen3"</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Eigen/Dense"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;afxwin.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WindowWidth 640</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WindowHeight 480</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WindowLeft 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WindowTop 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WindowRight (WindowLeft + WindowWidth)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WindowBottom (WindowTop + WindowHeight)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ViewLeft 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ViewBottom 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PixelUnit 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ViewZoomLevel 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所给点的矩阵，返回结果的点拟合矩阵</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">size_t</span> row, <span class="type">size_t</span> col&gt;</span><br><span class="line"><span class="function">Eigen::Matrix&lt;<span class="type">double</span>, row, 1&gt; <span class="title">GetFitting</span><span class="params">(Eigen::Matrix&lt;<span class="type">double</span>, row, col&gt; m,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         Eigen::Matrix&lt;<span class="type">double</span>, row, <span class="number">1</span>&gt; y)</span> </span>{</span><br><span class="line">  <span class="keyword">return</span> m.<span class="built_in">inverse</span>() * y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取拟合结果</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="type">size_t</span> row&gt;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">FittingReuslt</span><span class="params">(Eigen::Matrix&lt;<span class="type">double</span>, row, <span class="number">1</span>&gt; fa, <span class="type">double</span> x)</span> </span>{</span><br><span class="line">  <span class="comment">// product</span></span><br><span class="line">  <span class="keyword">return</span> Eigen::Matrix&lt;<span class="type">double</span>, <span class="number">1</span>, <span class="number">3</span>&gt;{x * x, x, <span class="number">1</span>} * fa;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMyWnd</span> : <span class="keyword">public</span> CFrameWnd {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">CMyWnd</span>() {</span><br><span class="line">    <span class="built_in">Create</span>(<span class="literal">NULL</span>, _T(<span class="string">"My Window"</span>), WS_OVERLAPPEDWINDOW,</span><br><span class="line">           <span class="built_in">CRect</span>(WindowLeft, WindowTop, WindowWidth, WindowHeight));</span><br><span class="line">    <span class="built_in">SetTimer</span>(<span class="number">1</span>, <span class="number">40</span>, <span class="literal">NULL</span>); <span class="comment">// 设置定时</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="comment">// 绘制回调</span></span><br><span class="line">  <span class="function">afx_msg <span class="type">void</span> <span class="title">OnPaint</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function">CPaintDC <span class="title">dc</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    dc.<span class="built_in">SetMapMode</span>(MM_ANISOTROPIC);</span><br><span class="line">    dc.<span class="built_in">SetWindowExt</span>(WindowWidth + <span class="number">50</span>, WindowHeight + <span class="number">50</span>);</span><br><span class="line">    dc.<span class="built_in">SetViewportExt</span>(WindowWidth, WindowHeight);</span><br><span class="line">    dc.<span class="built_in">SetViewportOrg</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> HPEN pen = <span class="built_in">CreatePen</span>(PS_SOLID, <span class="number">0</span>, <span class="built_in">RGB</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="type">const</span> HPEN oldpen = <span class="built_in">static_cast</span>&lt;HPEN&gt;(<span class="built_in">SelectObject</span>(dc, pen));</span><br><span class="line">    dc.<span class="built_in">MoveTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    dc.<span class="built_in">LineTo</span>(WindowWidth, WindowHeight);</span><br><span class="line">    dc.<span class="built_in">MoveTo</span>(<span class="number">0</span>, WindowHeight);</span><br><span class="line">    dc.<span class="built_in">LineTo</span>(WindowWidth, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (m_points.<span class="built_in">size</span>() &gt;= <span class="number">3</span>) {</span><br><span class="line">      <span class="comment">// 计算拟合参数</span></span><br><span class="line">      CPoint p1 = m_points[<span class="number">0</span>];</span><br><span class="line">      CPoint p2 = m_points[<span class="number">1</span>];</span><br><span class="line">      CPoint p3 = m_points[<span class="number">2</span>];</span><br><span class="line">      Eigen::Matrix&lt;<span class="type">double</span>, <span class="number">3</span>, <span class="number">3</span>&gt; m;</span><br><span class="line">      Eigen::Matrix&lt;<span class="type">double</span>, <span class="number">3</span>, <span class="number">1</span>&gt; y;</span><br><span class="line">      m &lt;&lt; p<span class="number">1.</span>x * p<span class="number">1.</span>x, p<span class="number">1.</span>x, <span class="number">1</span>, p<span class="number">2.</span>x * p<span class="number">2.</span>x, p<span class="number">2.</span>x, <span class="number">1</span>, p<span class="number">3.</span>x * p<span class="number">3.</span>x, p<span class="number">3.</span>x, <span class="number">1</span>;</span><br><span class="line">      y &lt;&lt; p<span class="number">1.</span>y, p<span class="number">2.</span>y, p<span class="number">3.</span>y;</span><br><span class="line">      <span class="keyword">auto</span> fa = <span class="built_in">GetFitting</span>&lt;<span class="number">3</span>, <span class="number">3</span>&gt;(m, y);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 绘制拟合结果</span></span><br><span class="line">      dc.<span class="built_in">MoveTo</span>(p1);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> x = p<span class="number">1.</span>x; x &lt;= p<span class="number">3.</span>x; x++) {</span><br><span class="line">        dc.<span class="built_in">LineTo</span>((<span class="type">int</span>)x, (<span class="type">int</span>)<span class="built_in">FittingReuslt</span>&lt;<span class="number">3</span>&gt;(fa, x));</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">SelectObject</span>(dc, oldpen);</span><br><span class="line">    <span class="built_in">DeleteObject</span>(pen);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标左击事件回调</span></span><br><span class="line">  <span class="function">afx_msg <span class="type">void</span> <span class="title">OnLButtonDown</span><span class="params">(UINT nFlags, CPoint point)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (m_points.<span class="built_in">size</span>() &lt; <span class="number">3</span>) {</span><br><span class="line">      m_points.<span class="built_in">push_back</span>(point);</span><br><span class="line">      <span class="built_in">Invalidate</span>();</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定时回调，重绘</span></span><br><span class="line">  <span class="function">afx_msg <span class="type">void</span> <span class="title">OnTimer</span><span class="params">(UINT_PTR nIDEvent)</span> </span>{ <span class="built_in">Invalidate</span>(); }</span><br><span class="line"></span><br><span class="line">  <span class="built_in">DECLARE_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  std::vector&lt;CPoint&gt; m_points{};</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册消息回调映射</span></span><br><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CMyWnd, CFrameWnd)</span><br><span class="line"><span class="built_in">ON_WM_PAINT</span>()</span><br><span class="line"><span class="built_in">ON_WM_LBUTTONDOWN</span>()</span><br><span class="line"><span class="built_in">ON_WM_TIMER</span>()</span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CMyApp</span> : <span class="keyword">public</span> CWinApp {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> BOOL <span class="title">InitInstance</span><span class="params">()</span> </span>{</span><br><span class="line">    CMyWnd *pWnd = <span class="keyword">new</span> <span class="built_in">CMyWnd</span>();</span><br><span class="line">    m_pMainWnd = pWnd;</span><br><span class="line">    pWnd-&gt;<span class="built_in">ShowWindow</span>(SW_SHOW);</span><br><span class="line">    pWnd-&gt;<span class="built_in">UpdateWindow</span>();</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">CMyApp theApp;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="LLVM-on-Windows">LLVM on Windows</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://wetmelon.github.io/clang-on-windows.html">https://wetmelon.github.io/clang-on-windows.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.conan.io/2022/10/13/Different-flavors-Clang-compiler-Windows.html">https://blog.conan.io/2022/10/13/Different-flavors-Clang-compiler-Windows.html</a></p>
</li>
</ul>
<h2 id="Unix">Unix</h2>
<h3 id="编译和链接">编译和链接</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=cpkDQaYttR4">Compiling and Linking</a></p>
</li>
</ul>
<p>通常比较成熟的 IDE 会将这个过程封装，对用户无感。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>编译</p>
</li>
</ul>
<p>简单来说，将用户代码，编译成机器可执行的指令，一般指对单个文件进行编译。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取 ellf 的头部信息</span></span><br><span class="line">readelf -h main.o</span><br><span class="line"><span class="comment"># 获取 elf 区块</span></span><br><span class="line">readelf -S m</span><br><span class="line"><span class="comment"># .text 编译好的代码</span></span><br><span class="line"><span class="comment"># .data 数据区</span></span><br></pre></td></tr></tbody></table></figure>
<p>如果代码中有调用其它的库或对象，在代码编译成单个对象文件时，调用符号时会将对应位置的反汇编先设置为 0，然后在链接这一步组装（生成调用地址）。</p>
<p>在代码块中，可以找到需要为调用函数生成地址的重定位表（.reloc）。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取重定位表，在 .text 可以找到需要生成调用地址的函数</span></span><br><span class="line">objdump -r main.o</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>链接</p>
</li>
</ul>
<p>将编译之后的所有目标文件，库（动态库、静态库）组合拼装成一个独立的可执行文件。</p>
<p>这里，链接器，会根据目标文件、静态库中的重定位表找到需要修正地址的函数及全局变量。</p>
<p>如果，在链接时没有提供需要的库，链接时会警告 <code>undefined reference</code>。</p>
<hr>
<p>以上编译及链接过程通常使用 IDE 或脚本自动完成。比如 makefile 管理依赖的脚本：</p>
<figure class="highlight makefile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个目标 main 依赖树</span></span><br><span class="line"><span class="section">all: main</span></span><br><span class="line"><span class="comment"># main 依赖 main.o math.o，以及生成指令</span></span><br><span class="line"><span class="section">main: main.o math.o</span></span><br><span class="line">    gcc main.o math.o -o main</span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">    gcc -c main.c</span><br><span class="line"></span><br><span class="line"><span class="section">math.o: math.c</span></span><br><span class="line">    gcc -c math.c</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm main main.o math.o</span><br></pre></td></tr></tbody></table></figure>
<h4 id="可执行文件或对象文件的节表和内存映射">可执行文件或对象文件的节表和内存映射</h4>
<p>对象文件或可执行文件的节表和内存布局是两个不同的概念，它们描述了程序在不同层次上的组织和存储方式。</p>
<p>节表（Section Table）是对象文件或可执行文件中的一种数据结构，用于记录文件中各个节的信息。它包含了每个节的名称、大小、偏移量等属性。节表是静态的，它在编译或链接过程中生成，并嵌入到最终的二进制文件中。节表描述了程序在文件中的组织形式，但并不直接映射到内存中的布局。</p>
<p>内存布局（Memory Layout）是程序在运行时分配和使用内存的方式。当程序被加载到内存中运行时，操作系统会为程序分配一块内存空间，并将程序的各个部分（例如代码、数据、堆栈）放置在不同的内存区域中。内存布局是动态的，它由操作系统和运行时环境决定，并且可以因为程序的运行状态而发生变化。</p>
<p>节表描述了程序在文件中的组织形式，而内存布局描述了程序在运行时的内存分配和布局情况。节表用于链接器和调试器在加载文件时定位和解析各个节的数据，而内存布局则决定了程序在运行时如何访问和使用内存中的数据和代码。</p>
<h4 id="节表">节表</h4>
<p>对象文件或可执行文件的节表是一个数据结构，用于记录文件中各个节的信息。具体的节表结构和命名约定可能因不同的对象文件格式而有所不同，但以下是一些常见的节表条目及其相对位置的示例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>代码节（Text Section）：存储程序的可执行代码。它通常位于节表的开始位置。</p>
</li>
<li class="lvl-2">
<p>数据节（Data Section）：存储程序的已初始化的全局变量和静态变量。它通常紧随代码节之后。</p>
</li>
<li class="lvl-2">
<p>BSS 节（BSS Section）：存储程序的未初始化的全局变量和静态变量。它通常位于数据节之后。</p>
</li>
<li class="lvl-2">
<p>符号表节（Symbol Table Section）：存储符号表的相关信息，包括函数、变量、常量等的名称、类型和地址等。它通常位于 BSS 节之后。</p>
</li>
<li class="lvl-2">
<p>字符串表节（String Table Section）：存储字符串常量的表，用于存储符号表中的名称和其他字符串。它通常紧随符号表节之后。</p>
</li>
<li class="lvl-2">
<p>重定位表节（Relocation Table Section）：存储需要进行重定位的代码和数据的相关信息。它通常位于字符串表节之后。</p>
</li>
<li class="lvl-2">
<p>动态链接节（Dynamic Linking Section）：存储动态链接相关的信息，如动态链接库的名称和依赖关系等。它通常位于重定位表节之后。</p>
</li>
<li class="lvl-2">
<p>调试信息节（Debug Information Section）：存储调试器使用的调试信息，如源代码映射、变量名称和行号等。它通常位于动态链接节之后。</p>
</li>
<li class="lvl-2">
<p>其他自定义节：根据具体的对象文件格式和编译器的实现，还可能存在其他自定义的节，用于存储特定的数据或代码。</p>
</li>
</ul>
<h4 id="内存映射">内存映射</h4>
<p>内存映射 (Memory Map) 通常用于描述编译及链接将程序的实体放到不同的段地址上:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>代码 (text or code), 用于存放代码</p>
</li>
<li class="lvl-2">
<p>字面量 (literal), 用于存放已初始化只读数据</p>
</li>
<li class="lvl-2">
<p>数据 (data), 用于存放已初始化读写数据</p>
</li>
<li class="lvl-2">
<p>符号 (bss,Block Started by Symbol), 用于存放未初始化读写数据</p>
</li>
<li class="lvl-2">
<p>栈 (stack), 用于存储函数的<code>局部变量、函数参数、函数调用的上下文信息和返回地址</code>等。栈以<code>后进先出（LIFO）</code>的方式分配和释放内存。每当调用函数时，栈都会分配一块新的内存空间，当函数返回时，栈会释放该内存空间。栈通常位于高地址的部分，靠近内存的顶部。栈的地址增长方向可以是向下（从高地址向低地址增长）或向上（从低地址向高地址增长），具体取决于操作系统和编译器的实现。大多数常见的操作系统（如 Windows、Linux 等）使用向下增长的栈，也就是栈底位于高地址，栈顶位于低地址。</p>
</li>
<li class="lvl-2">
<p>堆 (heap), 用于存储程序<code>运行时动态创建的对象、变量或数据结构</code>。堆的大小在程序运行期间可以动态增长或缩小，需要手动管理内存的分配和释放。地址生长方向和栈相反，并靠近内存的底部.</p>
</li>
<li class="lvl-2">
<p>命令行参数及环境变量，用于存储程序运行时传递给程序的命令行参数和环境变量的值的一部分。通常以字符串数组的形式存储在内存中，数组中的每个元素对应一个命令行参数。这些参数在内存中是连续存储的，通常在堆栈之后的位置。命令行参数和环境变量的具体存储方式和访问方式取决于操作系统和编程语言的实现。在 C 语言中，可以使用 argc 和 argv 参数来获取命令行参数，使用 environ 变量来获取环境变量。</p>
</li>
<li class="lvl-2">
<p>共享库 (shared library), 用于存储程序所需的外部共享库的代码和数据。动态链接库通常在程序加载时被动态加载到内存中，以供程序在运行时使用。</p>
</li>
</ul>
<h4 id="静态链接">静态链接</h4>
<p>将程序所需库在编译时<strong>根据重定位表</strong>链接到 elf 中。</p>
<p>这样不需要依赖库，提高运行性能，减少运行时库加载时间。</p>
<p><code>-static</code> 选项告诉编译器使用静态链接，<code>-o main</code> 指定输出文件名为 <code>main</code>，main.c 是源代码文件名，<code>-lm</code> 选项告诉编译器链接 <code>math</code> 库。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gcc -static -o main main.c -lm</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Position-Independent-Code">Position Independent Code</h4>
<p>非 PIC, 调用符号跳转地址保存的是相对代码位置的绝对地址.</p>
<p>在 PIC 中，** 隐藏符号（Hidden Symbol）** 跳转是通过相对偏移量来实现的，通过将代码段的基址与相对偏移量相加来计算函数或变量的实际地址。这使得代码可以在内存中的不同位置加载，而不需要重新定位符号。</p>
<p><strong>可见符号，使用过 got 进行跳转的</strong>: got 表存储了全局符号的实际地址。全局符号是在程序或共享库中定义的全局变量和函数。由于动态链接的特性，这些全局符号的地址在程序加载时是未知的。</p>
<p>当程序或共享库被加载到内存中时，动态链接器（<a href="http://ld.so">ld.so</a>）会负责填充.got 表中的地址。它将解析和定位全局符号的实际地址，并将这些地址写入.got 表中。</p>
<p>在程序执行期间，当需要访问全局符号时，程序会通过.got 表来获取实际地址。它会使用.got 表中的偏移量来计算全局符号的地址，然后进行访问。</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20231017/232437083.png" alt="image"></p>
<p>通常建议所有动态库都使用 PIC, 但 - fPIC 并没有作为隐式传递和 - shared 一起传递使用.</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20231017/233022638.png" alt="image"></p>
<h4 id="Resolution-Time">Resolution Time</h4>
<p>默认链接时，链接使用:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>--allow-shlib-undefined</code>: 允许未定义的动态符号，通常可以使用参数强制检查，如 <code>--no-allow-shlib-undefined</code>(ld 上时递归生效，在 gold/ldd 中不递归) 或者 <code>-z defs</code> / <code>--no-undefined</code></p>
</li>
</ul>
<h4 id="Lazy-Bind">Lazy Bind</h4>
<p>在 Linux 中，动态链接的 Lazy bind（延迟绑定）是一种优化技术，用于在程序运行时推迟对外部函数的解析和绑定。</p>
<p>当程序需要调用一个外部函数时，Lazy bind 的工作如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>首先，程序会通过 PLT（Procedure Linkage Table，过程链接表）来查找外部函数的地址。</p>
</li>
<li class="lvl-2">
<p>如果外部函数的地址在 PLT 的 GOT（Global Offset Table，全局偏移表）中已经被填充，那么程序会直接跳转到该地址执行函数。</p>
</li>
<li class="lvl-2">
<p>如果外部函数的地址在 GOT 中还未被填充，那么程序会跳转到 PLT 中的一个特殊条目，该条目负责进行解析和绑定。</p>
</li>
<li class="lvl-2">
<p>解析和绑定的过程由动态链接器（<a href="http://ld.so">ld.so</a>）完成。它会在首次调用时，根据外部函数的名称在共享库中进行符号查找，并将实际地址填充到 GOT 中。</p>
</li>
<li class="lvl-2">
<p>一旦地址被填充到 GOT 中，程序会跳转到该地址执行函数。此后，对该外部函数的调用将直接使用已绑定的地址，而不需要再执行解析和绑定过程。</p>
</li>
</ul>
<p>Lazy bind 的优势在于，它推迟了对外部函数的解析和绑定，只在真正需要调用时才进行。这可以减少启动时间和内存开销，特别是对于大型程序和具有大量外部函数调用的程序来说。然而，这也可能导致在首次调用时的一定延迟，因为需要进行解析和绑定操作。</p>
<p>Linux: 默认打开，通过环境变量 LD_BIND_NOW 控制<br>
Windows: 默认关闭，通过链接器 / DELAYLOAD:<code>&lt;xxx.dll&gt;</code></p>
<blockquote>
<p>[!CAUTION]<br>
Windows 下延迟绑定下动态库函数地址不相等，可能导致程序崩溃。</p>
</blockquote>
<h4 id="Procedure-Linkage-Table-PLT">Procedure Linkage Table(PLT)</h4>
<p>在 Linux 中，PLT（Procedure Linkage Table，过程链接表）是用于实现动态链接的重要数据结构之一。</p>
<p>PLT 是一个函数调用的中间层，用于处理动态链接的函数调用。当程序中的代码需要调用一个外部函数时，它会通过 PLT 来实现。</p>
<p>PLT 中的每个条目都包含了两个部分：GOT（Global Offset Table，全局偏移表）和跳转指令。GOT 用于存储外部函数的实际地址，而跳转指令用于跳转到正确的地址。</p>
<p>当程序第一次调用一个外部函数时，PLT 会执行以下步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在 GOT 中查找外部函数的实际地址。由于初始时 GOT 中的地址是未知的，所以会跳转到 PLT 的下一个条目。</p>
</li>
<li class="lvl-2">
<p>PLT 中的跳转指令将控制权转移到动态链接器（<a href="http://ld.so">ld.so</a>）中的相应解析函数。解析函数负责定位并填充 GOT 中的地址。</p>
</li>
<li class="lvl-2">
<p>解析函数会将外部函数的实际地址写入 GOT 中，并跳转回 PLT 中的下一个条目。</p>
</li>
<li class="lvl-2">
<p>现在，GOT 中已经存储了外部函数的实际地址。PLT 中的跳转指令将控制权转移到该地址，实现对外部函数的调用。</p>
</li>
</ul>
<p>在后续的函数调用中，PLT 会直接使用 GOT 中存储的实际地址，而不需要再执行解析函数。这样可以提高函数调用的效率。</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20231017/235259259.png" alt="image"></p>
<h4 id="符号可见性-3">符号可见性</h4>
<p>默认符号都可见，需要手动隐藏不需要的符号，这可以一定程度优化链接和加载动态库可维护性。</p>
<p>隐藏符号:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-fvisibility=hidden</code></p>
</li>
<li class="lvl-2">
<p><code>-fvisibility-inlines-hidden</code></p>
</li>
<li class="lvl-2">
<p><code>-fvisibility-ms-compat</code></p>
</li>
<li class="lvl-2">
<p><code>__attribute__((visibility("hidden")))</code></p>
</li>
</ul>
<p><strong>静态符号（static symbols）</strong>: 指在编译时由编译器创建的符号，它们只在当前编译单元（如一个源文件或一个库）中可见。静态符号在编译时进行识别和分配内存，并在链接时被解析和链接到最终的可执行文件中。</p>
<p><strong>动态符号（dynamic symbols）</strong>: 指在编译时不可见的符号，它们在运行时由动态链接器（dynamic linker）解析和绑定到正确的地址。动态符号可以在多个编译单元之间共享，并且可以在运行时被其他程序使用。</p>
<blockquote>
<p>[!TIP]<br>
nm -D, --dynamic (Display dynamic symbols instead of normal symbols): 仅显示动态符号。</p>
</blockquote>
<p>简而言之，静态符号是在编译时创建的，只在当前编译单元中可见，而动态符号是在运行时由动态链接器解析和绑定的，可以在多个编译单元之间共享。</p>
<h4 id="动态链接-2">动态链接</h4>
<p>动态链接是在程序运行时将所需的库加载到内存中的过程，将符号查询、地址重定位推迟到程序加载或符号调用的时候。</p>
<p>这样可以减小可执行文件的大小，并且可以使多个程序共享同一个库，从而节省内存，实现二进制代码级别复用。</p>
<p><strong>.dynamic/.dynsym 节保存动态链接信息</strong>. 如下</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20231017/231243532.png" alt="image"></p>
<p>不同于 windows, linux 下动态链接信息是分开保存的，链接的 lib 保存在 .dynamic 节中，链接的符号保存在 .dynsym 节中.</p>
<p>动态链接在数据段 .data 预留一个叫全局偏移表 got（Global Offset Table）区域保存专用于保存全局变量和函数跳转地址。在 .code 中调用动态库时搜先查找 GOT，GOT 中的地址会在动态库加载时替换为真正的动态库中的地址。这里利用了 GOT 和代码段相对位置是固定的，可以利用 CPU 相对寻址实现。这样 GOT 在每个进程中都保留一部分很小的副本，但可以实现代码被所有进程共享，这种方式称为 PIC (地址无关代码)。一般为减小函数符号重定位开销，操作系统会用程序链接表 PLT (Procedure Linkage Table) 进行延迟到函数第一次调用的时候，因为绝大多数函数不会被调用。一般这个过程会在代码段用一段桩代码，在第一次调用时去查询真正的跳转地址并更新 GOT，具体会更新复杂。</p>
<p>在 Linux 下，动态库是通过内存映射的方式加载到进程的地址空间中的。当多个进程加载同一个动态库时，它们会共享同一个物理内存页，这样可以节省内存空间并提高系统性能。具体来说，当一个进程加载一个动态库时，动态链接器会将动态库的代码段、数据段等内容映射到进程的地址空间中。如果另一个进程也需要加载同一个动态库，动态链接器会检查该动态库是否已经在其他进程中加载过。如果已经加载过，动态链接器会将该动态库的内存映射到新进程的地址空间中，并且新进程和原进程会共享同一个物理内存页。这样，多个进程就可以共享同一个动态库的代码和数据，从而节省内存空间并提高系统性能。需要注意的是，如果多个进程需要修改同一个动态库的数据，就需要使用线程同步机制来保证数据的一致性。否则，不同进程之间对同一个动态库的数据修改可能会相互影响，导致程序出现错误。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># (-shared)指令生成位置无关(-fPIC)的动态库，</span></span><br><span class="line"><span class="comment"># (-Wl,-soname,libexample.so.1)指定生成库文件名为(libexample.so.1)，并在当前路径生成符号链接(libexample.so)指向(libexample.so.1)</span></span><br><span class="line"><span class="comment"># (-Wl,-rpath=/path/to/rpath)指定运行时查找库(example_dep)的路径</span></span><br><span class="line">gcc -shared -fPIC example.c -o libexample.so.1 -L. -lexample_dep -Wl,-soname,libexample.so -Wl,-rpath=/path/to/rpath</span><br><span class="line"><span class="comment"># 在当前路径（-L.）链接（-lexample）动态库 libexample.so，可以加入 -Wl,-rpath=/path/to/rpath 指定运行时查找依赖动态库 example 路径</span></span><br><span class="line">gcc -o main main.c -L. -lexample -Wl,-rpath=$(<span class="built_in">pwd</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>查看依赖的动态库</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 main 依赖的动态库</span></span><br><span class="line">readelf -d main | grep NEEDED</span><br><span class="line">objdump -x main | grep NEEDED</span><br></pre></td></tr></tbody></table></figure>
<p>查看库提供的实现符号</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 libc 的提供的动态符号</span></span><br><span class="line">nm -D /lib/x86_64-llinux-gnu/libc.so.6</span><br><span class="line"><span class="comment"># 查看 libc 的提供的符号，包括静态和动态</span></span><br><span class="line">nm /lib/x86_64-llinux-gnu/libc.so.6</span><br></pre></td></tr></tbody></table></figure>
<p>查看系统能搜索到的库</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ldconfig -p | grep libc</span><br></pre></td></tr></tbody></table></figure>
<p>生成动态库常用指令</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-soname 选项用于在动态库文件中指定一个名为 soname 的标记，该标记指定了动态库的名称，通常用于版本区分。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 编译器将生成名为libexample.so.1的动态库文件，并在其中指定一个名为soname的标记，该标记的值为libexample.so。此外，编译器还将在当前目录中创建一个名为libexample.so的符号链接，该符号链接指向libexample.so.1。这样，当其他程序链接到该动态库时，它们将使用libexample.so作为动态库的名称。</span></span><br><span class="line">gcc -shared -fPIC example.c -o libexample.so.1 -Wl,-soname,libexample.so</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>-rpath 选项用于指定动态库文件的搜索路径。</p>
</li>
<li class="lvl-2">
<p>-Wl 将逗号分隔的选项列表传递给链接器。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 编译器将使用-rpath=/path/to/rpath选项将rpath加入链接选项，</span></span><br><span class="line"><span class="comment"># 使用-Bstatic选项将后续的静态库链接到程序中，使用-lstatic_dep选项指定静态库的名称，</span></span><br><span class="line"><span class="comment"># 使用-Bdynamic选项将后续的动态库链接到程序中，使用-ldynamic_dep选项指定动态库的名称。</span></span><br><span class="line">gcc -o main main.c -L. -lexample_dep -Wl,-rpath=/path/to/rpath,-Bstatic,-lstatic_dep,-Bdynamic,-ldynamic_dep</span><br></pre></td></tr></tbody></table></figure>
<p>查看及控制动态库加载</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>LD_DEBUG 查看程序在运行时搜索动态库的过程，例如 <code>LD_DEBUG=all ./program</code></p>
</li>
<li class="lvl-2">
<p>LD_LIBRARY_PATH 指定动态库的搜索路径，指定先搜索动态库路径，例如 <code>LD_LIBRARY_PATH=$(pwd) ./program</code></p>
</li>
<li class="lvl-2">
<p>LD_PRELOAD 指定要预加载的动态库。当程序在运行时需要加载动态库时，动态链接器会首先加载 LD_PRELOAD 环境变量指定的动态库，然后再搜索其他动态库。例如 <code>LD_PRELOAD=/path/to/libmylib.so</code></p>
</li>
</ul>
<blockquote>
<p>[!TIP]<br>
动态库链接及运行行为，可以直接使用工具 patchelf 强行更改。patchelf 一个用于动态链接器和可执行文件的工具，可用于在没有重新编译的情况下更改程序的运行时属性。使用 patchelf，可以修改二进制文件的动态链接器路径，设置程序的默认库路径，设置二进制文件的运行权限，甚至可以通过修改二进制文件的段来添加或删除符号。</p>
</blockquote>
<p>以下是使用 patchelf 的示例命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将二进制文件的动态链接库路径设置为当前目录</span></span><br><span class="line">patchelf --set-rpath . /path/to/binary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将二进制文件的运行权限设置为仅限用户</span></span><br><span class="line">patchelf --set-interpreter /lib/ld-linux.so.2 --set-rpath . --set-soname new_name.so /path/to/binary</span><br><span class="line"><span class="built_in">chmod</span> 700 /path/to/binary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出二进制文件的所有动态链接库依赖项</span></span><br><span class="line">patchelf --print-interpreter /path/to/binary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出二进制文件依赖的所有动态链接库及其版本</span></span><br><span class="line">patchelf --print-needed /path/to/binary</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!CAUTION]<br>
注意，使用 patchelf 需要小心谨慎，因为不当的更改可能会导致程序无法正常工作。在对二进制文件进行更改之前，请务必确保知道自己在做什么，并备份原始文件以防发生问题。</p>
</blockquote>
<h4 id="显式动态链接">显式动态链接</h4>
<p>显示动态链接通常用于实现基于库级别的插件热更新.</p>
<h3 id="Unix-软件编译安装">Unix 软件编译安装</h3>
<p>本节描述了，针对编译安装软件的 <code>--enable-shared and run path</code> 参数注意要点。</p>
<p>在 linux 上安装非标准的编译安装，附带 --enable-shared 时，需要注意运行库是否和标准位置的运行库是否冲突，是否涉及覆盖等问题。</p>
<blockquote>
<p>[!CAUTION]<br>
The problem is, that on most Unix systems (with the notable exception of Mac OS X), the path to shared libraries is not an absolute path. So, if you install Python in a non-standard location, which is the right thing to do so as not to interfere with a system Python of the same version, you will need to configure in the path to the shared library or supply it via an environment variable at run time, like LD_LIBRARY_PATH. You may be better off avoiding --enable-shared; it’s easy to run into problems like this with it.</p>
<p>From Python Issue27685, <a href="https://bugs.python.org/issue27685">Issue 27685: altinstall with --enable-shared showing incorrect behaviour</a></p>
</blockquote>
<h4 id="Python-编译安装示例">Python 编译安装示例</h4>
<p>python 编译成动态库安装能增加更多功能，但当附带 --enable-shared 时，需要附带安装位置的运行库的 run path 保证运行库位置能被正确找到。</p>
<h5 id="绝对共享库路径">绝对共享库路径</h5>
<p>如下，指定了 python 的安装路径，并指定了对应的运行库的绝对路径所在 run path。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./configure --enable-shared --prefix=/opt/python LDFLAGS=-Wl,-rpath=/opt/python/lib</span><br></pre></td></tr></tbody></table></figure>
<p>这里 /opt/python/lib 没有在系统共享库搜索路径中，需要手动将动态库的安装目录添加到 ld 的搜索路径。</p>
<p>找到运行库路径，链接器默认的动态库搜索范围包括 /lib 、/usr/lib 以及 /etc/ld.so.conf 配置文件中包含的目录。</p>
<p>这里参考 <a href="https://zhuanlan.zhihu.com/p/50838802">python 安装非标准位置问题</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用链接器查看可搜索范围</span></span><br><span class="line">ldconfig -v | grep python3</span><br><span class="line">ldd $(<span class="built_in">which</span> python3)</span><br></pre></td></tr></tbody></table></figure>
<p>配置非标准位置动态库加载路径</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 找到运行库所在路径</span></span><br><span class="line">find /usr -name <span class="string">'libpython3.7m.so*'</span></span><br><span class="line"><span class="comment"># 新增运行库路径，并刷新运行库搜索环境</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/opt/python/lib"</span> &gt; /etc/ld.so.conf.d/opt_python.conf &amp;&amp; ldconfig</span><br></pre></td></tr></tbody></table></figure>
<h5 id="相对共享库路径">相对共享库路径</h5>
<p>如下，指定了 python 的运行库安装路径，并指定了对应的运行库的相对路径所在 run path。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./configure --enable-shared \</span><br><span class="line">--prefix=/opt/python \</span><br><span class="line">LDFLAGS=-Wl,-rpath=@ORIGIN/../lib <span class="comment"># 指定 path/bin/python3 的共享库搜索路径为 lib 路径</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="GDB">GDB</h3>
<p>主要描述了针对 GDB 工具的相关使用及工具。</p>
<p>一般来说，GDB 主要帮助完成下面五个方面的功能：<br>
1、启动程序，可以按照自定义的要求随心所欲的运行程序。<br>
2、可让被调试的程序在所指定的调置的断点处停住。（断点可以是条件表达式）<br>
3、当程序被停住时，可以检查此时程序中所发生的事 即挂载调试。<br>
4、可以改变程序，将一个 BUG 产生的影响修正从而测试其他 BUG。<br>
5、当程序产生核心段错误时，可以进行 CORE 文件调试，查找错误。</p>
<h4 id="gdb-dashboard">gdb dashboard</h4>
<p><a href="https://github.com/cyrus-and/gdb-dashboard">GDB dashboard</a> 是一个独立的.gdbinit 文件，使用 Python API 编写，支持模块化界面，显示有关正在调试的程序的相关信息。其主要目标是减少检查当前程序状态所需的 GDB 命令数量，从而允许开发人员主要关注控制流。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.geeksforgeeks.org/gdb-step-by-step-introduction/">GDB (Step by Step Introduction)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/LUCAS004/article/details/108174437?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-108174437-blog-121535829.pc_relevant_multi_platform_whitelistv4eslandingrelevant2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-108174437-blog-121535829.pc_relevant_multi_platform_whitelistv4eslandingrelevant2&amp;utm_relevant_index=1">https://blog.csdn.net/LUCAS004/article/details/108174437?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-108174437-blog-121535829.pc_relevant_multi_platform_whitelistv4eslandingrelevant2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-108174437-blog-121535829.pc_relevant_multi_platform_whitelistv4eslandingrelevant2&amp;utm_relevant_index=1</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitee.com/mirrors_cyrus-and/gdb-dashboard">gitee gdb dashboard</a></p>
</li>
<li class="lvl-2">
<p><a href="http://jasonblog.github.io/note/gdb/183.html">http://jasonblog.github.io/note/gdb/183.html</a></p>
</li>
</ul>
<h4 id="gdb-快速打印-vector-等容器">gdb 快速打印 vector 等容器</h4>
<p>GDB 默认是不会打印 C++ 标准库的常用容器，需要通过访问容器属性（非规范命名），才能看到容器中所包含的值。这里介绍了一种 gdb 自动加载脚本，辅助打印容器内容。</p>
<p>下载<a href="https://files.cnblogs.com/linyx/dbinit_stl_views-1.03.zip">文件</a>，将之保存为～/.gdbinit 就可以使用打印命令了。</p>
<p>打印 list 用 plist 命令，打印 vector 用 pvector，依此类推。</p>
<p>相关命令如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   STL GDB evaluators/views/utilities - 1.03</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   The new GDB commands:</span></span><br><span class="line"><span class="comment">#         are entirely non instrumental</span></span><br><span class="line"><span class="comment">#         do not depend on any "inline"(s) - e.g. size(), [], etc</span></span><br><span class="line"><span class="comment">#       are extremely tolerant to debugger settings</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   This file should be "included" in .gdbinit as following:</span></span><br><span class="line"><span class="comment">#   source stl-views.gdb or just paste it into your .gdbinit file</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   The following STL containers are currently supported:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       std::vector&lt;T&gt; -- via pvector command</span></span><br><span class="line"><span class="comment">#       std::list&lt;T&gt; -- via plist or plist_member command</span></span><br><span class="line"><span class="comment">#       std::map&lt;T,T&gt; -- via pmap or pmap_member command</span></span><br><span class="line"><span class="comment">#       std::multimap&lt;T,T&gt; -- via pmap or pmap_member command</span></span><br><span class="line"><span class="comment">#       std::set&lt;T&gt; -- via pset command</span></span><br><span class="line"><span class="comment">#       std::multiset&lt;T&gt; -- via pset command</span></span><br><span class="line"><span class="comment">#       std::deque&lt;T&gt; -- via pdequeue command</span></span><br><span class="line"><span class="comment">#       std::stack&lt;T&gt; -- via pstack command</span></span><br><span class="line"><span class="comment">#       std::queue&lt;T&gt; -- via pqueue command</span></span><br><span class="line"><span class="comment">#       std::priority_queue&lt;T&gt; -- via ppqueue command</span></span><br><span class="line"><span class="comment">#       std::bitset&lt;n&gt; -- via pbitset command</span></span><br><span class="line"><span class="comment">#       std::string -- via pstring command</span></span><br><span class="line"><span class="comment">#       std::widestring -- via pwstring command</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   The end of this file contains (optional) C++ beautifiers</span></span><br><span class="line"><span class="comment">#   Make sure your debugger supports $argc</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Simple GDB Macros written by Dan Marinescu (H-PhD) - License GPL</span></span><br><span class="line"><span class="comment">#   Inspired by initial work of Tom Malnar,</span></span><br><span class="line"><span class="comment">#     Tony Novac (PhD) / Cornell / Stanford,</span></span><br><span class="line"><span class="comment">#     Gilad Mishne (PhD) and Many Many Others.</span></span><br><span class="line"><span class="comment">#   Contact: dan_c_marinescu@yahoo.com (Subject: STL)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Modified to work with g++ 4.3 by Anders Elton</span></span><br><span class="line"><span class="comment">#   Also added _member functions, that instead of printing the entire class in map, prints a member.</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">(gdb) pvector cur</span><br><span class="line">elem[0]: <span class="variable">$5</span> = 3</span><br><span class="line">elem[1]: <span class="variable">$6</span> = 9</span><br><span class="line">Vector size = 2</span><br><span class="line">Vector capacity = 2</span><br><span class="line">Element <span class="built_in">type</span> = std::allocator&lt;int&gt;::pointer</span><br></pre></td></tr></tbody></table></figure>
<h4 id="gdb-配合-vscode-调试-附加">gdb 配合 vscode 调试 / 附加</h4>
<p>linux 下 gdb 针对 core 复现及错误现场跟踪是一个非常强大的工具。配合 vscode 能够可视化的调试错误问题。</p>
<p>前置条件：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>C/C++ MS plugin</p>
</li>
<li class="lvl-2">
<p>GDB</p>
</li>
</ul>
<p>在 launch.json 文件中配置如下：</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"0.2.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"configurations"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"(gdb) Attach"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"cppdbg"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"request"</span><span class="punctuation">:</span> <span class="string">"attach"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// attach program</span></span><br><span class="line">            <span class="attr">"program"</span><span class="punctuation">:</span> <span class="string">"/usr/local/bin/python"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// select gdb tool</span></span><br><span class="line">            <span class="attr">"MIMode"</span><span class="punctuation">:</span> <span class="string">"gdb"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"setupCommands"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">{</span></span><br><span class="line">                    <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"Enable pretty-printing for gdb"</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">"text"</span><span class="punctuation">:</span> <span class="string">"-enable-pretty-printing"</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">"ignoreFailures"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">{</span></span><br><span class="line">                    <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"Set Disassembly Flavor to Intel"</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">"text"</span><span class="punctuation">:</span> <span class="string">"-gdb-set disassembly-flavor intel"</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">"ignoreFailures"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">}</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// for selecting process to attach in a moment</span></span><br><span class="line">            <span class="attr">"processId"</span><span class="punctuation">:</span> <span class="string">"${command:pickProcess}"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"(gdb) Launch"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"cppdbg"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"request"</span><span class="punctuation">:</span> <span class="string">"launch"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"program"</span><span class="punctuation">:</span> <span class="string">"/usr/local/bin/python"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"stopAtEntry"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// project folder</span></span><br><span class="line">            <span class="attr">"cwd"</span><span class="punctuation">:</span> <span class="string">"${workspaceFolder}"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"environment"</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"externalConsole"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"MIMode"</span><span class="punctuation">:</span> <span class="string">"gdb"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"setupCommands"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">{</span></span><br><span class="line">                    <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"Enable pretty-printing for gdb"</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">"text"</span><span class="punctuation">:</span> <span class="string">"-enable-pretty-printing"</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">"ignoreFailures"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">{</span></span><br><span class="line">                    <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"Set Disassembly Flavor to Intel"</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">"text"</span><span class="punctuation">:</span> <span class="string">"-gdb-set disassembly-flavor intel"</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">"ignoreFailures"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">}</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="comment">// core dump path</span></span><br><span class="line">            <span class="attr">"coreDumpPath"</span><span class="punctuation">:</span> <span class="string">"/workspace/xxxx/core.29991"</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line"></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 模板中 core 文件调试方式，即相当于：</span></span><br><span class="line">gdb /usr/local/bin/python core.29991</span><br><span class="line"><span class="comment"># 模板中 attach 方式，即相当于：</span></span><br><span class="line"><span class="built_in">cd</span> /project</span><br><span class="line">gdb -p xxxx 或 gdb xxxx 3598</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://c.biancheng.net/gdb/">http://c.biancheng.net/gdb/</a></p>
</li>
</ul>
<h4 id="gdb-搜索源码位置">gdb 搜索源码位置</h4>
<p>由于源码可能会变动，所以可能需要手动指定源码位置，方便调试时显示源码。</p>
<p>相关命令:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看编译源码x信息位置</span></span><br><span class="line">info <span class="built_in">source</span></span><br><span class="line"><span class="comment"># 查看源码搜索目录</span></span><br><span class="line">show <span class="built_in">dir</span></span><br><span class="line"><span class="comment"># gdb 指定源码移动到相应位置</span></span><br><span class="line"><span class="built_in">set</span> substitute-path from-path to-path</span><br><span class="line"><span class="comment"># 将目录加入到搜索源码路径</span></span><br><span class="line"><span class="built_in">dir</span> path-to-set</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/nicholas_duan/article/details/117515155">https://blog.csdn.net/nicholas_duan/article/details/117515155</a></p>
</li>
</ul>
<h3 id="GCC-G">GCC/G++</h3>
<p>本节主要描述有关 gcc 各个方面应用及问题。</p>
<!-- more -->
<h4 id="常用编译参数">常用编译参数</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-std=c++20</code>: 用于指定应该使用哪个 C++ 标准来编译程序</p>
</li>
<li class="lvl-2">
<p><code>-Wpedantic</code>: 告诉在遇到不符合 ISO C++ 标准的代码时发出警告。这包括一些编译器特定的扩展和一些可能导致移植性问题的代码。使用可以帮助编写更符合标准、更具有移植性的代码。</p>
</li>
<li class="lvl-2">
<p><code>-Wall</code>: 告诉启用所有的警告信息，这可以帮助发现代码中的潜在问题。然而，-Wall 并不真的启用所有的警告，只是启用了一部分被认为最有用的警告。</p>
</li>
<li class="lvl-2">
<p><code>-Wextra</code>: 告诉启用一些额外的警告信息，这些警告信息在 -Wall 中没有被启用。这些额外的警告可以帮助发现代码中的一些不常见的问题。</p>
</li>
</ul>
<h4 id="优化选项-Optimize-Options">优化选项 Optimize-Options</h4>
<h5 id="GCC优化选项">GCC 优化选项</h5>
<p>在开启编译优化的开关时，GCC 编译器的目的是：优化程序的性能和减少代码的大小，尽管会以牺牲编译时间和程序的可调试能力为代价。对于不同的优化级别开启的对应优化开关可以通过 <code>gcc -Q -O1 --help=optimizers</code> 来查看对应的开启优化列表。</p>
<h5 id="常用的优化选项">常用的优化选项</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p>-O0</p>
<p>默认的优化选项，减少编译时间和生成完整的调试信息。</p>
</li>
<li class="lvl-2">
<p>-O/-O1</p>
<p>这两个都是开启 level 1 的编译优化。开启编译优化会导致更长的编译时间，对于大函数还会消耗更多的内存空间。level1 的编译优化下，编译器会尝试减少代码段大小和优化程序的执行时间，但不执行需要消耗大量编译时间的优化。</p>
</li>
<li class="lvl-2">
<p>-O2</p>
<p>相比于 - O1，-O2 打开了更多的编译优化开关</p>
</li>
<li class="lvl-2">
<p>-O3</p>
<p>在 - O2 的基础上，level 3 的级别优化</p>
</li>
<li class="lvl-2">
<p>-Os</p>
<p>优化生成的目标文件的大小</p>
</li>
<li class="lvl-2">
<p>-Ofast</p>
<p>为了提高程序的执行速度，GCC 可以无视严格的语言标准。-Ofast 会开启所有 - O3 的编译开关，且会对不符合标准的程序进行优化。</p>
</li>
<li class="lvl-2">
<p>-Og</p>
<p>优化调试信息。相对于 - O0 生成的调试信息，-Og 是为了能够生成更好的调试信息。和 - O0 一样，-Og 选项关闭了很多优化开关。</p>
</li>
</ul>
<blockquote>
<p>[!NOTE]<br>
如果同时使用多个不同 level -O 优化选项来进行编译，编译器会根据最后一个 - O 的 level 来决定采用那种优化级别。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>-Q -v</p>
<p>输出编译器 - O 打开的优化编译选项</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// test.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CustomSigHandler</span><span class="params">(<span class="type">int</span> signum)</span> </span>{</span><br><span class="line">    std::ostringstream os;</span><br><span class="line">    os &lt;&lt; <span class="string">"Abnormal signal is triggered:"</span> &lt;&lt; signum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    std::cout &lt;&lt; os.<span class="built_in">str</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getX</span><span class="params">()</span> </span>{ <span class="keyword">return</span> x; }</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">};</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span> {</span><br><span class="line">    Point s;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>{</span><br><span class="line">    <span class="built_in">signal</span>(SIGSEGV, &amp;CustomSigHandler); <span class="comment">// handle SIGSEGV</span></span><br><span class="line">    <span class="built_in">signal</span>(SIGABRT, &amp;CustomSigHandler); <span class="comment">// handle SIGABRT</span></span><br><span class="line">    <span class="comment">// access read illegally</span></span><br><span class="line">    std::shared_ptr&lt;Line&gt; l;</span><br><span class="line">    l-&gt;s.<span class="built_in">getX</span>(); <span class="comment">// without signal emitted when set -fipa-pure-const</span></span><br><span class="line">    <span class="comment">// access read illegally</span></span><br><span class="line">    <span class="comment">// int *p=NULL;</span></span><br><span class="line">    <span class="comment">// *p=0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">g++ -O -Q -v test.cpp -o <span class="built_in">test</span> &amp;&gt; ops.out</span><br></pre></td></tr></tbody></table></figure>
</li>
<li class="lvl-2">
<p>-fno-<strong>flag</strong></p>
<p>关闭编译指定 <strong>flag</strong> 的编译选项。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">g++ -O -fno-ipa-pure-const test.cpp -o <span class="built_in">test</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li class="lvl-2">
<p>-fomit-frame-pointer</p>
<p>对于不需要帧指针的函数，不要将帧指针保存在寄存器中。这避免了保存、设置和恢复帧指针的指令；它还为许多函数提供了一个额外的寄存器。这也使得在某些机器上无法进行调试。<a href="https://stackoverflow.com/questions/14666665/trying-to-understand-gcc-option-fomit-frame-pointer">参考</a></p>
</li>
</ul>
<h5 id="参考">参考</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gcc.gnu.org/onlinedocs/">GCC online documentation</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gcc.gnu.org/onlinedocs/gcc-10.4.0/gcc/Optimize-Options.html#Optimize-Options">GCC 10.4 Optimze-Options</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.zhihu.com/question/27090458/answer/35226469">GCC 优化选项</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/jinchengzhou/article/details/120703911?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-120703911-blog-47343201.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-1-120703911-blog-47343201.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=2">编译选项 csdn 参考</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.stubbornhuang.com/2096/">个人博客参考 1</a></p>
</li>
</ul>
<h4 id="GCC调试选项">GCC 调试选项</h4>
<p>GCC 允许将 - g 与 - O 配合使用。GCC 开启优化编译选项的结果有时可能会令人惊讶：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>声明的某些变量可能被删除；</p>
</li>
<li class="lvl-2">
<p>控制流走到意想不到的位置；</p>
</li>
<li class="lvl-2">
<p>有些语句可能不会执行，因为它们计算的是常量结果或它们的值已经在手边；</p>
</li>
<li class="lvl-2">
<p>有些语句可能会在不同的位置执行，因为它们已经移出了循环。</p>
</li>
<li class="lvl-2">
<p>GCC 允许编译时添加额外的调试信息，以便程序进行调试，大部分情况下，需要编译选项 - g 就可以满足调试需求。</p>
</li>
</ul>
<p>如果<strong>没有使用其他优化选项，请考虑将 - Og 与 - g 一起使用</strong>。在完全没有 - O 选项的情况下，一些编译器收集对调试有用的信息根本不会运行，因此 - Og 可能会带来更好的调试体验。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>g0：不生成调试信息，相当于没有使用 - g；</p>
</li>
<li class="lvl-2">
<p>g1：生成最小的调试信息，足够在不打算调试的程序中进行堆栈查看。最小调试信息包括函数描述，外部变量，行数表，但不包括局部变量信息。</p>
</li>
<li class="lvl-2">
<p>g2：默认 - g 的调试级别；</p>
</li>
<li class="lvl-2">
<p>g3：相对 - g，生成额外的信息，例如所有的宏定义；</p>
</li>
</ul>
<blockquote>
<p>[!NOTE]<br>
和 - O 一样，如果多个级别的 - g 选项同时存在，最后的选项会被生效</p>
</blockquote>
<blockquote>
<p>[!TIP]<br>
综上，很多项目的线上版本都是使用”-O2 -g” 的编译选项进行编译，以便发生问题的时候容易定位。但这有一个很大的弊端就是目标文件会比不开启调试信息的情况下大很多，所以一般对外发布的软件都是不含有调试信息的 Release 版本，同时也会发布含有调试信息的 debug 版本，两者的性能是一样的只是 debug 多了调试信息而已。</p>
</blockquote>
<h3 id="Clang-Clang">Clang/Clang++</h3>
<h4 id="常用编译参数-2">常用编译参数</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-std=c++20</code>: 同 gcc</p>
</li>
<li class="lvl-2">
<p><code>-Wpedantic</code>: 同 gcc</p>
</li>
<li class="lvl-2">
<p><code>-Wall</code>: 同 gcc</p>
</li>
<li class="lvl-2">
<p><code>-Wextra</code>: 同 gcc</p>
</li>
</ul>
<h2 id="Jupyter">Jupyter</h2>
<p>使用 <a href="https://www.youtube.com/watch?v=MtKdza3RJNM">Jupyter</a> 编写丰富的可执行的富文档。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Local setup</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mamba create -n cling</span><br><span class="line">mamba install xeus-cling -c conda-forge</span><br><span class="line">mamba install xeus -c conda-forge</span><br><span class="line">mamba activate cling</span><br><span class="line"></span><br><span class="line">jupter notebook</span><br><span class="line">jupter lab</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Docs">Docs</h2>
<h3 id="sphinx">sphinx</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://devblogs.microsoft.com/cppblog/clear-functional-c-documentation-with-sphinx-breathe-doxygen-cmake/">sphinx 配置过程 blog</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/k0ekk0ek/cmake-sphinx/blob/master/CMakeLists.txt">sphinx cmake 模块</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.sphinx-doc.org/en/master/usage/quickstart.html">https://www.sphinx-doc.org/en/master/usage/quickstart.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.sphinx-doc.org/en/master/usage/configuration.html">https://www.sphinx-doc.org/en/master/usage/configuration.html</a></p>
</li>
</ul>
<h3 id="Doxygen">Doxygen</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.doxygen.nl/manual/commands.html">https://www.doxygen.nl/manual/commands.html</a></p>
</li>
</ul>
<h4 id="注释特殊标记">注释特殊标记</h4>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 标记代码</span></span><br><span class="line">\code{.unparsed}</span><br><span class="line">Show <span class="keyword">this</span> as-is please</span><br><span class="line">\endcode</span><br><span class="line"></span><br><span class="line">\code{.sh}</span><br><span class="line">echo <span class="string">"This is a shell script"</span></span><br><span class="line">\endcode</span><br><span class="line"></span><br><span class="line">\code{.py}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Python</span>:</span><br><span class="line">    pass</span><br><span class="line">\endcode</span><br><span class="line"></span><br><span class="line">\code{.cpp}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cpp</span> {};</span><br><span class="line">\endcode</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Coverage">Coverage</h2>
<p>对 C/C++ 项目进行代码覆盖率的度量</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>gcov</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://zhuanlan.zhihu.com/p/402463278">https://zhuanlan.zhihu.com/p/402463278</a></li>
<li class="lvl-4"><a href="https://wiki.documentfoundation.org/Development/Lcov">https://wiki.documentfoundation.org/Development/Lcov</a></li>
<li class="lvl-4"><a href="https://medium.com/@naveen.maltesh/generating-code-coverage-report-using-gnu-gcov-lcov-ee54a4de3f11">https://medium.com/@naveen.maltesh/generating-code-coverage-report-using-gnu-gcov-lcov-ee54a4de3f11</a></li>
<li class="lvl-4"><a href="https://gcc.gnu.org/onlinedocs/gcc/Invoking-Gcov.html">https://gcc.gnu.org/onlinedocs/gcc/Invoking-Gcov.html</a></li>
<li class="lvl-4"><a href="https://blog.csdn.net/yanxiangyfg/article/details/80989680">https://blog.csdn.net/yanxiangyfg/article/details/80989680</a></li>
<li class="lvl-4"><a href="https://manpages.ubuntu.com/manpages/bionic/man1/gcov-8.1.html">https://manpages.ubuntu.com/manpages/bionic/man1/gcov-8.1.html</a></li>
<li class="lvl-4"><a href="https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#Instrumentation-Options">https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html#Instrumentation-Options</a></li>
<li class="lvl-4"><a href="https://developer.aliyun.com/article/672040?spm=a2c6h.12873639.article-detail.48.7baa5576DTZmVN&amp;scm=20140722.ID_community@@article@@672040._.ID_community@@article@@672040-OR_rec-V_1">C++ 语言的单元测试与代码覆盖率 - 阿里云开发者社区 (aliyun.com)</a></li>
</ul>
</li>
<li class="lvl-2">
<p>llvm</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-gcov">https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-gcov</a></li>
<li class="lvl-4"><a href="https://www.jetbrains.com/help/clion/code-coverage-clion.html#compiler-flags">https://www.jetbrains.com/help/clion/code-coverage-clion.html#compiler-flags</a></li>
<li class="lvl-4"><a href="https://clang.llvm.org/docs/SourceBasedCodeCoverage.html#id1">https://clang.llvm.org/docs/SourceBasedCodeCoverage.html#id1</a></li>
<li class="lvl-4"><a href="https://stackoverflow.com/questions/58400297/trying-to-view-code-coverage-with-llvm-cov">https://stackoverflow.com/questions/58400297/trying-to-view-code-coverage-with-llvm-cov</a></li>
<li class="lvl-4"><a href="https://marco-c.github.io/2018/01/09/code-coverage-with-clang-on-windows.html">https://marco-c.github.io/2018/01/09/code-coverage-with-clang-on-windows.html</a></li>
<li class="lvl-4"><a href="http://www.stablecoder.ca/2018/01/15/code-coverage.html">http://www.stablecoder.ca/2018/01/15/code-coverage.html</a></li>
<li class="lvl-4"><a href="http://logan.tw/posts/2015/04/28/check-code-coverage-with-clang-and-lcov/">http://logan.tw/posts/2015/04/28/check-code-coverage-with-clang-and-lcov/</a></li>
</ul>
</li>
</ul>
<h3 id="QA">QA</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/72985855/libgcov-profiling-error-overwriting-an-existing-profile-data-with-a-different">libgcov-profiling-error-overwriting-an-existing-profile-data-with-a-different</a></p>
</li>
</ul>
<h3 id="配置原理">配置原理</h3>
<h4 id="编译参数">编译参数</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>GNU：</p>
<ul class="lvl-2">
<li class="lvl-4">compile options: -fprofile-arcs -ftest-coverage</li>
<li class="lvl-4">link options: -fprofile-arcs</li>
<li class="lvl-4">link lib: gcov</li>
</ul>
</li>
<li class="lvl-2">
<p>Clang:</p>
<ul class="lvl-2">
<li class="lvl-4">compile options: -fprofile-instr-generate -fcoverage-mapping --coverage (或 - fprofile-arcs -ftest-coverage)</li>
<li class="lvl-4">link options: -fprofile-instr-generate -fcoverage-mapping</li>
</ul>
</li>
<li class="lvl-2">
<p>Windows:</p>
<ul class="lvl-2">
<li class="lvl-4">opencppcoverage/vstest.console.exe</li>
</ul>
</li>
</ul>
<blockquote>
<p>[!TIP]<br>
-fprofile-arcs -ftest-coverage: gcov required</p>
</blockquote>
<blockquote>
<p>[!TIP]<br>
-fprofile-instr-generate -fcoverage-mapping: llvm-cov</p>
</blockquote>
<h4 id="生成">生成</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>GNU 方式一，使用 gcov 作为媒介</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Install lcov(genhtml in inclusion)</span></span><br><span class="line">apt/yum install lcov</span><br><span class="line"><span class="comment"># Run gcov and generate coverage file *.gcov</span></span><br><span class="line">gcov &lt;sources&gt; -s &lt;some exclusion <span class="built_in">dir</span>&gt;</span><br><span class="line"><span class="comment"># 根据 *.gcov 生成 coverage.info 数据文件</span></span><br><span class="line"><span class="comment"># -rc genhtml_branch_coverage=1 打开默认禁用的分支覆盖率计算</span></span><br><span class="line">lcov --rc lcov_branch_coverage=1 --capture --directory &lt;*.gcov file <span class="built_in">dir</span>&gt; --output-file coverage.info.tmp</span><br><span class="line">lcov --rc lcov_branch_coverage=1  -e coverage.info.tmp <span class="string">"*src*"</span> -o coverage.info</span><br><span class="line"><span class="comment"># 根据 coverage.info 这个数据文件生成 html 报告</span></span><br><span class="line">genhtml -rc genhtml_branch_coverage=1 coverage.info --output-directory out</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>GNU 方式二，单独依赖 lcov（间接使用 gcov ）</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Install lcov(genhtml in inclusion)</span></span><br><span class="line">apt/yum install lcov</span><br><span class="line"><span class="comment"># Lcov initial/baseline lcov</span></span><br><span class="line">lcov --no-external --rc lcov_branch_coverage=1 --capture --initial --directory &lt;<span class="built_in">source</span> <span class="built_in">dir</span>&gt; --output-file coverage_base.info</span><br><span class="line"><span class="comment"># Run test and lcov again after tests/checks complete</span></span><br><span class="line">lcov --no-external --rc lcov_branch_coverage=1 --capture --directory &lt;<span class="built_in">source</span> <span class="built_in">dir</span>&gt; --output-file coverage_test.info</span><br><span class="line"><span class="comment"># Combine lcov tracefiles</span></span><br><span class="line">lcov --add-tracefile coverage_base.info --add-tracefile coverage_test.info --output-file coverage.info</span><br><span class="line"><span class="comment"># Remove / filter out remaining unwanted stuff from tracefile</span></span><br><span class="line">lcov --remove coverage.info <span class="string">'/usr/include/*'</span> <span class="string">'/usr/lib/*'</span> ...&lt;some other <span class="built_in">dirs</span>&gt; -o coverage_final.info</span><br><span class="line">genhtml -rc genhtml_branch_coverage=1 coverage_final.info --output-directory out</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>Clang</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Run test and generate *.profraw</span></span><br><span class="line">./executable_test</span><br><span class="line"><span class="comment"># Merge *.profraw to on merged.profraw</span></span><br><span class="line">llvm-profdata merge -sparse *.profraw -o merged.profdata</span><br><span class="line"><span class="comment"># Generate coverage</span></span><br><span class="line">llvm-cov show --instr-profile=merged.profdata -object=./executable_test -show-line-counts-or-regions -output-dir=./all-merged -format=<span class="string">"html"</span>-ignore-filename-regex=<span class="string">'/usr/include/*'</span></span><br><span class="line"><span class="comment"># report to console</span></span><br><span class="line">llvm-cov report --instr-profile=merged.profdata -object=./executable_test -show-line-counts-or-regions -output-dir=./all-merged -format=<span class="string">"html"</span>-ignore-filename-regex=<span class="string">'/usr/include/*'</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>Windows</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vstest.console.exe *.dll /EnableCodeCoverage /Collect:<span class="string">"Code Coverage;Format=Xml"</span> /ResultsDirectory:<span class="string">"&lt;coverage result dir&gt;"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="集成三方">集成三方</h3>
<p>测试集成三方</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.sonarqube.org/latest/analyzing-source-code/test-coverage/c-family-test-coverage/">Sonar</a></p>
</li>
<li class="lvl-2">
<p><a href="https://my.cdash.org">CDash</a></p>
<ul class="lvl-2">
<li class="lvl-4">ctest <a href="https://cmake.org/cmake/help/latest/manual/ctest.1.html#ctest-coverage-step">https://cmake.org/cmake/help/latest/manual/ctest.1.html#ctest-coverage-step</a></li>
<li class="lvl-4">ctest scripts <a href="https://cmake.org/cmake/help/latest/module/CTestCoverageCollectGCOV.html">https://cmake.org/cmake/help/latest/module/CTestCoverageCollectGCOV.html</a></li>
<li class="lvl-4">cmake scripts <a href="https://github.com/StableCoder/cmake-scripts">https://github.com/StableCoder/cmake-scripts</a></li>
</ul>
</li>
<li class="lvl-2">
<p>GitLab</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://gitlab.com/gitlab-de/use-cases/coverage-reports/gitlab-test-coverage-googletest-cmake-gcov">gitlab-test-coverage-googletest-cmake-gcov · GitLab</a></li>
<li class="lvl-4"><a href="https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization.html#cc-example">GitLab cc example</a></li>
</ul>
</li>
</ul>
<h3 id="CMake-示例">CMake 示例</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake">https://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake</a></p>
</li>
</ul>
<h2 id="Program">Program</h2>
<p>这张图片展示了 ELF 加载到内存的一个数据结构关系。<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230414/094944873.jpg" alt="elf loaded to the memory"></p>
<h3 id="Linux-Program-内存模型">Linux Program 内存模型</h3>
<p>Linux 的 ELF 内存模型。ELF（Executable and Linkable Format）是一种可执行文件格式，常用于 Linux 系统中的可执行文件、共享库等。ELF 文件在内存中的布局由 ELF 头、程序头表、节区头表和节区数据组成。其中，程序头表描述了 ELF 文件在内存中的布局，包括代码段、数据段、BSS 段等。节区头表描述了 ELF 文件中各个节区的信息，如名称、大小、偏移量等。节区数据则包含了 ELF 文件中各个节区的实际数据。</p>
<p>在 Linux 中，每个进程都有自己的虚拟地址空间，其中包括代码段、数据段、堆、栈等。当一个 ELF 文件被加载到内存中时，它的各个节区数据会被映射到进程的虚拟地址空间中相应的位置。例如，代码段会被映射到进程的代码段区域，数据段会被映射到进程的数据段区域。由于每个进程都有自己的虚拟地址空间，因此不同进程中同一 ELF 文件的虚拟地址空间布局可能会不同。</p>
<!--
https://tinylab-1.gitbook.io/cbook/02-chapter4
https://zhuanlan.zhihu.com/p/607142856?utm_campaign=shareopn&utm_medium=social&utm_oi=929703030027243520&utm_psn=1628092769049853952&utm_source=wechat_session
-->
<h2 id="Assembly">Assembly</h2>
<p>Assembly language is a low-level programming language that is specific to a particular computer architecture. It is often used for system-level programming, such as operating systems, device drivers, and embedded systems.</p>
<h3 id="常用工具">常用工具</h3>
<p>学习 Assembly 的 C/C++ 超级工具 <a href="https://godbolt.org"><strong>Godbolt</strong></a></p>
<blockquote>
<p>[!TIP]<br>
Godbolt is a web-based tool that allows you to see the assembly code generated by different compilers for a given piece of code. It can be useful for understanding how your code is translated into machine code and for optimizing your code for a specific architecture.</p>
</blockquote>
<h3 id="寄存器">寄存器</h3>
<p><strong>RSP</strong>: The rsp register in x86-64 assembly language is the stack pointer register and is used to keep track of the top of the stack. The stack is a region of memory that is used to store temporary data, such as function parameters and local variables.</p>
<blockquote>
<p>[!TIP1] When a function is called, the <code>rsp</code> register is decremented to allocate space on the stack for the function’s parameters and local variables. When the function returns, the rsp register is incremented to deallocate the stack space that was used by the function.</p>
</blockquote>
<blockquote>
<p>[!TIP2] To allocate 4 bytes in assembly, you can use the <code>sub</code> instruction to decrement the stack pointer register (<code>rsp</code>) by 4 bytes. This will allocate 4 bytes of space on the stack for temporary data, such as function parameters or local variables.</p>
</blockquote>
<p>Here is an example of how to allocate 4 bytes in x86-64 assembly language:</p>
<figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">sub</span> rsp, <span class="number">4</span> <span class="comment">; allocate 4 bytes on the stack</span></span><br></pre></td></tr></tbody></table></figure>
<p>This instruction decrements the value of rsp by 4, effectively allocating 4 bytes of space on the stack. To deallocate the space when it is no longer needed, you can use the add instruction to increment the value of rsp by the same amount:</p>
<figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">add</span> rsp, <span class="number">4</span> <span class="comment">; deallocate 4 bytes from the stack</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>RBP</strong>: The rbp register in x86-64 assembly language is the base pointer register and is used to access function parameters and local variables relative to the current stack frame.</p>
<blockquote>
<p>[!TIP]<br>
At the beginning of a function, the instructions <code>push rbp</code> and <code>mov rbp, rsp</code> are commonly used to set up the function’s stack frame. <code>push rbp</code> pushes the value of the previous stack frame’s base pointer onto the stack, and <code>mov rbp, rsp</code> moves the value of the stack pointer register into the base pointer register, effectively <strong>creating a new stack frame for the current function</strong>.</p>
</blockquote>
<blockquote>
<p>[!TIP2]<br>
By using the rbp register to access function parameters and local variables, the function can allocate space on the stack for its own variables and use the base pointer register to access them.</p>
</blockquote>
<p><strong>RDI</strong>: The rdi register is one of the general-purpose registers in the x86-64 architecture, and it is typically used to pass the first argument to a function.</p>
<p><strong>RSI</strong>: The rsi register is another general-purpose register in the x86-64 architecture, and it is typically used to pass the second argument to a function.</p>
<blockquote>
<p>[!TIP]<br>
The instruction <code>mov QWORD PTR [rbp-8], rdi</code> is a move instruction in assembly language. It moves the value in the rdi register, which is the first argument to the function, into the memory location at [rbp-8], which is a local variable on the stack.</p>
</blockquote>
<p><strong>RAX</strong>: The rax register is one of the general-purpose registers in the x86-64 architecture, and it is typically used to hold the return value of a function.</p>
<blockquote>
<p>[!TIP]<br>
The instruction <code>mov rax, QWORD PTR [rbp-8]</code> is a move instruction in assembly language. It moves the value in the memory location at [rbp-8], which is a local variable on the stack, into the rax register for later use in the function.</p>
</blockquote>
<p><strong>EDX/EAX</strong>: The edx/eax register is one of the general-purpose registers in the x86-64 architecture, and it is typically used to hold a 32-bit value.</p>
<p><strong>RBX</strong>: The rbx register in x86-64 assembly language is one of the general-purpose registers that can be used to hold data or memory addresses. It is a 64-bit register, so it can hold values between 0 and 2^64-1.</p>
<h3 id="指令">指令</h3>
<p>As for common assembly instructions, there are many different instructions that can be used depending on the architecture and the specific task at hand. However, some common instructions include:</p>
<p><strong>MOV</strong>: This instruction moves data from one location to another. For example, <code>MOV EAX, 5</code> moves the value 5 into the EAX register.</p>
<p><strong>ADD/SUB</strong>: These instructions perform addition and subtraction operations. For example, <code>ADD EAX, EBX</code> adds the value in the EBX register to the value in the EAX register.</p>
<p><strong>CMP</strong>: This instruction compares two values and sets flags based on the result. For example, <code>CMP EAX, EBX</code> compares the values in the EAX and EBX registers and sets flags based on whether EAX is greater than, less than, or equal to EBX.</p>
<p><strong>JMP</strong>: This instruction jumps to a different location in the code. For example, <code>JMP label</code> jumps to the location labeled “label”.</p>
<p><strong>CALL/RET</strong>: These instructions are used for function calls and returns. CALL function calls the function at the specified location, and RET returns from a function.</p>
<p>DD in the .data section of an assembly program stands for “define doubleword”. A doubleword is a 32-bit value, which is equivalent to 4 bytes. The dd directive is used to reserve space in memory for a variable and initialize it to a specific value.</p>
<p>下面是一些完整示例：</p>
<figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">; Here is an example program that uses the MOV instruction to move the value 5 into the EAX register, adds the value in the EBX register to the value in the EAX register using the ADD instruction, and then returns the result:</span></span><br><span class="line"><span class="symbol">global</span> _start</span><br><span class="line"></span><br><span class="line"><span class="symbol">section</span> <span class="meta">.text</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="comment">; Move 5 into EAX</span></span><br><span class="line">    <span class="keyword">MOV</span> EAX, <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">; Add EBX to EAX</span></span><br><span class="line">    <span class="keyword">ADD</span> EAX, EBX</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Exit program with EAX as return value</span></span><br><span class="line">    <span class="comment">; The reason we use the following code to exit a program in assembly language is because it is a convention that has been established for Linux systems. The INT instruction with the value 0x80 is used to make a system call to the kernel. The kernel then interprets the value in the EAX register as the system call number and performs the appropriate action. In this case, the system call number is 1, which corresponds to the exit system call. The value in the EBX register is used as the exit status of the program. By convention, a value of 0 indicates success, while any other value indicates an error. Therefore, the MOV EBX, 0 instruction is used to set the EBX register to 0 before exiting the program with a return value of 0 in the EAX register.</span></span><br><span class="line">    <span class="keyword">MOV</span> EBX, <span class="number">0</span></span><br><span class="line">    <span class="comment">; For notifying the kernel to end the system call</span></span><br><span class="line">    <span class="keyword">MOV</span> EAX, <span class="number">1</span></span><br><span class="line">    INT <span class="number">0x80</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">; Here is another example program that uses the CMP instruction to compare the values in the EAX and EBX registers and then jumps to a different location in the code based on the result:</span></span><br><span class="line"><span class="symbol">global</span> _start</span><br><span class="line"></span><br><span class="line"><span class="symbol">section</span> <span class="meta">.text</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="comment">; Compare EAX and EBX</span></span><br><span class="line">    <span class="keyword">CMP</span> EAX, EBX</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Jump to label1 if EAX is greater than EBX</span></span><br><span class="line">    JG label1</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Jump to label2 if EAX is less than EBX</span></span><br><span class="line">    JL label2</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Jump to label3 if EAX is equal to EBX</span></span><br><span class="line">    JE label3</span><br><span class="line"></span><br><span class="line"><span class="symbol">label1:</span></span><br><span class="line">    <span class="comment">; Code to execute if EAX is greater than EBX</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Jump to end of program</span></span><br><span class="line">    JMP <span class="meta">end</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">label2:</span></span><br><span class="line">    <span class="comment">; Code to execute if EAX is less than EBX</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Jump to end of program</span></span><br><span class="line">    JMP <span class="meta">end</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">label3:</span></span><br><span class="line">    <span class="comment">; Code to execute if EAX is equal to EBX</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Jump to end of program</span></span><br><span class="line">    JMP <span class="meta">end</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">end:</span></span><br><span class="line">    <span class="comment">; Exit program with EAX as return value</span></span><br><span class="line">    <span class="keyword">MOV</span> EBX, <span class="number">0</span></span><br><span class="line">    <span class="keyword">MOV</span> EAX, <span class="number">1</span></span><br><span class="line">    INT <span class="number">0x80</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight armasm"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">; To write an assembly program that adds two numbers, you can use the ADD instruction.</span></span><br><span class="line"><span class="symbol">section</span> <span class="meta">.data</span></span><br><span class="line">    <span class="comment">; define three variables in the .data section: num1, num2, and result. The dd directive is used to reserve space for each variable and initialize it to a specific value. num1 is initialized to 10, num2 is initialized to 20, and result is initialized to 0.</span></span><br><span class="line">    num1 dd <span class="number">10</span></span><br><span class="line">    num2 dd <span class="number">20</span></span><br><span class="line">    result dd <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">section</span> <span class="meta">.text</span></span><br><span class="line">    <span class="meta">global</span> _start</span><br><span class="line"></span><br><span class="line"><span class="symbol">_start:</span></span><br><span class="line">    <span class="comment">; Move num1 into EAX</span></span><br><span class="line">    <span class="keyword">mov</span> eax, [num1]</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Add num2 to EAX</span></span><br><span class="line">    <span class="keyword">add</span> eax, [num2]</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Move the result into result variable</span></span><br><span class="line">    <span class="keyword">mov</span> [result], eax</span><br><span class="line"></span><br><span class="line">    <span class="comment">; Exit the program with a return value of 0</span></span><br><span class="line">    <span class="keyword">mov</span> ebx, <span class="number">0</span></span><br><span class="line">    <span class="keyword">mov</span> eax, <span class="number">1</span></span><br><span class="line">    int <span class="number">0x80</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="arm-assembly">arm assembly</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=kKtWsuuJEDs&amp;list=PLn_It163He32Ujm-l_czgEBhbJjOUgFhg">https://www.youtube.com/watch?v=kKtWsuuJEDs&amp;list=PLn_It163He32Ujm-l_czgEBhbJjOUgFhg</a></p>
</li>
</ul>
<h2 id="C">C</h2>
<h3 id="C-内存管理">C 内存管理</h3>
<h4 id="API">API</h4>
<p>C 语言主要提供 <code>malloc</code>、<code>realloc</code>、<code>calloc</code>、<code>alloca</code> 与 <code>aligned_alloc</code> 等内存分配函数来实现对内存的分配功能。</p>
<h4 id="malloc">malloc</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">malloc</span> <span class="params">(<span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>该函数用于从堆中分配内存空间，内存分配大小为 size。如果内存分配成功，则返回首地址；如果内存分配失败，则返回 NULL。</p>
<h4 id="calloc">calloc</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">calloc</span> <span class="params">(<span class="type">size_t</span> num, <span class="type">size_t</span> size )</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>该函数用于从堆中分配 <code>num</code> 个相邻的内存单元，每个内存单元的大小为 <code>size</code>。如果内存分配成功则返回第一个内存单元的首地址；否则内存分配失败，则返回 <code>NULL</code>。从功能上看，<code>calloc</code> 函数与语句 <code>malloc（num*size)</code> 的效果极其相似。但不同的是，在使用 <code>calloc</code> 函数分配内存时，会将内存内容初始化为 0。</p>
<h4 id="realloc">realloc</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">realloc</span> <span class="params">(<span class="type">void</span> * ptr, <span class="type">size_t</span> size )</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>该函数用于更改已经配置的内存空间，它同样是从堆中分配内存的。当程序需要扩大一块内存空间时，<code>realloc</code> 函数<strong>试图直接从堆上当前内存段后面的字节中获得更多的内存空</strong><br>
<strong>间</strong>，即它将首先判断当前的指针是否有足够的连续存储空间，如果有，则扩大 <code>ptr</code> 指向的地址，并且将 <code>ptr</code> 返回（返回原指针）；如果当前内存段后面的空闲字节不够，那么将先按照 <code>size</code> 指定的大小分配空间（使用堆上第一个能够满足这一要求的内存块），并将原有数据从头到尾拷贝到新分配的内存区域，然后释放原来 <code>ptr</code> 所指内存区域，同时返回新分配的内存区域的首地址，即重新分配存储器块的地址。</p>
<p>需要注意的是，参数 <code>ptr</code> 为指向先前由 <code>malloc</code>、<code>calloc</code> 与 <code>realloc</code> 函数所返回的内存指针，而参数 <code>size</code> 为新分配的内存大小，其值可比原内存大或小。其中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果 <code>size</code> 值比原分配的内存空间小，内存内容不会改变（即新内存保持原内存的内容），且返回的指针为原来内存的首地址（即 <code>ptr</code>）。</p>
</li>
<li class="lvl-2">
<p>如果 <code>size</code> 值比原分配的内存空间大，则 <code>realloc</code> 不一定会返回原来的指针，原内存的内容保持不变，但新多出的内存则设为初始值。</p>
</li>
<li class="lvl-2">
<p>最后，如果内存分配成功，则返回首地址；如果内存分配失败，则返回 <code>NULL</code>。</p>
</li>
</ul>
<h4 id="alloca">alloca</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">alloca</span> <span class="params">(<span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>相对与 <code>malloc</code>、<code>calloc</code> 与 <code>realloc</code> 函数，函数 <code>alloca</code> 是<strong>从栈中分配内存空间</strong>，内存分配大小为 <code>size</code>。如果内存分配成功，则返回首地址；如果内存分配失败，则返回 <code>NULL</code>。也正因为函数 <code>alloca</code> 是从栈中分配内存空间，因此它会自动释放内存空间，而无需手动释放。</p>
<h4 id="aligned-alloc">aligned_alloc</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> * <span class="title function_">aligned_alloc</span> <span class="params">(<span class="type">size_t</span> alignment,<span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></tbody></table></figure>
<p>该函数属于 <strong>C11 标准</strong>提供的新函数，用于<strong>边界对齐的动态内存分配</strong>。该函数按照参数 <code>alignment</code> 规定的对齐方式为对象进行动态存储分配 <code>size</code> 个 <code>size_t</code> 类型的存储单元。如果内存分配成功，则返回首地址；否则内存分配失败，则返回 <code>NULL</code>。</p>
<p>相对于 <code>malloc</code> 函数，<code>aligned_alloc</code> 函数保证了返回的地址是能对齐的，同时也要求 size 参数是 <code>alignment</code> 参数的整数倍。从表面上看，函数 <code>calloc</code> 相对 <code>malloc</code> 更接近 <code>aligned_alloc</code>，但 <code>calloc</code> 函数比 <code>aligned_alloc</code> 函数多了一个动作，那就是会将内存内容初始化为 <code>0</code>。</p>
<h4 id="内存分配函数的返回值">内存分配函数的返回值</h4>
<table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">成功返回</th>
<th style="text-align:center">失败返回</th>
<th style="text-align:center"> errno</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">malloc</td>
<td style="text-align:center"> 指向被分配内存的指针</td>
<td style="text-align:center"> NULL</td>
<td style="text-align:center">ENOMEM</td>
</tr>
<tr>
<td style="text-align:center">aligned_alloc</td>
<td style="text-align:center"> 指向被分配内存的指针</td>
<td style="text-align:center"> NULL</td>
<td style="text-align:center">ENOMEM</td>
</tr>
<tr>
<td style="text-align:center">calloc</td>
<td style="text-align:center"> 指向被分配内存的指针</td>
<td style="text-align:center"> NULL</td>
<td style="text-align:center">ENOMEM</td>
</tr>
<tr>
<td style="text-align:center">realloc</td>
<td style="text-align:center"> 指向重新分配内存的指针</td>
<td style="text-align:center"> NULL</td>
<td style="text-align:center">ENOMEM</td>
</tr>
</tbody>
</table>
<p>在调用表 1 中的这些内存分配函数时，必须进行返回值检查，以便能够及时得到内存分配是否成功与失败（如果分配失败则返回 <code>NULL</code> 指针），这样也可以避免因为内存分配错误而导致的不可预知和意外程序行为发生，如下面的示例代码所示：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">char</span> *p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*处理内存分配错误，并返回错误状态*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>除通过使用 <code>“if（p==NULL）”</code> 或者 <code>“if（p！=NULL）”</code> 语句进行简单防错处理之外，如果指针 <code>p</code> 是函数的参数，那么还可以在函数的入口处用 <code>assert(p !=NULL)</code> 进行检查，从而避免发生内存分配未成功却使用了它的情况。</p>
<h4 id="内存资源的分配与释放">内存资源的分配与释放</h4>
<p>内存资源的分配与释放应该限定在同一模块或者同一抽象层内进行，在 C 语言中，如果内存的分配和释放在不同的模块或抽象层内，不仅会加大程序员追踪内存块生命周期的负担，而且可能会导致内存泄漏、内存双重释放（<code>double-free</code>）、非法访问已经释放的内存、写入已释放或未分配的内存区域等问题。看下面一段示例代码：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MIN_MEM_SIZE 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">CompareMemorySize</span><span class="params">(<span class="type">char</span> *p, <span class="type">size_t</span> size)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (size &lt; MIN_MEM_SIZE)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">AllocMemory</span><span class="params">(<span class="type">size_t</span> size)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> *p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/*...*/</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (CompareMemorySize(p, size) == <span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>在上面的示例代码中，p 的内存是在 <code>AllocMemory</code> 函数中进行分配的，然后再将它通过语句 “<code>CompareMemorySize(p,size)</code>” 传给 <code>CompareMemorySize</code> 函数。在 <code>CompareMemorySize</code> 函数中，首先通过语句 “<code>if(size&lt;MIN_MEM_SIZE)</code>” 检查 <code>p</code> 所分配的内存长度，如果内存长度小于最小值 <code>(MIN_MEM_SIZE)</code>，则释放 <code>p</code>。</p>
<p>然后，再将 <code>CompareMemorySize</code> 函数的返回值 “<code>-1</code>” 返回给调用者 <code>AllocMemory</code> 函数。在 <code>AllocMemory</code> 函数中执行语句 “<code>if(CompareMemorySize(p,size)==-1)</code>” 条件成立，<strong>再次释放 p</strong>。</p>
<p>很显然，这样不仅违背了 “内存资源的分配与释放应该限定在同一模块或者同一抽象层内进行” 的原则，同时导致了内存的双重释放。因此，需要对代码做如下修改：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MIN_MEM_SIZE 10</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">CompareMemorySize</span><span class="params">(<span class="type">size_t</span> size)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (size &lt; MIN_MEM_SIZE)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="type">void</span> <span class="title function_">AllocMemory</span><span class="params">(<span class="type">size_t</span> size)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> *p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/*...*/</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (CompareMemorySize(size) == <span class="number">-1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>现在，函数 <code>CompareMemorySize</code> 与 <code>AllocMemory</code> 的职责很清楚了。其中，<code>CompareMemorySize</code> 函数只负责检查内存分配的长度，而内存的分配与释放都放在 <code>AllocMemory</code> 函数内进行。这样不仅不会导致内存的双重释放，而且完全遵从 “<strong>内存资源的分配与释放应该限定在同一模块或者同一抽象层内进行</strong>” 原则。</p>
<h4 id="返回指针进行强制类型转换">返回指针进行强制类型转换</h4>
<p>在 C 语言中，“<code>void</code>” 被称为 “无类型”，而 “<code>void*</code>” 则被称为 “无类型指针”。之所以称 “<code>void*</code>” 为 “无类型指针”，是因为它<code>可以指向任何数据类型</code>。因此，对于任何类型 “<code>T</code>” 都可以转换为 “<code>void</code><em>”，而 “`void</em> 也可以转换为任何类型 “T*”。</p>
<p>也正是因为 “<code>void</code>” 的这个特征，它常被用在如下两个方面：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对函数返回的限定，即如果函数没有返回值，那么应将其声明为 <code>void</code> 类型。</p>
</li>
<li class="lvl-2">
<p>对函数参数的限定，即如果函数无参数，那么声明函数参数为 <code>void</code>。</p>
</li>
</ul>
<p>当然，内存管理函数也不例外，如 <code>malloc</code>、<code>realloc</code>、<code>calloc</code>、<code>alloca</code> 与 <code>aligned_alloc</code> 函数的返回都是 <code>void*</code> 类型。但需要特别注意的是，在使用这些内存管理函数进行内存分配时，必须将返回类型 <code>void*</code> 强制转换为指向被分配类型的指针。如下面的代码所示：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">char</span> *p = (<span class="type">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br></pre></td></tr></tbody></table></figure>
<p>当然，为了能够简单调用，也可以将 malloc 函数使用 define 定义成如下形式：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MALLOC(type) ((type *)malloc(sizeof(type)))</span></span><br><span class="line"><span class="comment">/*或者*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MALLOC(number,type) ((type *)malloc((number) * sizeof(type)))</span></span><br></pre></td></tr></tbody></table></figure>
<p>现在，调用就简单多了，如下面的代码所示：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">char</span> *p = MALLOC(<span class="type">char</span>);</span><br><span class="line"><span class="comment">/*或者*/</span></span><br><span class="line"><span class="type">char</span> *p = MALLOC(<span class="number">10</span>, <span class="type">char</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>下面的宏为大家提供了更多方便：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/*malloc*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MALLOC_ARRAY(number, type) \((type *)malloc((number)* sizeof(type)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MALLOC_FLEX(stype, number, etype) \((stype *)malloc(sizeof(stype) \</span></span><br><span class="line"><span class="meta">+ (number)* sizeof(etype)))</span></span><br><span class="line"><span class="comment">/*calloc*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CALLOC(number, type) \((type *)calloc(number, sizeof(type)))</span></span><br><span class="line"><span class="comment">/*realloc*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REALLOC_ARRAY(pointer, number, type) \((type *)realloc(pointer, (number)* sizeof(type)))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REALLOC_FLEX(pointer, stype, number, etype) \((stype *)realloc(pointer, sizeof(stype) \</span></span><br><span class="line"><span class="meta">+ (number)* sizeof(etype)))</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="指向一块合法的内存">指向一块合法的内存</h4>
<p>在 C 语言中，只要是指针变量，那么在使用它之前必须确保该指针变量的值是一个有效的值，它能够指向一块合法的内存，并从根本上避免未分配内存或者内存分配不足的情况发生。</p>
<p>看下面一段示例代码：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">phonelist</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">char</span> *tel;</span><br><span class="line">}<span class="built_in">list</span>,*plist;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">list</span>.number = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="built_in">list</span>.name, <span class="string">"Abby"</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(<span class="built_in">list</span>.tel, <span class="string">"13511111111"</span>);</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>对于上面的代码片段，在定义结构体变量 <code>list</code> 时，<strong>并未给结构体 phonelist 内部的指针变量成员 “<code>char*name</code>” 与 “<code>char*tel</code>” 分配内存</strong>。这时候的指针变量成员 “<code>char*name</code>” 与 “<code>char*tel</code>” 并没有指向一个合法的地址，从而导致其内部存储的将是一些未知的乱码。</p>
<p>因此，在调用 <code>strcpy</code> 函数时，如 “<code>strcpy(list.name,"Abby")</code>” 语句会将字符串 "<code>Abby</code>" 向未知的乱码所指的内存上拷贝，而这块内存 <code>name</code> 指针根本就无权访问，从而导致程序出错。</p>
<p>既然没有给指针变量成员 “<code>char*name</code>” 与 “<code>char*tel</code>” 分配内存，那么解决的办法就是为指针变量成员分配内存，使其指向一个合法的地址，如下面的示例代码所示：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>.name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">list</span>.name, <span class="string">"Abby"</span>);</span><br><span class="line"><span class="built_in">list</span>.tel = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="built_in">list</span>.tel, <span class="string">"13511111111"</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>除此之外，下面的错误也是大家经常容易忽视的：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">phonelist</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">int</span> number;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">char</span> *tel;</span><br><span class="line">}<span class="built_in">list</span>, *plist;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    plist = (<span class="keyword">struct</span> phonelist*)<span class="built_in">malloc</span>(\</span><br><span class="line">        <span class="keyword">sizeof</span>(<span class="keyword">struct</span> phonelist));</span><br><span class="line">    <span class="keyword">if</span> (plist)</span><br><span class="line">    {</span><br><span class="line">        plist-&gt;number = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">strcpy</span>(plist-&gt;name, <span class="string">"Abby"</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(plist-&gt;tel, <span class="string">"13511111111"</span>);</span><br><span class="line">            <span class="comment">/*...*/</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="built_in">free</span>(plist);</span><br><span class="line">    plist = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>不难发现，上面的代码片段虽然为结构体指针变量 <code>plist</code> 分配了内存，但是仍旧没有给结构体指针变量成员 “<code>char*name</code>” 与 “<code>char*tel</code>” 分配内存，从而导致结构体指针变量成员 “<code>char*name</code>” 与 “<code>char*tel</code>” 并没有指向一个合法的地址。因此，应该做如下修改：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">plist-&gt;name = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(plist-&gt;name, <span class="string">"Abby"</span>);</span><br><span class="line">plist-&gt;tel = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line"><span class="built_in">strcpy</span>(plist-&gt;tel, <span class="string">"13511111111"</span>);</span><br></pre></td></tr></tbody></table></figure>
<p>由此可见，对结构体来说，仅仅是为结构体指针变量分配内存还是不够的，还必须为结构体成员中的所有指针变量分配足够的内存。</p>
<h4 id="分配足够的内存空间">分配足够的内存空间</h4>
<p>对于上面的结构体指针变量 plist 的内存分配语句：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">plist = (<span class="keyword">struct</span> phonelist*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> phonelist));</span><br></pre></td></tr></tbody></table></figure>
<p>如果不小心误写成如下形式会怎么样呢？</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">plist = (<span class="keyword">struct</span> phonelist*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> phonelist*));</span><br></pre></td></tr></tbody></table></figure>
<p>虽然这里只是简单地将 “<code>sizeof(struct phonelist)</code>” 误写成了 “<code>sizeof(struct phonelist*)</code>”，但将会因为结构体指针变量 <code>plist</code> 内存分配不足而导致程序的内存错误发生。类似的示例还有许多，如下面的代码所示：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">(<span class="type">size_t</span> len)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">long</span> *p;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span> || len &gt; SIZE_MAX / <span class="keyword">sizeof</span>(<span class="type">long</span>))</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/*溢出处理*/</span></span><br><span class="line">    }</span><br><span class="line">    p = (<span class="type">long</span> *)<span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/*...*/</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    p = <span class="literal">NULL</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>在上面的示例代码中，内存分配语句 “<code>p=(long*)malloc(len*sizeof(int))</code>” 使用了 “<code>sizeof(int)</code>” 来计算内存的大小，而不是 <code>sizeof(long)</code>，这显然是不对的，应该修改成 <code>sizeof(long)</code>，当然，也可以用 “<code>sizeof(*p)</code>”。</p>
<p>除此之外，对于数组对象尤其要注意内存分配的问题，如下面的代码所示：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ARRAY_SIZE 10</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">datalist</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">size_t</span> number;</span><br><span class="line">    <span class="type">int</span> data[];</span><br><span class="line">};</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datalist</span> <span class="title">list</span>;</span></span><br><span class="line">    <span class="built_in">list</span>.number = ARRAY_SIZE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; ++i)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">list</span>.data[i] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>对于上面的示例，当一个结构体中包含数组成员时，其数组成员的大小必须添加到结构体的大小中。因此，上面示例的正确内存分配方法应该按照如下方式进行：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ARRAY_SIZE 10</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">datalist</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="type">size_t</span> number;</span><br><span class="line">    <span class="type">int</span> data[];</span><br><span class="line">}；</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">datalist</span> *<span class="title">plist</span>;</span></span><br><span class="line">    plist = (<span class="keyword">struct</span> datalist *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> datalist)+<span class="keyword">sizeof</span>(<span class="type">int</span>) * ARRAY_SIZE);</span><br><span class="line">    <span class="keyword">if</span> (plist == <span class="literal">NULL</span>){</span><br><span class="line">        <span class="comment">/*...*/</span></span><br><span class="line">    }</span><br><span class="line">    plist-&gt;number = ARRAY_SIZE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; ARRAY_SIZE; ++i)</span><br><span class="line">    {</span><br><span class="line">            plist-&gt;data[i] = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>由上面的几个示例代码片段可见，对于 <code>malloc</code>、<code>calloc</code>、<code>realloc</code> 与 <code>aligned_alloc</code> 内存分配函数中长度参数的大小，必须保证有足够的范围来表示对象要存储的大小。如果长度参数不正确或者可能被攻击者所操纵，将可能会出现缓冲区溢出。与此同时，不正确的长度参数、不充分的范围检查、整数溢出或截断都会导致分配长度不足的缓冲区。因此，一定要确保内存分配函数的长度参数能够合法地分配足够数量的内存。</p>
<h4 id="禁止执行零长度的内存分配">禁止执行零长度的内存分配</h4>
<p>根据 C99 规定，如果在程序中试图调用 <code>malloc</code>、<code>calloc</code> 与 realloc 等系列内存分配函数分配长度为 0 的内存，那么其行为将是由具体编译器所定义的（如可能返回一个 <code>null</code> 指针，又或者是长度为非零的值等），从而导致产生不可预料的结果。</p>
<p>因此，为了保证不会将 0 作为长度参数值传给 malloc、calloc 与 realloc 等系列内存分配函数，应该对这些内存分配函数的<strong>长度参数进行合法性检查</strong>，以保证它的合法取值范围。</p>
<p>如下面的代码所示：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">size_t</span> len;</span><br><span class="line"><span class="comment">/*初始化len变量*/</span></span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/* 处理长度为0的错误 */</span></span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)<span class="built_in">malloc</span>(len);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/*...*/</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="避免大型的堆栈分配">避免大型的堆栈分配</h4>
<p>C99 标准引入了对变长数组的支持，如果变长数组的长度传入未进行任何检查和处理，那么将很容易被攻击者用来实施攻击，如常见的 DOS 攻击。看下面的示例代码：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">CopyFile</span><span class="params">(FILE *src, FILE *dst, <span class="type">size_t</span> bufsize)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">char</span> buf[bufsize];</span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, bufsize, src))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fputs</span>(buf, dst) == EOF)</span><br><span class="line">        {</span><br><span class="line">                <span class="comment">/*...*/</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>在上面的示例代码中，数组 “<code>char buf[bufsize]</code>” 的长度将根据 <code>CopyFile</code> 函数的 <code>bufsize</code> 参数来决定，这显然不符合要求的。对于这种情况，可以通过一个 <code>malloc</code> 调用来替换掉这个变长数组。与此同时，如果 <code>malloc</code> 函数内存分配失败，还可以对返回值进行检查，从而防止程序异常终止等情况发生。如下面的示例代码所示：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">CopyFile</span><span class="params">(FILE *src, FILE *dst, <span class="type">size_t</span> bufsize)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (bufsize == <span class="number">0</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/*...*/</span></span><br><span class="line">    }</span><br><span class="line">    <span class="type">char</span> *buf = (<span class="type">char</span> *)<span class="built_in">malloc</span>(bufsize);</span><br><span class="line">    <span class="keyword">if</span> (buf == <span class="literal">NULL</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/*...*/</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, bufsize, src))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fputs</span>(buf, dst) == EOF)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">/*...*/</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    buf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="避免内存分配成功，但并未初始化">避免内存分配成功，但并未初始化</h4>
<p>在通常情况下，导致这种错误的主要原因有两个：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>没有初始化的观念。</p>
</li>
<li class="lvl-2">
<p>误以为内存的默认初值全部为零，从而导致引用初值错误（如数组）。</p>
</li>
</ul>
<p>其实，内存的默认初值究竟是什么并没有统一的标准。如 <code>malloc</code> 函数分配得到的内存空间就是未初始化的，而它所分配的内存空间里可能包含出乎意料的值。因此，一般在使用该内存空间时，就需要调用函数 <code>memset</code> 来将其初始化为全 <code>0</code>。如下面的示例代码所示：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line">p = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">/*初始化为0*/</span></span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br></pre></td></tr></tbody></table></figure>
<p>对于 <code>realloc</code> 函数，同样需要使用 <code>memset</code> 函数对其内存进行初始化。而对于数组，也别忘了赋初值，即便是赋零值也不可省略，千万不要嫌麻烦。</p>
<h3 id="C-宏（macro）">C 宏（macro）</h3>
<h4 id="特殊宏">特殊宏</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">__DATE__     : 在原文件中插入当前的编写日期</span><br><span class="line">__TIME__     : 在源文件中插入当前的编辑时间</span><br><span class="line">__cplusplus__: 在源文件中编写c++程序时该标识被定义</span><br><span class="line">__FILE__     :文件名</span><br><span class="line">__LINE__     :行数</span><br><span class="line">__func__     :所在函数</span><br><span class="line">__FUNCTION__ :</span><br></pre></td></tr></tbody></table></figure>
<h4 id="VA-ARGS"><code>__VA_ARGS__</code></h4>
<p>用于实现变参函数，将函数宏的形参列表最后的参数用省略号（…）表示即实现了变参函数。<code>__VA_ARGS__</code>用于在宏替换部分中，表明省略号代表什么。</p>
<p>例如：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR(...) printf(__VA__ARGS__);    <span class="comment">//Note：需编译器支持__VA__ARGS__</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> age = <span class="number">26</span>;</span><br><span class="line">    <span class="type">int</span> weight = <span class="number">75</span>;</span><br><span class="line">    <span class="type">float</span> BMI = <span class="number">26.4</span>;</span><br><span class="line">    PR(<span class="string">"oh mashuai"</span>);</span><br><span class="line">    PR(<span class="string">"Age:%d, weight:%d,BMI:%d"</span>,age,weight,BMI);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><strong><code>##__VA_ARGS__</code> 宏前面加上<code>##</code>的作用在于，当可变参数的个数为 0 时，这里的<code>##</code>起到把前面多余的 "<code>,</code>" 去掉的作用，否则会编译出错。</strong></p>
<p>一般这个用在调试信息上多一点.</p>
<h4 id=""><code>#</code></h4>
<p>表示将参数转换为字符串输出：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> P(A) printf(<span class="string">"%s:%d.\r\n"</span>,#A,A);</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">    P(a);</span><br><span class="line">    P(b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>运行结果为：</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">a:1</span><br><span class="line">b:2</span><br></pre></td></tr></tbody></table></figure>
<h4 id="-2"><code>##</code></h4>
<p>用于类函数宏的替换部分，也可以用于对象宏的替换部分。主要用于将两个语言符号组成单个语言符号，为宏扩展提供一种连接实际变元的手段；</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XNAME(n) X##n        <span class="comment">//将定元X和变元n组合，列出X1, X2, X3 ...</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT_XN(n) printf(<span class="string">"X"</span>#n<span class="string">"=%d\n"</span>,X##n);</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> <span class="title function_">XNAME</span><span class="params">(<span class="number">1</span>)</span>=<span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">XNAME</span><span class="params">(<span class="number">2</span>)</span>=<span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> X3=<span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    PRINT_XN(<span class="number">1</span>);</span><br><span class="line">    PRINT_XN(<span class="number">2</span>);</span><br><span class="line">    PRINT_XN(<span class="number">3</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="定义一个宏，求两个数中的最大数">定义一个宏，求两个数中的最大数</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>合格</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  MAX(x,y)  x &gt; y ? x : y</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li class="lvl-2">
<p>中等</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(x,y) (x) &gt; (y) ? (x) : (y)</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li class="lvl-2">
<p>良好</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(x,y)({ \</span></span><br><span class="line"><span class="meta">    int _x = x; \</span></span><br><span class="line"><span class="meta">    int _y = y; \</span></span><br><span class="line"><span class="meta">    _x &gt; _y ? _x : _y; \</span></span><br><span class="line"><span class="meta">})</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max=%d"</span>,MAX(i++,j++));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li class="lvl-2">
<p>优秀</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(type,x,y)({ \</span></span><br><span class="line"><span class="meta">    type _x = x; \</span></span><br><span class="line"><span class="meta">    type _y = y; \</span></span><br><span class="line"><span class="meta">    _x &gt; _y ? _x : _y; \</span></span><br><span class="line"><span class="meta">})</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max=%d\n"</span>,MAX(<span class="type">int</span>,i++,j++));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max=%f\n"</span>,MAX(<span class="type">float</span>,<span class="number">3.14</span>,<span class="number">3.15</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
</li>
<li class="lvl-2">
<p>流弊</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> max(x, y) ({    \</span></span><br><span class="line"><span class="meta">    typeof(x) _x = (x); \</span></span><br><span class="line"><span class="meta">    typeof(y) _y = (y); \</span></span><br><span class="line"><span class="meta">    (void) (&amp;_x == &amp;_y);\</span></span><br><span class="line"><span class="meta">    _x &gt; _y ? _x : _y; })</span></span><br></pre></td></tr></tbody></table></figure>
<p>在这个宏定义中，使用了 <code>typeof</code>(GCC 的扩展) 关键字<code>用来获取宏的两个参数类型</code>。干货在 <code>(void) (&amp;x == &amp;y);</code> 这句话，简直是天才般的设计！</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>用来给用户提示一个警告，对于不同类型的指针比较，编译器会给一个警告，提示两种数据类型不同；</p>
</li>
<li class="lvl-4">
<p>当两个值比较，比较的结果没有用到，有些编译器可能会给出一个 warning，加个 (void) 后，就可以消除这个警告！</p>
</li>
</ul>
</li>
<li class="lvl-2">
<p>完美</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">max(x, _x)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(x, y) ({                \</span></span><br><span class="line"><span class="meta">    typeof(x) _max1 = (x);            \</span></span><br><span class="line"><span class="meta">    typeof(y) _max2 = (y);            \</span></span><br><span class="line"><span class="meta">    (void) (&amp;_max1 == &amp;_max2);        \</span></span><br><span class="line"><span class="meta">    _max1 &gt; _max2 ? _max1 : _max2; })</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __max(t1, t2, max1, max2, x, y) ({              \</span></span><br><span class="line"><span class="meta">    t1 max1 = (x);                                  \</span></span><br><span class="line"><span class="meta">    t2 max2 = (y);                                  \</span></span><br><span class="line"><span class="meta">    (void) (&amp;max1 == &amp;max2);                        \</span></span><br><span class="line"><span class="meta">    max1 &lt; max2 ? max1 : max2; })</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ___PASTE(a,b) a##b</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __PASTE(a,b) ___PASTE(a,b)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __UNIQUE_ID(prefix) __PASTE(__PASTE(__UNIQUE_ID_, prefix), __COUNTER__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(x, y)                                       \</span></span><br><span class="line"><span class="meta">    __max(typeof(x), typeof(y),                     \</span></span><br><span class="line"><span class="meta">          __UNIQUE_ID(max1_), __UNIQUE_ID(max2_),   \</span></span><br><span class="line"><span class="meta">          x, y)</span></span><br></pre></td></tr></tbody></table></figure>
<p>在新版的宏中，内部的临时变量不再由程序员自己定义，而是让编译器生成一个独一无二的变量，这样就避免了同名冲突的风险。宏 **__UNIQUE_ID** 的作用就是生成了一个独一无二的变量，确保了临时变量的唯一性。关于它的使用，可以参考<a href="https://link.zhihu.com/?target=https%3A//gaomf.cn/2017/10/08/Kernel_min_max_macro/">文章</a>，写的很好。</p>
</li>
<li class="lvl-2">
<p>参考</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://www.zhihu.com/question/22465774">Linux 三剑客知乎</a></li>
</ul>
</li>
</ul>
<h3 id="函数指针">函数指针</h3>
<h4 id="指向普通函数的指针">指向普通函数的指针</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">int_add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> (a+b);</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> <span class="title function_">int_sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> (a-b);</span><br><span class="line">}</span><br><span class="line"><span class="type">int</span> (*int_operator)(<span class="type">int</span>, <span class="type">int</span>) = int_add;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;int_operator(<span class="number">4</span>, <span class="number">5</span>)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// output 9</span></span><br><span class="line">    int_operator = int_sub;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;int_operator(<span class="number">4</span>, <span class="number">5</span>)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// output -1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上例中，<code>int_operator</code> 会被编译器解释成类型 <code>int(*)(int, int)</code> 的一个指针。</p>
<p>调用方式还可以写作：<code>(*int_operator)(4, 5)</code>，这样的好处是让人一眼就能看到 <code>int_operator</code> 是一个函数指针。<strong>注意：函数指针和指向函数的返回值的类型和参数都必须严格一致；</strong></p>
<h4 id="函数指针数组">函数指针数组</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> (*pFuncArray[<span class="number">10</span>])();</span><br></pre></td></tr></tbody></table></figure>
<p><code>[]</code> 的优先级高于 <code>*</code>，该语句将 <code>pFuncArray</code> 声明为拥有 10 个元素的数组，每一个元素都是指向一个函数的函数指针，该函数没有参数，返回值类型为 <code>int</code>；</p>
<p>注意不能写作：<code>int ((*pFuncArray)[10])()</code>，这样会产生编译错误；<code>(*pFuncArray)[10]</code> 表明了 <code>pFuncArray</code> 是一个指针，该指针指向一个<code>含有 10个元素的数组</code>；其类型为 <code>int()()</code>，显然，编译不能通过。</p>
<p>将上面的声明转换为 <code>typedef</code> 格式，会使程序可读性增加：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(*pFunc)</span><span class="params">()</span>;</span><br><span class="line">pFunc pFuncArray[<span class="number">10</span>];</span><br></pre></td></tr></tbody></table></figure>
<p>如果需要调用其中的第三个函数，那么调用方式为：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line">pFuncArray[<span class="number">2</span>]();</span><br></pre></td></tr></tbody></table></figure>
<h4 id="指向‘函数指针数组’的指针">指向‘函数指针数组’的指针</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cmp_len</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2)</span></span><br><span class="line">{<span class="keyword">return</span> ((<span class="type">int</span>)<span class="built_in">strlen</span>(str1) - (<span class="type">int</span>)<span class="built_in">strlen</span>(str2));}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp_str</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2)</span></span><br><span class="line">{<span class="keyword">return</span> <span class="built_in">strcmp</span>(str1, str2);}</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(*PCMP_FUNC)</span><span class="params">(<span class="type">const</span> <span class="type">char</span>*, <span class="type">const</span> <span class="type">char</span>*)</span>;</span><br><span class="line"></span><br><span class="line">PCMP_FUNC pCmpFuncs[<span class="number">2</span>] =</span><br><span class="line">{</span><br><span class="line">    cmp_len,</span><br><span class="line">    cmp_str,</span><br><span class="line">};</span><br><span class="line"><span class="comment">// 声明指向pCmpFuncs的指针</span></span><br><span class="line">PCMP_FUNC (*ppCmps)[<span class="number">2</span>] = &amp;pCmpFuncs;</span><br></pre></td></tr></tbody></table></figure>
<p>声明分解说明如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>(*ppCmps)</code>：表明 <code>ppCmps</code> 是一个指针；</p>
</li>
<li class="lvl-2">
<p><code>(*ppCmps)[2]</code>：后面紧跟 <code>[2]</code>，表明 <code>ppCmps</code> 是一个指向‘两个元素数组’的指针</p>
</li>
<li class="lvl-2">
<p><code>PCMP_FUNC</code> 表明了该数组元素的类型，它是指向函数的指针，返回值为 <code>int</code>，有两个 <code>const char*</code> 类型的参数；</p>
</li>
<li class="lvl-2">
<p>实际上语句 <code>PCMP_FUNC (*ppCmps)[2] = &amp;pCmpFuncs;</code> 将会被编译器解释为：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="type">int</span> (*(*ppCmps)[<span class="number">2</span>])(<span class="type">const</span> <span class="type">char</span>*, <span class="type">const</span> <span class="type">char</span>*) = &amp;pCmpFuncs;</span><br></pre></td></tr></tbody></table></figure>
<p><code>int (*)(const char*, const char *)</code>：表明了该数组元素的类型，它是指向函数的指针，返回值为 <code>int</code>，有两个 <code>const char*</code> 类型的参数；</p>
</li>
</ul>
<h4 id="函数指针与类">函数指针与类</h4>
<p>在 <code>C++</code> 语言中，使用函数指针可以指向类的一个成员函数或变量，虽然这种用法很少能用到，不过了解一下还是有点必要的。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>为了支持这类指针，<code>C++</code> 有三个特殊的运算法符：<code>::*，.-&gt;，.*</code></p>
</li>
<li class="lvl-2">
<p><strong>指向成员函数的指针</strong>必须与向其赋值的函数类型匹配，这包括：</p>
<ul class="lvl-2">
<li class="lvl-4">参数的类型和个数；</li>
<li class="lvl-4">返回值类型；</li>
<li class="lvl-4">它所属的类型；</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>指向成员变量的指针</strong>必须与向其赋值的变量类型匹配，这包括</p>
<ul class="lvl-2">
<li class="lvl-4">变量类型；</li>
<li class="lvl-4">它所属的类型；</li>
</ul>
</li>
<li class="lvl-2">
<p>成员函数和变量必须被绑定到一个对象或者指针上，然后才能得到调用对象的 <code>this</code> 指针，然后才能指向成员变量或函数；</p>
</li>
<li class="lvl-2">
<p>类 <code>AClass</code> 的成员变量 <code>int m_iValue</code>，其完整类型是：<code>int AClass::m_iValue</code>；</p>
</li>
<li class="lvl-2">
<p>类 <code>AClass</code> 的成员函数 <code>int Add(int)</code>，其完整类型是：<code>int AClass::Add(int)</code>;</p>
</li>
</ul>
<p><strong>注意：指向类的静态变量或静态成员函数的指针和普通成员不同；</strong></p>
<h4 id="指向类成员变量的指针">指向类成员变量的指针</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AClass</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> a)</span>{m_iValue += a;}</span><br><span class="line">    <span class="type">int</span>  m_iValue;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">{</span><br><span class="line">    AClass a;</span><br><span class="line">   <span class="comment">// 声明并指向AClass的一个成员变量的指针</span></span><br><span class="line">    <span class="type">int</span> AClass::*pValue = &amp;AClass::m_iValue;</span><br><span class="line">    <span class="comment">// 或者如下方式：</span></span><br><span class="line">    <span class="comment">// int AClass::*pValue;// 指针变量声明</span></span><br><span class="line">    <span class="comment">// pValue = &amp;AClass::m_iValue;// 指向A的m_iValue成员</span></span><br><span class="line">    a.*pValue = <span class="number">4</span>; <span class="comment">// 使用方式，赋值</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a.m_iValue&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 输出4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="指向类成员函数的指针">指向类成员函数的指针</h4>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AClass</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> a)</span>{m_iValue += a;}</span><br><span class="line">    <span class="type">int</span>  m_iValue;</span><br><span class="line">};</span><br><span class="line"><span class="comment">// 指向类 AClass 成员函数的指针的声明方式</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(AClass::*pAFunc)</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="comment">// 声明一个指向 AClass::Add 的函数指针</span></span><br><span class="line">pAFunc pAAdd = &amp;(AClass::Add);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">{</span><br><span class="line">    AClass a;</span><br><span class="line">    <span class="comment">// 声明并指向AClass的一个成员变量的指针</span></span><br><span class="line">    <span class="type">int</span> AClass::*pValue = &amp;AClass::m_iValue;</span><br><span class="line">    <span class="comment">// 或者如下方式：</span></span><br><span class="line">    <span class="comment">// int AClass::*pValue;// 指针变量声明</span></span><br><span class="line">    <span class="comment">// pValue = &amp;AClass::m_iValue;// 指向A的m_iValue成员</span></span><br><span class="line">    a.*pValue = <span class="number">4</span>; <span class="comment">// 使用方式，赋值</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a.m_iValue&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 输出</span></span><br><span class="line">    (a.*pAAdd)(<span class="number">5</span>); <span class="comment">// 指向成员函数指针的调用方式</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a.m_iValue&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="指向类静态成员的指针">指向类静态成员的指针</h4>
<p>类的静态成员属于该类的全局对象和函数，并不需要 <em>this</em> 指针；因此指向类静态成员的指针声明方式和普通指针相同。</p>
<p>类指针和普通指针的声明和调用方式完全相同；唯一的不同就是设置指向的对象时，仍然需要类信息，这一点和指向普通成员的指针相同。</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AClass</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">public:</span><br><span class="line">    <span class="type">static</span> <span class="type">void</span> <span class="title function_">Add</span><span class="params">(<span class="type">int</span> a)</span>{m_iValue += a;}</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span>  m_iValue;</span><br><span class="line">};</span><br><span class="line"><span class="type">int</span> AClass::m_iValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(*pAAdd)</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> _tmain(<span class="type">int</span> argc, _TCHAR* argv[])</span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 声明并指向AClass的一个静态成员变量的指针</span></span><br><span class="line">    <span class="type">int</span> *pValue = &amp;AClass::m_iValue;</span><br><span class="line">    <span class="comment">// 或者如下方式：</span></span><br><span class="line">    <span class="comment">// int *pValue;// 指针变量声明</span></span><br><span class="line">    <span class="comment">// pValue = &amp;AClass::m_iValue;// 指向A的m_iValue成员</span></span><br><span class="line">    *pValue = <span class="number">4</span>; <span class="comment">// 使用方式同普通指针，赋值</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*pValue&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 输出</span></span><br><span class="line">    pAAdd p = &amp;AClass::Add;</span><br><span class="line">    p(<span class="number">5</span>); <span class="comment">// 调用方式同普通函数指针</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*pValue&lt;&lt;<span class="built_in">endl</span>; <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="OOP-In-C">OOP In C</h3>
<!--
https://stackoverflow.com/questions/351733/how-would-one-write-object-oriented-code-in-c/351745#351745
https://stackoverflow.com/questions/4103704/experiment-object-oriented-c/4103725#4103725
https://stackoverflow.com/questions/6304794/oop-and-interfaces-in-c
https://stackoverflow.com/questions/351733/how-would-one-write-object-oriented-code-in-c?noredirect=1&lq=1
https://stackoverflow.com/questions/660083/derived-classes-in-c-what-is-your-favorite-method?noredirect=1&lq=1
 -->
<h3 id="多线程">多线程</h3>
<p>todo</p>
<h4 id="pthreads">pthreads</h4>
<p><a href="https://en.wikipedia.org/wiki/Pthreads">Unix/Linux thread standard</a> 基于 <a href="https://godbolt.org/z/T79TxWK9q">wiki</a> 示例。</p>
<h2 id="CPP">CPP</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/cpp-best-practices">cpp-best-practices</a></p>
</li>
<li class="lvl-2">
<p><a href="https://riptutorial.com/cplusplus">startup</a></p>
</li>
</ul>
<h3 id="CPP-Project">CPP Project</h3>
<p>项目布局遵循规范：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1204r0.html">P1204R0</a></p>
</li>
<li class="lvl-2">
<p><a href="https://api.csswg.org/bikeshed/?force=1&amp;url=https://raw.githubusercontent.com/vector-of-bool/pitchfork/develop/data/spec.bs">The Pitchfork Layout</a></p>
</li>
</ul>
<p>现代 C++ 工程布局通常使用成熟的工具生成，比如 <a href="https://github.com/friendlyanon/cmake-init">cmake-init</a> 及<a href="https://github.com/friendlyanon/cmake-init/wiki/Examples">示例</a>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip3 install cmake-init</span><br><span class="line"><span class="comment"># 使用 cmake-init 创建模板，根据提示输出选项即可</span></span><br><span class="line">cmake-init libhello</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Files-in-cpp">Files in cpp</h4>
<p>cpp 作为编译型静态语言，考虑了各方面原因，通常不同的文件后缀，习惯于放置不同的代码段以作为区分，不完全包含后缀有 <code>.h/.cpp/.def/.inc/.imp/impl/.tpp</code>。</p>
<h5 id="hpp-and-cpp">.hpp and .cpp</h5>
<p>通常普通的类及函数都声明于 <code>.h</code> 和 <code>.cpp</code> 中。</p>
<h5 id="inc-imp-impl-tpp">.inc/.imp/.impl/.tpp</h5>
<p>.inc/.inl/.def</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>宏定义或预编译</p>
</li>
<li class="lvl-2">
<p>模板和 <code>constexpr</code> 操作</p>
</li>
<li class="lvl-2">
<p>也可作为类似 <code>.hpp</code> 作用或作为 <code>.hpp</code> 的实现部分，如 <a href="#x-macro">X Macro</a></p>
</li>
</ul>
<p>.imp/.impl/.tpp</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>模板定义</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/38402525/difference-between-h-files-and-inc-files-in-c">stackoverflow</a></p>
</li>
</ul>
<h3 id="Learning-Basics">Learning Basics</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://hackingcpp.com/cpp/beginners_guide.html">hacking cpp</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/?view=msvc-170">cpp microsoft</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/zh-cn/cpp/cpp/cpp-language-reference?view=msvc-170">modern cpp microsoft</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.learncpp.com/">learncpp</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/509466763?utm_campaign=shareopn&amp;utm_medium=social&amp;utm_oi=929703030027243520&amp;utm_psn=1628093059283038208&amp;utm_source=wechat_session">大 C 小 C 整理的基础语法</a></p>
</li>
</ul>
<h4 id="assert">assert</h4>
<p><a href="https://godbolt.org/z/vj1eh4f8M">assert</a> 可以结合说明，给出运行时更多信息。</p>
<h4 id="Namespace">Namespace</h4>
<p>命名空间除了避免命名冲突外，还有以下特殊使用方法 <a href="https://www.learncpp.com/cpp-tutorial/unnamed-and-inline-namespaces/"><sup>1</sup></a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://godbolt.org/z/W155zz87P">unnamed namespace</a>：用于分类只属于当前给定文件的实现。</p>
</li>
<li class="lvl-2">
<p><a href="https://godbolt.org/z/c8MaGfWe6">inline namespacce</a>：用于设定上一级命名空间的默认版本。</p>
</li>
</ul>
<h4 id="Template">Template</h4>
<h4 id="static-assert">static assert</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>static assert for equality type</p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 std::is_same, std::is_same_v, decltype, declval, std::decy, std::decy_t</span></span><br><span class="line"><span class="comment">// \tparam R 一个模板类型</span></span><br><span class="line"><span class="comment">// \tparam Policy 另一个模板类型</span></span><br><span class="line"><span class="comment">// \tparam Args a parameter pack 参数包</span></span><br><span class="line"><span class="built_in">static_assert</span>(</span><br><span class="line">    std::is_same_v&lt; <span class="comment">// 比较类型是否相等 trait</span></span><br><span class="line">        std::<span class="type">decay_t</span>&lt;R&gt;, <span class="comment">// 获取对应无限定符修饰的类型</span></span><br><span class="line">        std::<span class="type">decay_t</span>&lt; <span class="comment">// 获取表达式无限定符修饰类型</span></span><br><span class="line">            <span class="keyword">decltype</span>(</span><br><span class="line">                <span class="built_in">static_cast</span>&lt;Policy*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">PolicyImpl</span>(</span><br><span class="line">                    std::forward&lt;Args&gt;(args)...</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        &gt;</span><br><span class="line">    &gt;,</span><br><span class="line">    <span class="string">"R must be same as  the return type of PolicyImpl"</span>);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Fold-expressions">Fold expressions</h4>
<p><a href="https://en.cppreference.com/w/cpp/language/fold">Fold expressions</a> 折叠表达式在 c++17 引入，用于避免需要为模板写多个版本以使用可变模板参数及编译效率。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">SumCpp11Version</span><span class="params">()</span></span>{ <span class="comment">// no parameter version</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1, <span class="keyword">typename</span>... T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">SumCpp11Version</span><span class="params">(T1 s, T... ts)</span></span>{ <span class="comment">// recursive version for every param</span></span><br><span class="line">    <span class="keyword">return</span> s + <span class="built_in">SumCpp11Version</span>(ts...);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>使用折叠表达式，书写更简便，且有利于编译器模板实例化：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ...Args&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">sum</span><span class="params">(Args ...args)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (args + ... + <span class="number">0</span>); <span class="comment">// with initial value 0</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// or even:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> ...Args&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">sum2</span><span class="params">(Args ...args)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> (args + ...);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>使用参考<a href="https://cppinsights.io/s/7f9603b6">示例</a></p>
<p>折叠表达式展开到参数包如下：</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>展开</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>(... op pack)</code></td>
<td><code>((pack1 op pack2) op ...) op packN</code></td>
</tr>
<tr>
<td><code>(init op ... op pack)</code></td>
<td><code>(((init op pack1) op pack2) op ...) op packN</code></td>
</tr>
<tr>
<td><code>(pack op ...)</code></td>
<td><code>pack1 op (... op (packN-1 op packN))</code></td>
</tr>
<tr>
<td><code>(pack op ... op init)</code></td>
<td><code>pack1 op (... op (packN-1 op (packN op init)))</code></td>
</tr>
</tbody>
</table>
<p>当 op 为如下操作时，空的参数包值自动推导为默认值:</p>
<table>
<thead>
<tr>
<th>Op</th>
<th>Default Value</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;&amp;</code></td>
<td><code>true</code></td>
</tr>
<tr>
<td><code>||</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>,</code></td>
<td><code>void()</code></td>
</tr>
</tbody>
</table>
<p>这里是一个<a href="https://godbolt.org/z/bcseTeWK7">实际代码示例</a>:</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">foo_first</span><span class="params">(<span class="type">bool</span> apply_all = <span class="literal">false</span>, Args&amp;&amp;... args)</span> </span>{</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; ret;</span><br><span class="line">    ret.<span class="built_in">reserve</span>(<span class="keyword">sizeof</span>...(args)); <span class="comment">// performance with reservation capacity</span></span><br><span class="line">    (... || [&amp;ret, &amp;apply_all](<span class="keyword">auto</span>&amp;&amp; v) {</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">foo_is_even</span>(v) ? ret.<span class="built_in">push_back</span>(v), apply_all ? <span class="literal">false</span> : <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    }(std::forward&lt;Args&gt;(args))); <span class="comment">// expanding with a lambda and perfect-forwarding way</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>相关参考</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4295.html">n4295</a> 和 <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0036r0.pdf">P0036R0</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.codingame.com/playgrounds/2205/7-features-of-c17-that-will-simplify-your-code/fold-expressions">CodinGame</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.tartanllama.xyz/exploding-tuples-fold-expressions/">tuple with fold expression</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.modernescpp.com/index.php/fold-expressions">morderncpp</a></p>
</li>
<li class="lvl-2">
<p><a href="https://iamsorush.com/posts/cpp-variadic-template/">iamsorush blog</a></p>
</li>
<li class="lvl-2">
<p><a href="https://toutiao.io/posts/hr3lc2m/preview">toutiao</a></p>
</li>
</ul>
<h4 id="require-C-20">require(C++20)</h4>
<!--
https://en.cppreference.com/w/cpp/language/constraints
 -->
<p>C++20 新增 <a href="https://en.cppreference.com/w/cpp/language/requires">require</a>，简化了模板复杂性，以更符合语义方式实现约束。</p>
<h5 id="可调对象">可调对象</h5>
<p>对<a href="https://godbolt.org/z/c48G1YxE6">可调用对象</a>进行约束，需要分别对参数及返回值进行设置。</p>
<h4 id="std-variant-and-std-any">std::variant and std::any</h4>
<p><a href="https://en.cppreference.com/w/cpp/utility/variant">std::variant</a> 类型安全的 union。<br>
<a href="https://en.cppreference.com/w/cpp/utility/any">std::any</a> 类型安全的实现 copy 语义的单值容器。</p>
<blockquote>
<p>[!TIP]<br>
使用这两个容器可以实现<a href="https://godbolt.org/z/WoxnzjnvK">简单动态属性</a>。</p>
</blockquote>
<h4 id="Iterator-and-Tools">Iterator and Tools</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>std::next</p>
</li>
<li class="lvl-2">
<p>std::partition</p>
</li>
<li class="lvl-2">
<p>std::distance</p>
</li>
</ul>
<p>在 STL 中使用迭代器操作数据结构，进而实现算法是非常普遍的做法。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// quick sort</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> RandomIt&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quicksort</span><span class="params">(RandomIt first, RandomIt last)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (first == last) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">auto</span> pivot = *std::<span class="built_in">next</span>(first, std::<span class="built_in">distance</span>(first,last)/<span class="number">2</span>);</span><br><span class="line">    RandomIt middle1 = std::<span class="built_in">partition</span>(first, last, [pivot](<span class="type">const</span> <span class="keyword">auto</span>&amp; em){ <span class="keyword">return</span> em &lt; pivot; });</span><br><span class="line">    RandomIt middle2 = std::<span class="built_in">partition</span>(middle1, last, [pivot](<span class="type">const</span> <span class="keyword">auto</span>&amp; em){ <span class="keyword">return</span> !(pivot &lt; em); });</span><br><span class="line">    <span class="built_in">quicksort</span>(first, middle1);</span><br><span class="line">    <span class="built_in">quicksort</span>(middle2, last);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> RandomIt&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(RandomIt first, RandomIt last)</span> </span>{</span><br><span class="line">    <span class="built_in">quicksort</span>(first, last);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="容器Container">容器 Container</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zh.cppreference.com/w/cpp/container">https://zh.cppreference.com/w/cpp/container</a></p>
</li>
</ul>
<h3 id="并发thread">并发 thread</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zh.cppreference.com/w/cpp/thread">https://zh.cppreference.com/w/cpp/thread</a></p>
</li>
</ul>
<h4 id="sharing-data">sharing data</h4>
<p><strong>the Risk of mutexes</strong>: <a href="https://www.modernescpp.com/index.php/the-risk-of-mutexes/">https://www.modernescpp.com/index.php/the-risk-of-mutexes/</a></p>
<p><strong>Prefer to mutex</strong>: <a href="https://www.modernescpp.com/index.php/prefer-locks-to-mutexes/">https://www.modernescpp.com/index.php/prefer-locks-to-mutexes/</a></p>
<h3 id="API-Design">API Design</h3>
<p>“Make interfaces easy to use correctly and hard to use incorrectly.—Scott Meyers”。这很容易达成一致，但很难遵循。这里提供一些技巧来如何改进的 API，避免接口增长带来的陷阱。</p>
<h4 id="Better-naming">Better naming</h4>
<p>使用更表意的命名方式，命名非常困难，但能让事情变简单。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_data</span><span class="params">(<span class="type">unsigned</span> value)</span> </span>{</span><br><span class="line">    fmt::<span class="built_in">print</span>(<span class="string">"Distance is {} meters\n"</span>, value);</span><br><span class="line">}</span><br><span class="line"><span class="keyword">auto</span> distance_mk=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">print_data</span>(distance_km); <span class="comment">// 歧义调用，这里原意只让打印 meters</span></span><br><span class="line"><span class="built_in">print_data</span>(distance_km*<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_distance</span><span class="params">(<span class="type">unsigned</span> distance_in_meters)</span></span>;</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Use-strong-types">Use strong types</h4>
<p>使用健壮的类型，尽量保证在编译或运行给出更多信息，健壮的类型不完全检测包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/foonathan/type_safe">检测类型</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/joboccara/NamedType">值校验</a></p>
</li>
<li class="lvl-2">
<p>…</p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;NamedType/named_type.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> Meter= fluent::NamedType&lt;unsgined, <span class="keyword">struct</span> MeterTag&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print_distance</span><span class="params">(Meter distance)</span> </span>{</span><br><span class="line">    fmt::<span class="built_in">print</span>(<span class="string">"Distance is {} meters\n"</span>, distance.<span class="built_in">get</span>());</span><br><span class="line">}</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> <span class="keyword">auto</span> distance_meters=<span class="number">3000</span>;</span><br><span class="line"><span class="built_in">print_distance</span>(<span class="built_in">Meter</span>(distance_meters)); <span class="comment">//  ok</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print_distance</span>(<span class="number">3000</span>); <span class="comment">// won't compile</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Avoid-easily-swappable-params">Avoid easily swappable params</h4>
<p>避免两个类型相等的参数很容易错用，注释不如实际类型使用安全。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// good 每个参数都能清楚表达应有的含义</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">visitor</span> {<span class="comment">/**/</span>}</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">Direction</span> {Forward,Backward };</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Config</span>{</span><br><span class="line">    <span class="type">bool</span> ignore_x {<span class="literal">false</span>};</span><br><span class="line">    <span class="type">bool</span> ignore_y {<span class="literal">false</span>};</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Graph</span>{</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">walk</span><span class="params">(visitor v, Direction direction,Config config)</span></span>{}</span><br><span class="line">}</span><br><span class="line">visitor my_visitor;</span><br><span class="line">Config config;</span><br><span class="line">config.ignore_y = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">Graph</span>().<span class="built_in">walk</span>(my_visitor, Direction::Backward, config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad 存在 3 个 bool 参数，可能造成调用错误且造成 api 不容易使用</span></span><br><span class="line"><span class="comment">// void walk(visitora v,bool is_backward, bool ignore_x, bool ignore_y){}</span></span><br><span class="line"><span class="comment">// Graph().walk(my_visitor, false, true, false);</span></span><br></pre></td></tr></tbody></table></figure>
<p>避免相同类型设置为函数签名的参数，除了惯用表达外。更健全的类型能在让编译器更易报错</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// Enum class to the rescue</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">truncate</span> {off,on};</span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">pad</span> {off,on};</span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">fill</span> {off,on};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(std::string_view str, truncate truncate_, pad pad_, fill fill_)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>(){</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"hello"</span>, truncate::on, pad::on, fill::on);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p><a href="https://godbolt.org/z/rb7TvhGc9">fopen API 合理重写</a></p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> FilePtr = std:unique_ptr&lt;FILE,<span class="keyword">decltype</span>([](FILE *f){<span class="built_in">fclose</span>(f);})&gt;</span><br><span class="line"></span><br><span class="line">[[nodiscard]] FilePtr <span class="built_in">fopen</span>(<span class="type">const</span> std:filesystem:path &amp;path,</span><br><span class="line">                            std:string view mode);</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Carefully-think-about-intent">Carefully think about intent</h4>
<p>接口设计要紧贴真实用户意图，关注调用 api 方的可能的行为。</p>
<h4 id="nodiscard"><code>[[nodiscard]]</code></h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://godbolt.org/z/xvrjhjGdK">Functions</a></p>
</li>
</ul>
<p>Instructs the compiler to generate a warning if a return value is dropped.  Can be applied to types or function declarations.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://godbolt.org/z/ad444nqqW">Lambda</a></p>
</li>
</ul>
<p>C++23 fixes a minor loophole in the standard and now allows <code>[[nodiscard]]</code> with lambdas.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://godbolt.org/z/Gdv8YsMcG">Types</a></p>
</li>
<li class="lvl-2">
<p><a href="https://godbolt.org/z/x5e87r7Ka">Constructors in C++20</a></p>
</li>
</ul>
<p>Summary</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Can have a message to explain the error <code>[[nodiscard("Lock objects should never be discarded")]]</code></p>
</li>
<li class="lvl-2">
<p>Should be used extensively.Any non-mutating (getter/accessor/const)</p>
</li>
<li class="lvl-2">
<p>function should be <code>[[nodiscard]]</code></p>
</li>
<li class="lvl-2">
<p>Can be checked enforced with static analysis</p>
</li>
</ul>
<h4 id="noexcept"><code>noexcept</code></h4>
<p><code>noexcept</code> notifies the user (and compiler)that a function may not throw an exception.If an exception is thrown from that function, <a href="https://godbolt.org/z/P1EjKbMsc"><code>terminate</code> MUST be called</a>.</p>
<h4 id="Never-Return-a-Raw-Pointer">Never Return a Raw Pointer</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>It simply raises too many questions.Who owns it?Who deletes it?Is it a singleton global?</p>
</li>
<li class="lvl-2">
<p>Consider owning_ptr, non_owning_ptror some kind of wrapper to document intent,if you must.</p>
</li>
</ul>
<h4 id="Consistent-Error-Handling">Consistent Error Handling</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>Use one consistent method of reporting errors in your library</p>
</li>
<li class="lvl-2">
<p>Strongly avoid out-of-band error reporting <code>(get_last_error() or errno ）</code></p>
</li>
<li class="lvl-2">
<p>Make errors impossible to ignore(no returning an error code!)</p>
</li>
<li class="lvl-2">
<p>Never use std:optional&lt;&gt;to indicate an error condition.(it does not convey a reason, and the reason becomes out of bound).</p>
</li>
<li class="lvl-2">
<p>Consider std::expected&lt;&gt;(C++23) or similar.</p>
</li>
</ul>
<h4 id="Avoid-Implicit-Conversions">Avoid Implicit Conversions</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>std::filesystem::path and std::string-view appear to be strongly typed but are not</p>
</li>
<li class="lvl-2">
<p>Implicit conversions between const char*,string,string_view,and path break type safety</p>
</li>
<li class="lvl-2">
<p>Conversion operators and single parameter constructors (including variadic and ones with default parameters)should beexplicit</p>
</li>
</ul>
<h4 id="delete-Problematic-Overloads">=delete Problematic Overloads</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>Any function can be =deleted</p>
</li>
<li class="lvl-2">
<p>If you =delete a template, it will become the match for any non-exact parameter, and prevent implicit conversions.</p>
</li>
</ul>
<h4 id="Guideline-for-Design-Classes-easy-change-and-extensions">Guideline for Design Classes: easy change and extensions</h4>
<p>Design class fundamental principles</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Single-Responsibility Principle(SRP) - simplify changes</p>
</li>
<li class="lvl-2">
<p>Open-Closed Principle(OCP) - simplify the extensions</p>
</li>
<li class="lvl-2">
<p>Don’t Repeat Yourself(DRY) - simplify change</p>
</li>
</ul>
<p>A strategy-based solution(Separate the structure from the single behavior, and then broker the single behavior with a policy)</p>
<blockquote>
<p>Resist the urge to put everything into one class. Separate concerns!<br>
If you use OO programming, use it properly.</p>
</blockquote>
<p>The Single behavior can be implemented with:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>a class family with inheritance.(90s+ or 00s+)</p>
</li>
<li class="lvl-2">
<p>a template class.(c++11+)</p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> DrawStrategy&gt; <span class="comment">// &lt;--- SRP</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Circle</span>(<span class="type">double</span> rad)</span><br><span class="line">      : radius{rad}</span><br><span class="line">        , <span class="comment">//..Remaining data members</span></span><br><span class="line">        {}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getRadius</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line">    <span class="comment">// ... getCenter(),getRotation(),...</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="comment">/*...*/</span>)</span> <span class="type">const</span> <span class="keyword">override</span> </span>{</span><br><span class="line">        DrawStrategy{}(<span class="keyword">this</span>, <span class="comment">/*...*/</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">serialize</span><span class="params">(<span class="comment">/*...*/</span>)</span><span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line">    <span class="comment">// ... Remaining data members</span></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>a callback function(eg. std::function)(c++11+)</p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>;</span><br><span class="line"><span class="keyword">using</span> DrawCircleStrategy = std::function&lt;<span class="built_in">void</span>(Circle <span class="type">const</span> &amp;)&gt;; <span class="comment">// &lt;--- SRP</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> : <span class="keyword">public</span> Shape {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Circle</span>(<span class="type">double</span> rad, DrawCircleStrategy strategy) <span class="comment">// &lt;--- Dependency Injection</span></span><br><span class="line">      : radius{rad}, <span class="comment">//..Remaining data members</span></span><br><span class="line">        drawing{std::<span class="built_in">move</span>(strategy)} {}</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">getRadius</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line">    <span class="comment">// ... getCenter(),getRotation(),...</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="comment">/*...*/</span>)</span> <span class="type">const</span> <span class="keyword">override</span> </span>{</span><br><span class="line">        <span class="built_in">drawing</span>(<span class="keyword">this</span>, <span class="comment">/*...*/</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">serialize</span><span class="params">(<span class="comment">/*...*/</span>)</span><span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">double</span> radius;</span><br><span class="line">    <span class="comment">// ... Remaining data members</span></span><br><span class="line">    DrawCircleStrategy drawing;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>The template method-based solution(Non-Virtual Interface Idoim(NVI))</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>separated concerns and simplified changed(SRP).</p>
</li>
<li class="lvl-2">
<p>enabled internal changes with no impact on callers.</p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersistenceInterface</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="built_in">PersistenceInterface</span>();</span><br><span class="line">     <span class="keyword">virtual</span> ~<span class="built_in">PersistenceInterface</span>();</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="type">bool</span> <span class="title">write</span><span class="params">( <span class="type">const</span> Blob&amp; blob )</span> </span>{ <span class="comment">// &lt;--- NVI</span></span><br><span class="line">         <span class="built_in">LOG_INFO</span>( <span class="string">"PersistenceInterface::write( Blob ), name = "</span> &lt;&lt;</span><br><span class="line">             blob.<span class="built_in">name</span>() &lt;&lt; <span class="string">": starting..."</span> );</span><br><span class="line">         <span class="keyword">if</span> ( blob.<span class="built_in">name</span>().<span class="built_in">empty</span>() ) {</span><br><span class="line">             <span class="built_in">LOG_ERROR</span>( <span class="string">"PersistenceInterface::write( Blob ): Attempt to"</span></span><br><span class="line">                 <span class="string">" write unnamed blob failed"</span> );</span><br><span class="line">             <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         }</span><br><span class="line">         <span class="type">const</span> <span class="keyword">auto</span> start = std::chrono::<span class="built_in">high_resolution_clock</span>()::<span class="built_in">now</span>();</span><br><span class="line">         <span class="type">const</span> <span class="type">bool</span> success = <span class="built_in">doWrite</span>( blob ); <span class="comment">// call the actual implementation</span></span><br><span class="line">         <span class="type">const</span> <span class="type">uint32_t</span> time = std::chrono::high_resolution_clock::<span class="built_in">now</span>() - start;</span><br><span class="line">         <span class="built_in">LOG_INFO</span>( <span class="string">"PersistenceInterface::write( Blob ), name = "</span> &lt;&lt;</span><br><span class="line">             blob.<span class="built_in">name</span>() &lt;&lt; <span class="string">": Writing blob of size "</span> &lt;&lt; blob.<span class="built_in">size</span>() &lt;&lt;</span><br><span class="line">             <span class="string">" bytes "</span> &lt;&lt; ( success ? <span class="string">"succeeded"</span> : <span class="string">"failed"</span> ) &lt;&lt; <span class="string">" in"</span></span><br><span class="line">             <span class="string">"duration = "</span> &lt;&lt; time.<span class="built_in">count</span>() &lt;&lt; <span class="string">"ms"</span> );</span><br><span class="line">         <span class="keyword">return</span> success;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span>: <span class="comment">// protected?</span></span><br><span class="line">     <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">doWrite</span><span class="params">( <span class="type">const</span> Blob&amp; blob )</span> </span>= <span class="number">0</span>;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>Design for testability. How to test a private member?</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>#define private public. No</p>
</li>
<li class="lvl-2">
<p>Make the test a friend. Maybe</p>
</li>
<li class="lvl-2">
<p>Make the member public. No</p>
</li>
<li class="lvl-2">
<p>Derive the test class from the tested class. Maybe</p>
</li>
<li class="lvl-2">
<p>Separate concerns. Recommended</p>
<ul class="lvl-2">
<li class="lvl-4">Move the member into a private namespace …</li>
<li class="lvl-4">… or into another class (as a separate service).</li>
</ul>
</li>
<li class="lvl-2">
<p>Using gmock to define some <code>MOCK_METHOD</code> to access to private members.</p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">T</span>,</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Allocator</span> = std::allocator&lt;T&gt;</span><br><span class="line">&gt; <span class="keyword">class</span> vector;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">class</span> ForwardIt &gt;</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">( ForwardIt first, ForwardIt last )</span></span>; <span class="comment">// isolated scopes</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Resource-Management">Resource Management</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>If you can avoid defining default operations, do <a href="https://en.cppreference.com/w/cpp/language/rule_of_three">The Rule of 0</a>.</p>
</li>
<li class="lvl-2">
<p>Core Guideline C.32: If a class has a raw pointer (T*) or reference (T&amp;), consider whether it might be owning.</p>
</li>
<li class="lvl-2">
<p>Core Guideline C.33: If a class has an owning pointer member, define a destructor.</p>
</li>
<li class="lvl-2">
<p>Core Guideline R.3: A raw pointer (a T*) is non-owning</p>
</li>
<li class="lvl-2">
<p><a href="#idioms-c">RAII</a> is the most important idioms.</p>
</li>
<li class="lvl-2">
<p>Core Guideline C.21: If you define or =delete any default operation,<br>
define or =delete them all. Manager resources can be possessed by samrt pointers.</p>
<ul class="lvl-2">
<li class="lvl-4">std::unique_ptr(<a href="https://en.cppreference.com/w/cpp/language/rule_of_three">The Rule of 5</a>)</li>
<li class="lvl-4">std::shared_ptr(<a href="https://en.cppreference.com/w/cpp/language/rule_of_three">The Rule of 5/0</a>)</li>
</ul>
</li>
</ul>
<h4 id="Data-Member-Initialization">Data Member Initialization</h4>
<p>Obeying to <a href="https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rc-ctor">Cpp Core Guideline</a></p>
<h4 id="Prefer-Free-Function">Prefer Free Function</h4>
<p>设计功能接口在大多数时候应该使用非成员函数（<a href="https://www.youtube.com/watch?v=WLDT1lDOsb4">free function</a>）</p>
<p>接口设计基本规则遵循：</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">if(f needs to be virtual)</span><br><span class="line">    make f a member function of C;</span><br><span class="line">else if (f is operator &gt;&gt; or operator&lt;&lt; or</span><br><span class="line">        f needs type conversion on its left-most argument)</span><br><span class="line">{</span><br><span class="line">    make f a non-member function;</span><br><span class="line">    if(f needs access to non-public members of C)</span><br><span class="line">        make f a friend of C;</span><br><span class="line">}</span><br><span class="line">else if(f can be-implemented via C's public interface)</span><br><span class="line">    make f a non-member function;</span><br><span class="line">else</span><br><span class="line">    make f a member function of C;</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=zL-vn_pGGgY">jason api design</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=motLOioLJfg&amp;t=64s">klaus lglberger</a></p>
</li>
</ul>
<h4 id="Encapsulate-in-namespace">Encapsulate in namespace</h4>
<p>使用 Namespace 封装隔离，避免命名冲突</p>
<h4 id="Use-std-string-view">Use std::string_view</h4>
<p>使用 std::string_view 提供了一种更安全、更灵活的方式来处理字符串文字，它允许编译时评估，避免潜在的缓冲区溢出，并提供方便的接口来处理字符串</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> std::string_view cnt = <span class="string">"abc"</span>; <span class="comment">// instead of inline const std::string or inline const char*</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Make-constants-in-configuration">Make constants in configuration</h4>
<p>将常量配置配置为读取配置解析获取，避免重复编译.</p>
<h4 id="Comment-the-purpose-and-usage">Comment the purpose and usage</h4>
<p>对代码补充目的性的注释和用法示例，增加可读性.</p>
<h4 id="Use-byte-array-or-data-structure">Use byte array or data structure</h4>
<p>使用字节数组或数据结构表达十六进制流.</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line">std::array&lt;<span class="type">uint8_t</span>,4&gt; bytes{<span class="number">0x1</span>,<span class="number">0x2</span>,<span class="number">0x3</span>,<span class="number">0x4</span>};</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Seal-coupled-parameters">Seal coupled parameters</h4>
<p>但传递的参数时描述一个东西时，考虑将其封装为一个结构。常见的用法是将 buffer 和长度作为参数，此时可考虑将其封装为一个结构或<a href="https://www.sandordargo.com/blog/2024/11/06/std-span">使用 std::span</a>.</p>
<h4 id="Seal-too-many-defaults">Seal too many defaults</h4>
<p>将过多的参数封装为结构体，增加可读性.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=gV7jhTMYkKc">https://www.youtube.com/watch?v=gV7jhTMYkKc</a></p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">server</span>{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">config</span>{</span><br><span class="line">        <span class="type">uint16_t</span> port;</span><br><span class="line">        <span class="type">bool</span> tcp = <span class="literal">true</span>;</span><br><span class="line">        std::string_view address = <span class="string">"0.0.0.0"</span>;</span><br><span class="line">        std::optional&lt;std::string_view&gt; multicast = std::<span class="literal">nullopt</span>;</span><br><span class="line">        <span class="type">bool</span> nonblocking = <span class="literal">true</span></span><br><span class="line">    };</span><br><span class="line">    <span class="built_in">server</span>(config);</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>(){</span><br><span class="line">    <span class="comment">// require c++20</span></span><br><span class="line">    <span class="function">server <span class="title">s</span><span class="params">({.port = <span class="number">1666</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            .tcp = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            .address = <span class="string">"127.0.0.1"</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            .nonblocking = <span class="literal">false</span>})</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Must-be-initialized">Must be initialized</h4>
<p>C++20 提供了结构体命名委托初始化器，若没有传参数，gcc -Wextra 给出警告，clang/msvc 不做检查，所以有必要对类型设置必须初始化约束.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=gV7jhTMYkKc">https://www.youtube.com/watch?v=gV7jhTMYkKc</a></p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">must_init</span>{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// no default constructor</span></span><br><span class="line">    <span class="built_in">must_init</span>(T t): <span class="built_in">value</span>(std::<span class="built_in">move</span>(t)) {}</span><br><span class="line">    <span class="keyword">operator</span> T&amp;() { <span class="keyword">return</span> value; }</span><br><span class="line">    <span class="keyword">operator</span> <span class="type">const</span> T&amp;() <span class="type">const</span> { <span class="keyword">return</span> value; }</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T value;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">server</span>{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">config</span>{</span><br><span class="line">        must_init&lt;<span class="type">uint16_t</span>&gt; port; <span class="comment">// failure to init is now a compiler error</span></span><br><span class="line">        <span class="type">bool</span> tcp = <span class="literal">true</span>;</span><br><span class="line">        std::string_view address = <span class="string">"0.0.0.0"</span>;</span><br><span class="line">        std::optional&lt;std::string_view&gt; multicast = std::<span class="literal">nullopt</span>;</span><br><span class="line">        <span class="type">bool</span> nonblocking = <span class="literal">true</span></span><br><span class="line">    };</span><br><span class="line">    <span class="built_in">server</span>(config);</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Create-Unique-type-with-enum-for-Integer-types">Create Unique type with enum for Integer types</h4>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">server_id</span>: <span class="type">int</span> {};</span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">client_id</span>: <span class="type">int</span> {};</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Error-Handling-Strategies">Error Handling Strategies</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://johnfarrier.com/c-error-handling-strategies-benchmarks-and-performance/">https://johnfarrier.com/c-error-handling-strategies-benchmarks-and-performance/</a></p>
</li>
</ul>
<h3 id="Design-Pattern">Design Pattern</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/playlist?list=PLalVdRk2RC6otl3oBU2cn-P6DWi1y1PS3">https://www.youtube.com/playlist?list=PLalVdRk2RC6otl3oBU2cn-P6DWi1y1PS3</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/431714886">https://zhuanlan.zhihu.com/p/431714886</a></p>
</li>
</ul>
<!-- todo -->
<h3 id="Idioms-C">Idioms C++</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.modernescpp.com/index.php/table-of-content/#top">mordernescpp.com</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E6%96%BC%E5%8E%9F%E5%89%87%E8%A8%AD%E8%A8%88">基於原則設計</a></p>
</li>
<li class="lvl-2">
<p><a href="https://en.wikibooks.org/wiki/Category:Book:More_C%2B%2B_Idioms">More C++ Idioms</a></p>
</li>
<li class="lvl-2">
<p><a href="https://en.wikibooks.org/w/index.php?title=More_C%2B%2B_Idioms/Print_Version&amp;oldid=2452097&amp;diff=cur&amp;diffonly=0">https://en.wikibooks.org/w/index.php?title=More_C%2B%2B_Idioms/Print_Version&amp;oldid=2452097&amp;diff=cur&amp;diffonly=0</a></p>
</li>
</ul>
<h4 id="X-Macro">X Macro</h4>
<p><a href="https://en.wikipedia.org/wiki/X_Macro">X macro</a> 是一种可靠地维护并行代码和 / 或数据列表的技术，其对应的项必须以相同的顺序声明或执行，例如，列表元素的定义在 <code>.inl</code> 文件中 <a href="https://godbolt.org/z/G19vMWTPe">示例</a>。</p>
<h4 id="RAII-Resource-Acquisition-Is-Initialization">RAII-Resource Acquisition Is Initialization</h4>
<p>资源获取即初始化 （简称 <a href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Resource_Acquisition_Is_Initialization">RAII</a> ）是 C++ 防止内存泄露一个很好解决方案，它结合构造函数和析构函数，把资源生命周期和对象生命周期绑定起来，在构造函数中获取资源（这些错误会引发异常），然后将其释放到析构函数中（永不抛出），并且不需要显式清理，从而防止忘记释放资源；<a href="https://godbolt.org/z/46nrYGhsc">参考示例</a>。</p>
<h4 id="Thread-safe-singleton">Thread-safe singleton</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton/">https://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton/</a></p>
</li>
</ul>
<h4 id="Policy-based-class-Design">Policy-based class Design</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://www.modernescpp.com/index.php/policy-and-traits">mordernescpp policy-and-traits</a>。</p>
</li>
</ul>
<p>基于策略设计又名 policy-based class design 是一种基于 C<ins> 计算机程序设计模式，以策略（Policy）为基础，并结合 C</ins> 的模板元编程。就是将原本复杂的系统，拆解成多个独立运作的 “策略类别”，每一组 policy class 都只负责单纯如行为或结构的某一方面。多重继承由于继承自多组 Base Class，故缺乏型别消息，而 Templetes 基于型别，拥有丰富的型别消息。多重继承容易扩张，而 Templetes 的特化不容易扩张。Policy-Based Class Design 同时使用了 Template 以及 Multiple Inheritance 两项技术，结合两者的优点，看下面例子：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Policy1</span>, <span class="keyword">class</span> <span class="title class_">Policy2</span>, <span class="keyword">class</span> <span class="title class_">Policy3</span>&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PolicyBasedClass</span> : <span class="keyword">public</span> Policy1, <span class="keyword">public</span> Policy2, <span class="keyword">public</span> Policy3 {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">PolicyBasedClass</span>(){};</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>PolicyBasedClass 则称为宿主类别（host class），只需要切换不同 Policy Class，就可以得到不同的需求。Policy 不一定要被宿主（host）继承，只需要用委托（delegation）完成这一工作。但 policies 必须遵守一个隐含的 constraint，接口（interface）必须一样，故参数不能有巨大改变。</p>
<p>Policy class 有点类似回调函数（callbacks），但不同的是，callback 只是一个函数，至于 policy class 则尽可能包含许多的 functions (methods), 有时还会结合状态变量（state variables）与其他各式各样的类型，如嵌套类型（nested types）。</p>
<p>policy 的一个重要的特征是，宿主类别（host class）经常（并不一定要）使用多重继承的机制去使用多个 policy classes. 因此在进行 policy 拆解时，必须要尽可能达成正交分解（Orthogonal Decomposition），policy 彼此独立运作，不相互影响。</p>
<h5 id="Template-Template-Parameter">Template Template Parameter</h5>
<p>在 C++ 的 Policy-Based Design 中，用来建构 Template 的类别参数（也就是 policy class），本身亦可以是一个 Template 化的类别，形成所谓的 Template Template Parameter。</p>
<p>如果 Read ()、Write () 有各种不同类型的参数时，可以利用 template 的不完全具现化 (Incomplement Instantiation) 特征检实现各个参数不同的成员函数（member function）。在 host class 中，可以撰写不同参数版本的 Read (…) 函数，这有赖于 c++ compiler 的协助。</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span></span><br><span class="line">&lt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">T</span>,</span><br><span class="line">    <span class="keyword">template</span>&lt; <span class="keyword">class</span> &gt; <span class="keyword">class</span> <span class="title class_">ReadPolicy</span>,</span><br><span class="line">    <span class="keyword">template</span>&lt; <span class="keyword">class</span> &gt; <span class="keyword">class</span> <span class="title class_">WritePolicy</span></span><br><span class="line">&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ResourceManager</span></span><br><span class="line">    :</span><br><span class="line">    <span class="keyword">public</span> ReadPolicy&lt; T &gt;,</span><br><span class="line">    <span class="keyword">public</span> WritePolicy&lt; T &gt;</span><br><span class="line">{</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">Read</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">Write</span><span class="params">(XmlElement*)</span></span>;</span><br><span class="line">   <span class="function"><span class="type">void</span> <span class="title">Write</span><span class="params">(DataSource*)</span></span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">  ResourceManager&lt; AnimationEntity, BinaryReader, BinaryWriter &gt; ResMgr1;</span><br><span class="line">  ResourceManager&lt; ScriptEntity, TextReader, TextWriter &gt; ResMgr2;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>上述的 class T 即是一个 Template Template Parameter，这使得 Policy Class 更具扩展性与弹性，能够处理各种类型的实体（instance）。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Hello World 简单示例</p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;</span><br><span class="line">    <span class="keyword">typename</span> output_policy,</span><br><span class="line">    <span class="keyword">typename</span> language_policy</span><br><span class="line">&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld</span></span><br><span class="line">  : <span class="keyword">public</span> output_policy,</span><br><span class="line">    <span class="keyword">public</span> language_policy</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">using</span> output_policy::Print;</span><br><span class="line">    <span class="keyword">using</span> language_policy::Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">//behaviour method</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">//two policy methods</span></span><br><span class="line">        <span class="built_in">Print</span>( <span class="built_in">Message</span>() );</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld_OutputPolicy_WriteToCout</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> message_type &gt;</span></span><br><span class="line"><span class="function">    <span class="type">void</span> <span class="title">Print</span><span class="params">( message_type message )</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        std::cout &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld_LanguagePolicy_English</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">Message</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, World!"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorld_LanguagePolicy_German</span>{</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function">std::string <span class="title">Message</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hallo Welt!"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/* example 1 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span></span><br><span class="line">        HelloWorld&lt;</span><br><span class="line">            HelloWorld_OutputPolicy_WriteToCout,</span><br><span class="line">            HelloWorld_LanguagePolicy_English</span><br><span class="line">        &gt;</span><br><span class="line">            my_hello_world_type;</span><br><span class="line"></span><br><span class="line">    my_hello_world_type hello_world;</span><br><span class="line">    hello_world.<span class="built_in">Run</span>(); <span class="comment">//returns Hello World!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* example 2</span></span><br><span class="line"><span class="comment"> * does the same but uses another policy, the language has changed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span></span><br><span class="line">        HelloWorld&lt;</span><br><span class="line">            HelloWorld_OutputPolicy_WriteToCout,</span><br><span class="line">            HelloWorld_LanguagePolicy_German</span><br><span class="line">        &gt;</span><br><span class="line">            my_other_hello_world_type;</span><br><span class="line"></span><br><span class="line">    my_other_hello_world_type hello_world2;</span><br><span class="line">    hello_world<span class="number">2.</span><span class="built_in">Run</span>(); <span class="comment">//returns Hallo Welt!</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>后续可以更容易的撰写其他的 Output policy, 单靠创造更新的 Policy class 并实现 print 于其中。</p>
<h4 id="Pimpl-Pointer-to-implementation">Pimpl - Pointer to implementation</h4>
<p><a href="https://zh.cppreference.com/w/cpp/language/pimpl">Pimpl</a> 是一种广泛使用的削减编译依赖项的技术，具体讨论<a href="https://herbsutter.com/gotw/_100/">参考</a>，看下面例子可能就明白了：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// cppreference 官方示例</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;experimental/propagate_const&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------</span></span><br><span class="line"><span class="comment">// 接口（widget.h）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">widget</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">impl</span>; <span class="comment">// 实现类的前置声明</span></span><br><span class="line">    std::experimental::propagate_const&lt; <span class="comment">// 转发 const 的指针包装器</span></span><br><span class="line">        std::unique_ptr&lt; <span class="comment">// 唯一所有权的不透明指针</span></span><br><span class="line">            impl&gt;&gt; pImpl; <span class="comment">// 指向前置声明的实现类</span></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">// 公开成员</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">// 公开 API，将被转发给实现</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">shown</span><span class="params">()</span> <span class="type">const</span> </span>{ <span class="keyword">return</span> <span class="literal">true</span>; } <span class="comment">// 公开 API，实现必须调用它</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">widget</span>(<span class="type">int</span>);</span><br><span class="line">    ~<span class="built_in">widget</span>(); <span class="comment">// 在实现文件中定义，其中 impl 是完整类型</span></span><br><span class="line">    <span class="built_in">widget</span>(widget&amp;&amp;); <span class="comment">// 在实现文件中定义</span></span><br><span class="line">                      <span class="comment">// 注意：在被移动的对象上调用 draw() 是未定义行为</span></span><br><span class="line">    <span class="built_in">widget</span>(<span class="type">const</span> widget&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">    widget&amp; <span class="keyword">operator</span>=(widget&amp;&amp;); <span class="comment">// 在实现文件中定义</span></span><br><span class="line">    widget&amp; <span class="keyword">operator</span>=(<span class="type">const</span> widget&amp;) = <span class="keyword">delete</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------</span></span><br><span class="line"><span class="comment">// 实现（widget.cpp）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">widget</span>::impl</span><br><span class="line">{</span><br><span class="line">    <span class="type">int</span> n; <span class="comment">// 私有数据</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">const</span> widget&amp; w)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span>(w.<span class="built_in">shown</span>()) <span class="comment">// 对公开成员函数的此调用要求回溯引用</span></span><br><span class="line">            std::cout &lt;&lt; <span class="string">"正在绘制 const 组件 "</span> &lt;&lt; n &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">draw</span><span class="params">(<span class="type">const</span> widget&amp; w)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">if</span>(w.<span class="built_in">shown</span>())</span><br><span class="line">            std::cout &lt;&lt; <span class="string">"正在绘制非 const 组件 "</span> &lt;&lt; n &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="built_in">impl</span>(<span class="type">int</span> n) : <span class="built_in">n</span>(n) {}</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">widget::draw</span><span class="params">()</span> <span class="type">const</span> </span>{ pImpl-&gt;<span class="built_in">draw</span>(*<span class="keyword">this</span>); }</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">widget::draw</span><span class="params">()</span> </span>{ pImpl-&gt;<span class="built_in">draw</span>(*<span class="keyword">this</span>); }</span><br><span class="line">widget::<span class="built_in">widget</span>(<span class="type">int</span> n) : pImpl{std::<span class="built_in">make_unique</span>&lt;impl&gt;(n)} {}</span><br><span class="line">widget::<span class="built_in">widget</span>(widget&amp;&amp;) = <span class="keyword">default</span>;</span><br><span class="line">widget::~<span class="built_in">widget</span>() = <span class="keyword">default</span>;</span><br><span class="line">widget&amp; widget::<span class="keyword">operator</span>=(widget&amp;&amp;) = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------</span></span><br><span class="line"><span class="comment">// 用户（main.cpp）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="function">widget <span class="title">w</span><span class="params">(<span class="number">7</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">const</span> widget <span class="title">w2</span><span class="params">(<span class="number">8</span>)</span></span>;</span><br><span class="line">    w.<span class="built_in">draw</span>();</span><br><span class="line">    w<span class="number">2.</span><span class="built_in">draw</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>此技巧用于构造拥有稳定 ABI 的 C++ 库接口，及减少编译时依赖。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="http://www.modernescpp.com/index.php/the-bridge-pattern">morderncpp</a>。</p>
</li>
</ul>
<h4 id="CRTP-The-curiously-recurring-template-pattern">CRTP -The curiously recurring template pattern</h4>
<p><a href="https://zh.wikipedia.org/wiki/%E5%A5%87%E5%BC%82%E9%80%92%E5%BD%92%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F">CRTP</a> (奇异递归模板模式）是一种在编译期实现多态方法，是对运行时多态一种优化，多态是个很好的特性，但是动态绑定比较慢，因为要查虚函数表。而使用 CRTP，完全消除了动态绑定，降低了继承带来的虚函数表查询开销。</p>
<p><a href="https://en.cppreference.com/w/cpp/language/crtp">CRTP cpp reference 示例</a> 包含：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>从模板类继承，</p>
</li>
<li class="lvl-2">
<p>使用派生类本身作为基类的模板参数。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __cpp_explicit_this_parameter <span class="comment">// Traditional syntax</span></span></span><br><span class="line"><span class="comment">// see https://cppinsights.io/s/82b200f2 from C++ insight result</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Derived</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span> { <span class="function"><span class="type">void</span> <span class="title">name</span><span class="params">()</span> </span>{ (<span class="built_in">static_cast</span>&lt;Derived*&gt;(<span class="keyword">this</span>))-&gt;<span class="built_in">impl</span>(); } };</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">D1</span> : <span class="keyword">public</span> Base&lt;D1&gt; { <span class="function"><span class="type">void</span> <span class="title">impl</span><span class="params">()</span> </span>{ std::<span class="built_in">puts</span>(<span class="string">"D1::impl()"</span>); } };</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">D2</span> : <span class="keyword">public</span> Base&lt;D2&gt; { <span class="function"><span class="type">void</span> <span class="title">impl</span><span class="params">()</span> </span>{ std::<span class="built_in">puts</span>(<span class="string">"D2::impl()"</span>); } };</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">    Base&lt;D1&gt; b1; b<span class="number">1.</span><span class="built_in">name</span>();</span><br><span class="line">    Base&lt;D2&gt; b2; b<span class="number">2.</span><span class="built_in">name</span>();</span><br><span class="line">    D1 d1; d<span class="number">1.</span><span class="built_in">name</span>();</span><br><span class="line">    D2 d2; d<span class="number">2.</span><span class="built_in">name</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">// C++23 alternative syntax from https://godbolt.org/z/s1o6qTMnP</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Base</span> { <span class="function"><span class="type">void</span> <span class="title">name</span><span class="params">(<span class="keyword">this</span> <span class="keyword">auto</span>&amp;&amp; self)</span> </span>{ self.<span class="built_in">impl</span>(); } };</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">D1</span> : <span class="keyword">public</span> Base { <span class="function"><span class="type">void</span> <span class="title">impl</span><span class="params">()</span> </span>{ std::<span class="built_in">puts</span>(<span class="string">"D1::impl()"</span>); } };</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">D2</span> : <span class="keyword">public</span> Base { <span class="function"><span class="type">void</span> <span class="title">impl</span><span class="params">()</span> </span>{ std::<span class="built_in">puts</span>(<span class="string">"D2::impl()"</span>); } };</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span> </span>{</span><br><span class="line">    D1 d1; d<span class="number">1.</span><span class="built_in">name</span>();</span><br><span class="line">    D2 d2; d<span class="number">2.</span><span class="built_in">name</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="built_in">test</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这样做的目的是在基类中使用派生类。从基础对象的角度来看，派生对象本身就是对象，但是是向下转换的对象。因此，基类可以通过将 static_cast 自身放入派生类来访问派生类.</p>
<p>实现简单策略调用示例</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义引线识别模板</span></span><br><span class="line"><span class="comment"> * @note 子类需要定义 PolicyImpl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @tparam Policy 策略子类实现</span></span><br><span class="line"><span class="comment"> * @tparam R 返回类型约束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Policy, <span class="keyword">typename</span> R&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LeadBasePolicy</span> {</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LeadBasePolicy</span>(<span class="type">const</span> DataPtr&amp; data, <span class="type">const</span> AiTextPtr&amp; ref_text)</span><br><span class="line">        : <span class="built_in">ref_text</span>(ref_text), <span class="built_in">data</span>(data) {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line">    <span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="comment">// 保留返回修饰限定</span></span><br><span class="line">    <span class="built_in">DoPolicy</span>(Args&amp;&amp;... args) {</span><br><span class="line">        <span class="built_in">static_assert</span>(</span><br><span class="line">            std::is_same_v&lt;</span><br><span class="line">                std::<span class="type">decay_t</span>&lt;R&gt;,</span><br><span class="line">                std::<span class="type">decay_t</span>&lt;</span><br><span class="line">                    <span class="keyword">decltype</span>(</span><br><span class="line">                        <span class="built_in">static_cast</span>&lt;Policy*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">PolicyImpl</span>(</span><br><span class="line">                            std::forward&lt;Args&gt;(args)...</span><br><span class="line">                        )</span><br><span class="line">                    )</span><br><span class="line">                &gt;</span><br><span class="line">            &gt;,</span><br><span class="line">            <span class="string">"R must be same as  the return type of PolicyImpl"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static_cast</span>&lt;Policy*&gt;(<span class="keyword">this</span>)-&gt;<span class="built_in">PolicyImpl</span>(std::forward&lt;Args&gt;(args)...);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="type">const</span> AiTextPtr&amp; ref_text{};</span><br><span class="line">    <span class="type">const</span> DataPtr&amp; data{};</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述文本查找相对引线策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @code {.cpp}</span></span><br><span class="line"><span class="comment"> * auto line_ptr = TextLinePolicy(data,text).DoPolicy();</span></span><br><span class="line"><span class="comment"> * assert(line_ptr);</span></span><br><span class="line"><span class="comment"> * @endcode</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextLinePolicy</span> : <span class="keyword">public</span> LeadBasePolicy&lt;TextLinePolicy, AiLinePtr&gt; {</span><br><span class="line">    <span class="keyword">friend</span> LeadBasePolicy;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">using</span> LeadBasePolicy::LeadBasePolicy;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 策略实际实现的文本关联线段搜索</span></span><br><span class="line"><span class="comment">     * PolicyImpl 可被子类重写，进行调用分发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">AiLinePtr <span class="title">PolicyImpl</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">auto</span> line_ptr = <span class="built_in">RangeSearch</span>();</span><br><span class="line">        <span class="keyword">return</span> line_ptr ? line_ptr : <span class="built_in">NearSearch</span>();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 策略1，文本范围附近引线线段搜索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">AiLinePtr <span class="title">RangeSearch</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @brief 策略2，距离文本附近最近的三个条线搜索</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">AiLinePtr <span class="title">NearSearch</span><span class="params">()</span></span>;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<h4 id="HAP-Handler-on-Aggregation-with-Polymorphism">HAP - Handler on Aggregation with Polymorphism</h4>
<p><a href="https://godbolt.org/z/8hM8v93GM">HAP</a> 提供了一种方法如何在使用多态和虚方法时保持通用性和良好的性能，以及如何使用聚合。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>虚方法对集合整体分发一次。</p>
</li>
<li class="lvl-2">
<p>使用基于类策略模式简化策略 Handler 的调用。</p>
</li>
<li class="lvl-2">
<p>处理器 Handler 仅在运行时可知。</p>
</li>
</ul>
<h4 id="NVI-Non-Virtual-Interface">NVI - Non Virtual Interface</h4>
<p>仅暴露非虚方法接口，避免调用歧义.</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HandlerBase</span> {</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(std::span&lt;Element&gt; elements)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span>(Element e : elements) {<span class="built_in">handle</span>(std::<span class="built_in">move</span>(e)); }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">handle</span><span class="params">(Element element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Handler</span> : <span class="keyword">public</span> HandlerBase {</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handle</span><span class="params">(Element element)</span> <span class="keyword">override</span></span>{}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<h4 id="MutextProtected">MutextProtected</h4>
<p>这里提供了一种 C++ 方式的并行访问数据加锁模式，通常通过 RAII 实现。</p>
<p>另见，<a href="https://awesomekling.github.io/MutexProtected-A-C++-Pattern-for-Easier-Concurrency/">Andreas Kling - MutextProtected</a>、<a href="https://github.com/facebook/folly/blob/main/folly/docs/Synchronized.md">Synchronized - folly</a>、<a href="https://www.reddit.com/r/cpp/comments/12def1f/mutexprotected_a_c_pattern_for_easier_concurrency/">MutextProtected - reddit</a>。</p>
<h4 id="TEBI-Type-erease-better-than-inheritance">TEBI - Type erease better than inheritance</h4>
<p>在解耦，类型擦除更优于继承，避免了多重继承，导致依赖过多。</p>
<p>参考示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://godbolt.org/z/ze8frr9oK">https://godbolt.org/z/ze8frr9oK</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.zhihu.com/question/37391884/answer/2740375441">https://www.zhihu.com/question/37391884/answer/2740375441</a></p>
</li>
</ul>
<h3 id="Dependency-Injection">Dependency Injection</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>抽离实际系统的简单的系统或部分功能。</p>
</li>
<li class="lvl-2">
<p>不适用于小项目</p>
</li>
<li class="lvl-2">
<p>暂时不关注，用于之后追加</p>
</li>
<li class="lvl-2">
<p>用于测试</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=_UTgOC6jW8o">https://www.youtube.com/watch?v=_UTgOC6jW8o</a></p>
</li>
</ul>
<h4 id="基本流程">基本流程</h4>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">Data in(Usage) -&gt; |Interface -&gt; Capture(Implementation) -&gt; Synthesize(Implementation) -&gt; |Interface -&gt; Results out(Usage)</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/122237604.png" alt="image"></p>
<h4 id="基本方法">基本方法</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用方法参数注入 Link-time（不建议使用）</p>
</li>
<li class="lvl-2">
<p>使用虚方法和继承</p>
</li>
<li class="lvl-2">
<p>使用模板</p>
</li>
<li class="lvl-2">
<p>使用类型擦除</p>
</li>
</ul>
<h5 id="方法参数">方法参数</h5>
<p>需要实现两次，一侧用于实际生产的代码，另一侧实现用于测试</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/122321446.png" alt="image"></p>
<p>pros:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对实际代码不改变</p>
</li>
<li class="lvl-2">
<p>允许一定范围的测试<br>
cons:</p>
</li>
<li class="lvl-2">
<p>难以管理，需要对测试的组件部分都写一遍</p>
</li>
<li class="lvl-2">
<p>违反 ODR/UB</p>
</li>
<li class="lvl-2">
<p>更像集成测试</p>
</li>
</ul>
<h5 id="使用虚方法和继承">使用虚方法和继承</h5>
<p>创建一个接口基类，或从存在的类继承</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>能处理很多接口</p>
</li>
<li class="lvl-2">
<p>易于理解的重写机制</p>
</li>
<li class="lvl-2">
<p>易于增加到原有的代码</p>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/122423034.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/122133242.png" alt="image"></p>
<p>google mock 示例：<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/122539805.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/122714872.png" alt="image"></p>
<h5 id="使用模板">使用模板</h5>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/122943427.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/123058341.png" alt="image"></p>
<p>gmock 示例：<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/123117721.png" alt="image"></p>
<p>c++20 concept：<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/123153107.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/123351709.png" alt="image"></p>
<h5 id="使用类型擦除">使用类型擦除</h5>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/123542806.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/124158424.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/124335397.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/124448163.png" alt="image"></p>
<h4 id="Dependency-Injection-Basic">Dependency Injection Basic</h4>
<h5 id="Setter-DI">Setter DI</h5>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/125543530.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/125638512.png" alt="image"></p>
<h5 id="Method-DI">Method DI</h5>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/125724490.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/130002008.png" alt="image"></p>
<h4 id="Constructor-DI">Constructor DI</h4>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/130050927.png" alt="image"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20241117/130127444.png" alt="image"></p>
<h3 id="Reflection">Reflection</h3>
<!--
todo
https://woboq.com/blog/reflection-in-cpp-and-qt-moc.html
https://github.com/woboq/verdigris
https://www.youtube.com/watch?v=DUiUBt-fqEY

https://chibash.github.io/public/opencxx/

http://www.vollmann.com/en/pubs/meta/index.html

https://herbsutter.com/2017/07/26/metaclasses-thoughts-on-generative-c/
 -->
<h3 id="lock-free">lock-free</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>原子操作 (atomic operation): <a href="https://zh.cppreference.com/w/cpp/atomic">atomic</a></p>
</li>
<li class="lvl-2">
<p>lock-free data structure</p>
</li>
<li class="lvl-2">
<p>内存顺序 (memory ordering): <a href="https://zh.cppreference.com/w/cpp/atomic/memory_order">memory_order</a></p>
</li>
<li class="lvl-2">
<p>原子标志 (atomic flag): <a href="https://zh.cppreference.com/w/cpp/atomic/atomic_flag">atomic_flag</a></p>
</li>
</ul>
<h3 id="ABI-C">ABI C++</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://maskray.me/blog/2020-11-08-stack-unwinding">https://maskray.me/blog/2020-11-08-stack-unwinding</a></p>
</li>
</ul>
<h4 id="unwind-exception-堆栈异常展开">unwind exception 堆栈异常展开</h4>
<p>这里介绍 C++ exception handling，stack unwinding 的一个应用。Exception handling 有多种 ABI (interoperability of C++ implementations)，其中应用最广泛的是 <a href="https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html">Itanium C++ ABI: Exception Handling</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>reference</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://maskray.me/blog/2020-12-12-c++-exception-handling-abi">https://maskray.me/blog/2020-12-12-c++-exception-handling-abi</a></li>
</ul>
</li>
</ul>
<h4 id="stack-unwind-堆栈展开">stack unwind 堆栈展开</h4>
<p>Stack unwinding 主要有以下作用：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>获取 stack trace，用于 debugger、crash reporter、profiler、garbage collector 等</p>
</li>
<li class="lvl-2">
<p>加上 personality routine 和 language specific data area 后实现 C++ exceptions (Itanium C++ ABI)。参见 <a href="https://maskray.me/blog/2020-12-12-c++-exception-handling-abi">C++ exception handling ABI</a></p>
</li>
</ul>
<p>Stack unwinding 可以分成两类：</p>
<p>synchronous: 程序自身触发的，C++ throw、获取自身 stack trace 等。这类 stack unwinding 只发生在函数调用处 (在 function body 内，不会出现在 prologue/epilogue)<br>
asynchronous: 由 signal 或外部程序触发，这类 stack unwinding 可以发生在函数 prologue/epilogue</p>
<h4 id="MinGW-ABI">MinGW ABI</h4>
<p>How to Link MSVC DLLs with MinGW GCC in Windows</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.dynamsoft.com/codepool/mingw-gcc-link-msvc-dll.html">https://www.dynamsoft.com/codepool/mingw-gcc-link-msvc-dll.html</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/34177792/link-a-msvc-compiled-dll-in-a-mingw-built-project">https://stackoverflow.com/questions/34177792/link-a-msvc-compiled-dll-in-a-mingw-built-project</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/67953800/linking-a-mingw-library-to-a-msvc-app-with-a-c-interface">https://stackoverflow.com/questions/67953800/linking-a-mingw-library-to-a-msvc-app-with-a-c-interface</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/2529770/how-to-use-libraries-compiled-with-mingw-in-msvc/3031167#3031167">https://stackoverflow.com/questions/2529770/how-to-use-libraries-compiled-with-mingw-in-msvc/3031167#3031167</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/7241047/linking-lib-files-with-mingw">https://stackoverflow.com/questions/7241047/linking-lib-files-with-mingw</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/a/62896540/18916219">interoperability of libraries created by different compilers brands</a></p>
</li>
</ul>
<h3 id="Native-API">Native API</h3>
<h4 id="jni">jni</h4>
<p>java 提供 <a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/invocation.html#wp16334">invocation api</a> 供三方调用 jvm native api</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/jniTOC.html">jni TOC</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/functions.html">jni function</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html#type_signatures">jni type signature</a></p>
</li>
</ul>
<p>QA:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建 JVM 虚拟机及句柄：</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://stackoverflow.com/questions/35583247/fetch-java-vm-reference-create-java-object-from-c-and-concurrency">fetch-java-vm-reference-create-java-object-from-c-and-concurrency</a></li>
<li class="lvl-4"><a href="https://stackoverflow.com/questions/35870349/can-you-create-a-new-jvm-in-a-c-function-called-from-java-using-jni">can-you-create-a-new-jvm-in-a-c-function-called-from-java-using-jni</a></li>
</ul>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.codeproject.com/articles/993067/calling-java-from-cplusplus-with-jni">call java from cpp with jni</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/qq_27061049/article/details/115700096">cmake jvm 结合供 java 和 cpp 互调</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/8850202/use-jar-file-in-c-c">cpp call java using jar</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.baeldung.com/jni">baeldung jni</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/eugenp/tutorials/tree/master/java-native">github java native</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=87uMi7L-3Hc">Java JNI tutorial on youtube</a></p>
</li>
</ul>
<h3 id="Weekly-Practice">Weekly Practice</h3>
<h4 id="Void-Pointer-Arithmetic">Void Pointer Arithmetic</h4>
<p>避免指针运算有利于提高安全及代码通用性</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://godbolt.org/z/6Mrb1hne3">https://godbolt.org/z/6Mrb1hne3</a></p>
</li>
</ul>
<h4 id="std-expected-std-optional">std::expected/std::optional</h4>
<p>c++23 提出的有力的返回值 / 错误处理工具。向后兼容实现 <a href="https://github.com/TartanLlama/expected">tl-expected</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://en.cppreference.com/w/cpp/utility/expected/expected">https://en.cppreference.com/w/cpp/utility/expected/expected</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.modernescpp.com/index.php/c23-a-new-way-of-error-handling-with-stdexpected/">https://www.modernescpp.com/index.php/c23-a-new-way-of-error-handling-with-stdexpected/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://devcodef1.com/news/1015062/std-expected-vs-exceptions-in-c">什么时候用 std::expected</a></p>
</li>
<li class="lvl-2">
<p><a href="http://www.ashermancinelli.com/std-expected">http://www.ashermancinelli.com/std-expected</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/jimmiebergmann">expected 使用示例</a></p>
</li>
</ul>
<h3 id="core-guideline">core guideline</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.modernescpp.com/index.php/category/blog/modern-c/">https://www.modernescpp.com/index.php/category/blog/modern-c/</a></p>
</li>
</ul>
<h3 id="Development-Utilities">Development Utilities</h3>
<p>这里搜集了一些用于增强 cpp 开发效率的工具。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=o1JinIcoz24">gdb quick start</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=OSCWvBpgKpk">rr quick start</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=7khWZ6_WzPU">sanitizer quick start</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=ykXZdYs9cOw">valgrind quick start</a></p>
</li>
</ul>
<h2 id="Optimization">Optimization</h2>
<h3 id="perf">perf</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/25129751/how-can-i-use-perf-to-profile-my-code">https://stackoverflow.com/questions/25129751/how-can-i-use-perf-to-profile-my-code</a></p>
</li>
<li class="lvl-2">
<p><a href="https://dev.to/etcwilde/perf---perfect-profiling-of-cc-on-linux-of">https://dev.to/etcwilde/perf---perfect-profiling-of-cc-on-linux-of</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/fenbf/AwesomePerfCpp">https://github.com/fenbf/AwesomePerfCpp</a></p>
</li>
</ul>
<h3 id="Guidelines">Guidelines</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.geeksforgeeks.org/competitive-programming-a-complete-guide">https://www.geeksforgeeks.org/competitive-programming-a-complete-guide</a></p>
</li>
<li class="lvl-2">
<p>the art of writing efficient programs</p>
</li>
</ul>
<h3 id="测试">测试</h3>
<h4 id="依赖非代码文件">依赖非代码文件</h4>
<p>当测试代码依赖于非代码文件时，需要慎重考虑，是否能拆成更小的测试用例，或者使用 mock 对象。</p>
<p>如果无法避免，可以使用合理的资源管理机制。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.sandordargo.com/blog/2024/02/21/cpp-tests-with-resources">https://www.sandordargo.com/blog/2024/02/21/cpp-tests-with-resources</a></p>
</li>
</ul>
<h4 id="GTest-Main">GTest Main</h4>
<!--
https://google.github.io/googletest/advanced.html
https://google.github.io/googletest/gmock_for_dummies.html
https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md
 -->
<p>当 Gtest 开启在 cmake 中配置时，可以忽略在测试文件中 main 定义</p>
<figure class="highlight cmake"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(GoogleTest)</span><br><span class="line">gtest_discover_tests(targets)</span><br></pre></td></tr></tbody></table></figure>
<p>通常省略以下定义</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span>* argv[])</span> </span>{</span><br><span class="line">    testing::<span class="built_in">InitGoogleTest</span>(&amp;argc, <span class="built_in">const_cast</span>&lt;<span class="type">char</span>**&gt;(argv));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">RUN_ALL_TESTS</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="语义优化（语言相关）">语义优化（语言相关）</h3>
<h4 id="减少-virtual">减少 virtual</h4>
<p><a href="https://www.youtube.com/watch?v=gTNJXVmuRRA">使用静态多态替代动态多态</a></p>
<h4 id="cin-tie-和-ios-sync-with-stdio">cin.tie 和 ios::sync_with_stdio</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio">sync_with_stdio</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zh.cppreference.com/w/cpp/io/cin">cin.tie</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://godbolt.org/z/EM9PET1oo">加速 IO 测试</a>。</p>
</li>
<li class="lvl-2">
<p><a href="https://www.geeksforgeeks.org/fast-io-for-competitive-programming">https://www.geeksforgeeks.org/fast-io-for-competitive-programming</a></p>
</li>
</ul>
<h3 id="算法">算法</h3>
<h4 id="数据结构（容器）">数据结构（容器）</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://julien.jorge.st/posts/en/effortless-performance-improvements-in-cpp-std-vector/">std::vector using reserve</a></p>
</li>
<li class="lvl-2">
<p><a href="https://julien.jorge.st/posts/en/effortless-performance-improvements-in-cpp-std-unordered_map/">using std::map::iterator preferally</a></p>
</li>
<li class="lvl-2">
<p><a href="https://julien.jorge.st/posts/en/effortless-performance-improvements-in-cpp-std-unordered_map/#whats-an-stdmap-anyway">using std::unordered_map than std::map</a></p>
</li>
</ul>
<h4 id="hash">hash</h4>
<!--
Robin hashtable
-->
<h4 id="sort">sort</h4>
<p>排序算法是一种将一组数据按照特定顺序进行排列的算法。常见的排序算法包括冒泡排序、选择排序、插入排序、快速排序、归并排序和堆排序等。这些算法的实现方式各不相同，但它们的目的都是将数据按照一定的规则进行排序。</p>
<h5 id="常见的排序算法">常见的排序算法</h5>
<ul class="lvl-0">
<li class="lvl-2">
<p>冒泡排序：冒泡排序是一种简单的排序算法，它的基本思想是通过不断交换相邻的元素来将较大的元素逐渐 “冒泡” 到数组的末尾。冒泡排序的时间复杂度为 O (n^2)，空间复杂度为 O (1)。</p>
</li>
<li class="lvl-2">
<p>选择排序：选择排序是一种简单的排序算法，它的基本思想是每次从未排序的元素中选择最小的元素，然后将其放到已排序的元素末尾。选择排序的时间复杂度为 O (n^2)，空间复杂度为 O (1)。</p>
</li>
<li class="lvl-2">
<p>插入排序：插入排序是一种简单的排序算法，它的基本思想是将未排序的元素插入到已排序的元素中的正确位置。插入排序的时间复杂度为 O (n^2)，空间复杂度为 O (1)。</p>
</li>
<li class="lvl-2">
<p>快速排序：快速排序是一种高效的排序算法，它的基本思想是通过不断地分治和递归来将数组分成两个子数组，然后对子数组进行排序。快速排序的时间复杂度为 O (nlogn)，空间复杂度为 O (logn)。</p>
</li>
<li class="lvl-2">
<p>归并排序：归并排序是一种高效的排序算法，它的基本思想是通过不断地分治和递归来将数组分成两个子数组，然后对子数组进行排序，最后将两个有序的子数组合并成一个有序的数组。归并排序的时间复杂度为 O (nlogn)，空间复杂度为 O (n)。</p>
</li>
<li class="lvl-2">
<p>堆排序：堆排序是一种高效的排序算法，它的基本思想是通过不断地建堆和取堆顶元素来将数组排序。堆排序的时间复杂度为 O (nlogn)，空间复杂度为 O (1)。</p>
</li>
</ul>
<h5 id="STL-实现">STL 实现</h5>
<p>在 C++ STL 中，std::sort 函数是一个非常常用的排序函数。根据官方文档，std::sort 函数的内部实现包含了三种排序算法：快速排序、堆排序和插入排序。在默认情况下，std::sort 使用快速排序算法，但是当元素数量较少时，它会切换到插入排序算法，以提高性能。当元素数量较大时，std::sort 会使用堆排序算法，以避免快速排序的最坏情况。</p>
<p>以下是 std::sort 函数的内部实现：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">_RanIt</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Diff</span>,</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Pr</span>&gt; <span class="keyword">inline</span></span><br><span class="line">    <span class="type">void</span> _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr&amp; _Pred)</span><br><span class="line">    {   <span class="comment">// order [_First, _Last), using _Pred</span></span><br><span class="line">    <span class="keyword">if</span> (_Ideal &lt; _SORT_MAX_SIZE) <span class="comment">// _SORT_MAX_SIZE == 16</span></span><br><span class="line">        _Insertion_sort(_First, _Last, _Pred);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (_SORT_MAX_SIZE &lt; _Last - _First)</span><br><span class="line">        {   <span class="comment">// divide and conquer by quicksort</span></span><br><span class="line">        _RanIt _Mid = _Unguarded_partition(_First, _Last, _Pred);</span><br><span class="line">        _Sort(_First, _Mid, _Ideal &gt;&gt; <span class="number">1</span>, _Pred);</span><br><span class="line">        _Sort(_Mid, _Last, _Ideal &gt;&gt; <span class="number">1</span>, _Pred);</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        _Heap_sort(_First, _Last, _Pred);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>在这个实现中，Ideal 参数表示理想的子序列大小，Pred 参数表示比较函数。如果 Ideal 小于 SORTMAXSIZE（16），则使用插入排序算法。如果 Ideal 大于 SORTMAXSIZE 并且元素数量大于 SORTMAXSIZE，则使用快速排序算法。否则，使用堆排序算法。在快速排序算法中，std::sort 使用了一个叫做 unguardedpartition 的函数来进行分区操作。在堆排序算法中，std::sort 使用了一个叫做 Heapsort 的函数来进行排序操作。</p>
<h3 id="Orbit">Orbit</h3>
<p>Orbit 是 Stadia 上的性能分析解决方案。</p>
<h4 id="todo">todo</h4>
<h3 id="Profiler">Profiler</h3>
<!-- todo -->
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://hackingcpp.com/cpp/tools/profilers.html">https://hackingcpp.com/cpp/tools/profilers.html</a></p>
</li>
</ul>
<h3 id="Hardening">Hardening</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://developers.redhat.com/articles/2023/07/04/developers-guide-secure-coding-fortifysource">https://developers.redhat.com/articles/2023/07/04/developers-guide-secure-coding-fortifysource</a></p>
</li>
</ul>
<h2 id="图形学">图形学</h2>
<!--
https://www.bilibili.com/video/av90798049/?vd_source=363750aa99b1fe385d2d73ddb34a64ec
https://games-cn.org/
https://games-cn.org/gamescoursescollection/
https://www.cnblogs.com/KillerAery/p/14494430.html
https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/
https://www.mathsisfun.com/algebra/matrix-transform.html
https://www.mathsisfun.com/algebra/index.html
https://www.savemyexams.co.uk/a-level/further-maths_core-pure/edexcel/17/revision-notes/2-matrices/2-2-transformations-using-matrices/2-2-1-transformations-using-a-matrix/
-->
<h3 id="矩阵三维变换">矩阵三维变换</h3>
<p>一般三维变换分为缩放、旋转、平移。</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230410/040647867.png" alt="缩放"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230410/040138315.png" alt="平移"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230410/040316421.png" alt="旋转"></p>
<h4 id="矩阵">矩阵</h4>
<p>M x N：M 宽度 = N 的高度<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230410/040851364.png" alt="M x N"></p>
<p>前面提到的三维变换非常容易可以替换为矩阵运算。这里 1 是为了配合平移变换计算。</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230410/041425126.png" alt="二维空间变换"></p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230410/041544567.png" alt="三维空间变换"></p>
<h3 id="曲线拟合">曲线拟合</h3>
<h4 id="二次曲线拟合">二次曲线拟合</h4>
<p>以二次拟合曲线为例，方程可以表示为 <code>y = a*x*x + b*x + c</code>，其中 a、b 和 c 是待求的系数，x 和 y 分别是点的横坐标和纵坐标，可以使用三个点的坐标来列出三个方程：</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">y1 = a * x1^2 + b * x1 + c</span><br><span class="line">y2 = a * x2^2 + b * x2 + c</span><br><span class="line">y3 = a * x3^2 + b * x3 + c</span><br></pre></td></tr></tbody></table></figure>
<p>将这三个方程化简，可以得到以下矩阵方程：</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">[ x1^2  x1  1 ]   [ a ]   [ y1 ]</span><br><span class="line">[ x2^2  x2  1 ] * [ b ] = [ y2 ]</span><br><span class="line">[ x3^2  x3  1 ]   [ c ]   [ y3 ]</span><br></pre></td></tr></tbody></table></figure>
<p>可以使用矩阵的逆来求解系数向量 [a, b, c]，具体来说，系数向量可以表示为：</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">[ a ]   [ x1^2  x1  1 ]^-1    [ y1 ]</span><br><span class="line">[ b ] = [ x2^2  x2  1 ]   *   [ y2 ]</span><br><span class="line">[ c ]   [ x3^2  x3  1 ]       [ y3 ]</span><br></pre></td></tr></tbody></table></figure>
<p>然后，可以使用 for 循环遍历 3 个点之间的所有横坐标，计算对应的纵坐标，得到绘制拟合曲线上的点。需要注意的是，<a href="https://godbolt.org/z/o658qjnG6">这个 Godbolt 示例程序</a>只是一个简单的演示，实际的拟合曲线算法可能更加复杂和精确。</p>
<h3 id="密码学">密码学</h3>
<!--
https://www.youtube.com/watch?v=AMkIPdEkeMs&list=PLbXF_Fk-xYJ9AI3E5LdSUcwLM76nV4ecE&index=2
 -->
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/sobolevn/awesome-cryptography#c">awesome-encryption in cpp</a></p>
</li>
</ul>
<h2 id="基础工具">基础工具</h2>
<h3 id="编码转换">编码转换</h3>
<h4 id="wstring-and-string">wstring and string</h4>
<p>优先使用 wcsrtombs/mbsrtowcs, 参考<a href="https://godbolt.org/z/rKMeffzoK">示例</a>.</p>
<h2 id="框架库">框架库</h2>
<h3 id="STL">STL</h3>
<p>C++ 标准库实现.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/gcc-mirror/gcc/tree/master/libstdc%2B%2B-v3/include">Gcc STL</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/llvm/llvm-project/tree/main/libcxx/include">Clang STL</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/microsoft/STL/tree/main/stl/inc">MSVC STL</a></p>
</li>
</ul>
<h3 id="abseil">abseil</h3>
<h4 id="简介">简介</h4>
<p><a href="https://abseil.io/">Abseil</a> 位于 <a href="https://github.com/abseil/abseil-cpp">github</a> 包含了对标准库的补充，并提供了一些常用的开发基础能力，<a href="https://abseil.io/docs/cpp/quickstart">快速开始</a>。</p>
<p>主要包括 algorithm, cleanup, <a href="https://abseil.io/docs/cpp/guides/container">container</a>, crc, debugging, <a href="https://abseil.io/docs/cpp/guides/flags">flags(handle command flags)</a>, hash, iterator, <a href="https://abseil.io/docs/cpp/guides/logging">logging</a>, memory, profiling 等工具</p>
<h3 id="hotels-template-library">hotels-template-library</h3>
<p><a href="https://github.com/google/hotels-template-library">htl</a> 包含了用于使开发更安全、有效的工具模板。</p>
<h3 id="kicad">kicad</h3>
<p><a href="https://gitlab.com/kicad/code/kicad">kicad</a> 属计算机辅助设计 CAD (Computer Aided Design)</p>
<h3 id="Boost-Geometry">Boost.Geometry</h3>
<p>如果想学习 Boost.Geometry，可以从以下几个方面入手：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>了解 C++ 模板元编程和泛型编程的基本概念和技术，这是使用 Boost.Geometry 的前提条件。</p>
</li>
<li class="lvl-2">
<p>学习 Boost.Geometry 的基本数据类型和算法，如点、线、多边形、圆等，以及它们之间的关系，如相交、包含等。</p>
</li>
<li class="lvl-2">
<p>学习 Boost.Geometry 的高级功能，如几何图形集合、几何图形索引等，这些功能可以提高几何算法的效率和精度。</p>
</li>
<li class="lvl-2">
<p>了解 Boost.Geometry 与其他 C++ 库的集成方式，如 STL、Boost 等。</p>
</li>
<li class="lvl-2">
<p>参考 Boost.Geometry 的官方文档和示例代码，这些资源可以帮助更好地理解和使用 Boost.Geometry。</p>
</li>
</ul>
<p>如果想深入学习 Boost.Geometry，可以参考以下资源：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Boost.Geometry 的官方文档：<a href="https://www.boost.org/doc/libs/1_76_0/libs/geometry/doc/html/index.html">https://www.boost.org/doc/libs/1_76_0/libs/geometry/doc/html/index.html</a></p>
</li>
<li class="lvl-2">
<p>Boost.Geometry 的 GitHub 仓库：<a href="https://github.com/boostorg/geometry">https://github.com/boostorg/geometry</a></p>
</li>
<li class="lvl-2">
<p>Boost.Geometry 的示例代码：<a href="https://www.boost.org/doc/libs/1_76_0/libs/geometry/doc/html/geometry/examples.html">https://www.boost.org/doc/libs/1_76_0/libs/geometry/doc/html/geometry/examples.html</a></p>
</li>
<li class="lvl-2">
<p>《Boost.Geometry 入门与实践》一书，该书详细介绍了 Boost.Geometry 的基本概念、数据类型和算法，以及如何使用 Boost.Geometry 解决实际问题。</p>
</li>
</ul>
<h3 id="single-file-libs">single file libs</h3>
<p><a href="https://github.com/nothings/single_file_libs">非常容易移植单文件的库</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/ariya/fastlz">FastLZ L7ZZ 算法</a></p>
</li>
</ul>
<h3 id="Boost">Boost</h3>
<p><a href="https://www.boost.org/">Boost</a> 是 C++ 必学的三方库。</p>
<h3 id="dynamix">dynamix</h3>
<p><a href="https://github.com/iboB/dynamix">dynamix</a> 是 C++ 在多态编程支持健壮的 Mixin 库。</p>
<h3 id="proxy">proxy</h3>
<p>c++20 支持的运行时多态代理</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://devblogs.microsoft.com/cppblog/proxy-runtime-polymorphism-made-easier-than-ever/">https://devblogs.microsoft.com/cppblog/proxy-runtime-polymorphism-made-easier-than-ever/</a></p>
</li>
</ul>
<h3 id="Gstreamer">Gstreamer</h3>
<p><a href="https://gstreamer.freedesktop.org/documentation/">Gstreamer</a> 是一个功能强大的多媒体框架，可以用于音频和视频处理。它是一个基于管道的框架，可以将多个元素（例如音频解码器、视频编码器、过滤器等）连接在一起，以实现所需的处理。以下是一些有关 Gstreamer 的基本信息：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Gstreamer 是一个开源框架，可以在 Linux、Windows 和 macOS 等操作系统上运行。</p>
</li>
<li class="lvl-2">
<p>Gstreamer 使用 C 语言编写，但也提供了许多其他语言的绑定，例如 Python、Java 和 C# 等。</p>
</li>
<li class="lvl-2">
<p>Gstreamer 提供了许多插件，可以用于处理各种音频和视频格式，例如 MP3、H.264 等。</p>
</li>
<li class="lvl-2">
<p>Gstreamer 还提供了许多工具，例如 gst-launch 和 gst-inspect 等，可以帮助构建和调试管道。</p>
</li>
</ul>
<h4 id="开发环境">开发环境</h4>
<p>推荐使用 vcpkg 配置：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">vcpkg install gstreamer</span><br></pre></td></tr></tbody></table></figure>
<h4 id="demo-示例">demo 示例</h4>
<p>完整的 Gstreamer 示例 demo，可以在 GitHub 上找到许多开源项目。以下是一些示例项目：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/GStreamer/gst-examples">gst-examples</a>：官方 Gstreamer 示例项目，包含许多使用 Gstreamer 的示例管道。</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/GStreamer/gst-plugins-good">gst-plugins-good</a>：官方 Gstreamer 插件项目，包含许多有用的插件，例如音频解码器、视频编码器等。</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/GStreamer/gst-python-tutorials">gst-python-tutorials</a>：使用 Python 编写的 Gstreamer 示例项目，适用于初学者。</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/GStreamer/gst-rtsp-server">gst-rtsp-server</a>：使用 Gstreamer 实现的 RTSP 服务器，可以用于流媒体传输。</p>
</li>
</ul>
<h3 id="Eigen">Eigen</h3>
<p>Eigen3 ，它是一个高性能的线性代数库，提供了各种矩阵和向量的操作。Eigen3 中的矩阵是通过模板类 Matrix 实现的，可以使用静态或动态大小。以下是一些常见的操作：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建矩阵：Matrix mat; MatrixXd mat (3, 3);</p>
</li>
<li class="lvl-2">
<p>矩阵乘法：mat1 * mat2</p>
</li>
<li class="lvl-2">
<p>矩阵转置：mat.transpose ()</p>
</li>
<li class="lvl-2">
<p>矩阵求逆：mat.inverse ()</p>
</li>
<li class="lvl-2">
<p>矩阵行列式：mat.determinant ()</p>
</li>
<li class="lvl-2">
<p>矩阵特征值：mat.eigenvalues ()</p>
</li>
<li class="lvl-2">
<p>矩阵特征向量：mat.eigenvectors ()</p>
</li>
</ul>
<p>更多详细信息可以参考 <a href="https://eigen.tuxfamily.org/dox/groupTutorialMatrixClass.html">Eigen3 官方文档</a>。</p>
<p>如果需要更多关于 Eigen3 的信息，可以参考以下资源：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://eigen.tuxfamily.org/dox/groupTutorialMatrixClass.html">Eigen3 官方文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/eigenteam/eigen-git-mirror">Eigen3 GitHub 仓库</a></p>
</li>
<li class="lvl-2">
<p><a href="https://eigen3.adshao.net/">Eigen3 中文文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/LeftNotEasy/tag/Eigen/">Eigen3 中文教程</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/LeftNotEasy/p/11299214.html">Eigen3 中文 API 文档</a></p>
</li>
</ul>
<h3 id="gRPC">gRPC</h3>
<p><a href="https://github.com/grpc/grpc">gRPC</a> 是一种高性能、开源和通用的远程过程调用（RPC）框架。它可以在任何地方运行，从而使客户端和服务器应用程序能够透明地相互通信。gRPC 使用 Protocol Buffers 作为其默认的序列化机制，这使得它非常高效。它还支持多种编程语言，包括 C++、Java、Python、Go、Ruby、C# 和 Objective-C 等。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://grpc.io/docs/languages/">Quick Start</a>。</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/grpc/grpc/tree/master/examples/cpp">cpp 参考官方示例</a>。</p>
</li>
</ul>
<h3 id="网络库">网络库</h3>
<!--
https://zhuanlan.zhihu.com/p/147671770?utm_id=0
https://zhuanlan.zhihu.com/p/357075167?utm_id=0
 -->
<h3 id="wxwidget">wxwidget</h3>
<p>cpp 跨平台 ui 框架啊</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://wizardforcel.gitbooks.io/wxwidgets-book/content/">https://wizardforcel.gitbooks.io/wxwidgets-book/content/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/Xiao_Ley/article/details/129099607">csdn blog 简介</a></p>
</li>
</ul>
<h3 id="wfrest">wfrest</h3>
<p>Web Framework RESTful API in C++.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/wfrest/wfrest">https://github.com/wfrest/wfrest</a></p>
</li>
</ul>
<h3 id="bpf">bpf</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.linuxjournal.com/content/bpf-observability-getting-started-quickly">https://www.linuxjournal.com/content/bpf-observability-getting-started-quickly</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.ctyun.cn/developer/article/487430210170949">ringbuffer 和 bpf</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>cmake</tag>
        <tag>msvc</tag>
        <tag>gnu</tag>
        <tag>vs</tag>
        <tag>gdb</tag>
        <tag>xmake</tag>
        <tag>vcpkg</tag>
        <tag>doxygen</tag>
        <tag>coverage</tag>
      </tags>
  </entry>
  <entry>
    <title>dapr</title>
    <url>/posts/4d2177b9/</url>
    <content><![CDATA[<h2 id="Dapr">Dapr</h2>
<blockquote>
<p>Deploying Linux server application code was difficult because languages used for writing servers have a lot of dependencies, so Docker was created to simplify things. But getting Docker containers to run reliably across multiple servers was pretty difficult, so Kubernetes was created to simplify things. Deploying multiple services on Kubernetes was kinda complicated though, but now that Dapr has been created to simplify things, deploying our code is easy as pie.</p>
</blockquote>
<p><a href="https://docs.dapr.io/">dapr</a> 是一个分布式应用开发框架由微软开源。</p>
<span id="more"></span>
<h2 id="Getting-Started">Getting Started</h2>
<p>vscode 配置 devcontainer 开发环境</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"features"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/desktop-lite:1"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/kubectl-helm-minikube:1"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/python:1"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"installTools"</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/docker-in-docker:2"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"dockerDashComposeVersion"</span><span class="punctuation">:</span> <span class="string">"v2"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"moby"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"ghcr.io/dapr/cli/dapr-cli:0"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<p>配置 desktop-lite 浏览器</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt-get update &amp;&amp; <span class="built_in">export</span> DEBIAN_FRONTEND=noninteractive &amp;&amp; apt-get install -y firefox-esr</span><br></pre></td></tr></tbody></table></figure>
<p>可将安装移动到 dockerfile 中，dockerfile 配置 dapr cli 运行 path。</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 需要添加预设路径，该路径可通过环境变量配置</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:/home/node/.dapr/bin</span><br></pre></td></tr></tbody></table></figure>
<p>初始化 dapr，安装 <a href="https://docs.dapr.io/getting-started/install-dapr-cli/">dapr cli</a> 命令行工具。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用 dev container 只需要在 features 中注册 <code>"ghcr.io/dapr/cli/dapr-cli:0": {}</code></p>
</li>
<li class="lvl-2">
<p>使用命令行安装，使用 dapr 官方脚本 `wget -q <a href="https://raw.githubusercontent.com/dapr/cli/master/install/install.sh">https://raw.githubusercontent.com/dapr/cli/master/install/install.sh</a> -O - | /bin/bash</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">dapr -h</span><br><span class="line">dapr --version</span><br><span class="line">dapr init</span><br><span class="line"><span class="built_in">ls</span> <span class="variable">$HOME</span>/.dapr</span><br></pre></td></tr></tbody></table></figure>
<p>测试 API</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 app id (my-app) 启动一个 dapr app，并指定 app端口为 3500</span></span><br><span class="line">dapr run --app-id my-app --app-port 3500</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存入状态， url 为 http://localhost:3500/v1.0/state/statestore</span></span><br><span class="line">curl -X POST -H <span class="string">"Content-Type: application/json"</span> -d <span class="string">'[{ "key": "name", "value": "Bruce Wayne"}]'</span> http://localhost:3500/v1.0/state/statestore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取状态，url为 http://localhost:3500/v1.0/state/statestore/name</span></span><br><span class="line">curl http://localhost:3500/v1.0/state/statestore/name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看redis 存储内容</span></span><br><span class="line">docker <span class="built_in">exec</span> -it dapr_redis redis_cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 redis kyes 存储内容</span></span><br><span class="line">docker <span class="built_in">exec</span> -it dapr_redis redis-cli</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">"myapp||name"</span></span><br><span class="line">127.0.0.1:6379&gt; HGETALL <span class="string">"myapp||name"</span></span><br><span class="line">1) <span class="string">"data"</span></span><br><span class="line">2) <span class="string">"\"Bruce Wayne\""</span></span><br><span class="line">3) <span class="string">"version"</span></span><br><span class="line">4) <span class="string">"1"</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除状态</span></span><br><span class="line">curl -v -X DELETE -H <span class="string">"Content-Type: application/json"</span> http://localhost:3500/v1.0/state/statestore/name</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Quickstarts-Demos">Quickstarts Demos</h2>
<p><a href="https://docs.dapr.io/getting-started/quickstarts/">Quickstarts</a> 主要列出了官方的示例，及应用，开始之前需要<a href="https://docs.dapr.io/getting-started/install-dapr-cli/">设置好 dapr 环境</a>。</p>
<h2 id="Service-Invocation">Service Invocation</h2>
<p><a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/">Service Invocation</a> 实现使用 HTTP 或 gRPC 在两个服务之间进行同步通信。主要专注于解决：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>服务发现。如何发现不同的服务。</p>
</li>
<li class="lvl-2">
<p>标准化服务间调用 API 协议。如何确定服务间调用协议。</p>
</li>
<li class="lvl-2">
<p>服务间通信安全。如何在服务间安全设置加密及访问控制。</p>
</li>
<li class="lvl-2">
<p>减缓请求超时和失败处理。如何处理重试及临时错误。</p>
</li>
<li class="lvl-2">
<p>实现可观测性和跟踪。如何跟踪及统计服务间通信。</p>
</li>
</ul>
<p>通常使用两种协议 <a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services/">HTTP</a> 和 <a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc/">gRPC</a> 作为通信方式。</p>
<p>调用实现，可以有三种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>HTTP and gRPC：不改动原有代码，使用 dapr run 指定运行对应通信协议的服务。</p>
<ul class="lvl-2">
<li class="lvl-4">HTTP: <a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/howto-invoke-discover-services/">HTTP Configuration</a></li>
<li class="lvl-4">gRPC: <a href="https://docs.dapr.io/operations/configuration/grpc/">Configure</a> and <a href="https://docs.dapr.io/developing-applications/building-blocks/service-invocation/howto-invoke-services-grpc/">Invocation</a>。</li>
</ul>
</li>
<li class="lvl-2">
<p>Call to the dapr sidecar url API: 通过直接调用 <code>localhost:&lt;dapr-http-port&gt;/API</code> 调用。</p>
</li>
<li class="lvl-2">
<p>SDK: 官方提供了对应的 <a href="https://docs.dapr.io/developing-applications/sdks/">SDK</a> 方便服务集成。为了快速测试，dapr 提供了 <a href="https://docs.dapr.io/reference/cli/dapr-invoke/">cli</a> 工具方便测试。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Invoke a sample method on target app with POST Verb</span></span><br><span class="line">dapr invoke --app-id target --method sample --data <span class="string">'{"key":"value"}'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Invoke a sample method on target app with GET Verb</span></span><br><span class="line">dapr invoke --app-id target --method sample --verb GET</span><br></pre></td></tr></tbody></table></figure>
<h2 id="State-Management">State Management</h2>
<p><a href="https://docs.dapr.io/developing-applications/building-blocks/state-management/">State Management</a> 即，数据持久化管理。</p>
<h2 id="Hosting-options">Hosting options</h2>
<h3 id="Kubernetes">Kubernetes</h3>
<p>配置 dapr 到 <a href="https://docs.dapr.io/operations/hosting/kubernetes/">k8s</a>。</p>
<h4 id="本地部署">本地部署</h4>
<p>安装 minikube，并初始化 dapr，<a href="https://github.com/dapr/quickstarts/blob/master/tutorials/hello-kubernetes/README.md">官方示例</a>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 开启本地 minikube 集群</span></span><br><span class="line">minikube start</span><br><span class="line"><span class="comment"># 初始化 dapr, dapr init --kubernetes --wait</span></span><br><span class="line">dapr init -k</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Zipkin">Zipkin</h2>
<p>Dapr 支持使用 Zipkin 进行分布式跟踪，您可以通过以下步骤来实现：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安装 Zipkin</p>
</li>
</ul>
<p>您可以通过以下命令安装 Zipkin：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">-p</span> <span class="number">9411</span><span class="string">:9411</span> <span class="string">openzipkin/zipkin</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>配置 Dapr</p>
</li>
</ul>
<p>在 Dapr 应用程序中启用 Zipkin 跟踪，需要在 Dapr 配置文件中添加以下内容：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">dapr.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Configuration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tracing</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tracing:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exporter:</span> <span class="string">zipkin</span></span><br><span class="line">    <span class="attr">zipkin:</span></span><br><span class="line">      <span class="attr">endpointAddress:</span> <span class="string">"http://localhost:9411/api/v2/spans"</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>启动 Dapr 应用程序</p>
</li>
</ul>
<p>在启动 Dapr 应用程序时，需要指定 Dapr 配置文件的位置。例如，如果您的 Dapr 配置文件名为 config.yaml，则可以使用以下命令启动 Dapr 应用程序：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">dapr run --app-id my-app --app-port 3500 --config config.yaml node app.js</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-3">
<p>查看跟踪数据</p>
</li>
</ul>
<p>在 Zipkin UI 中，您可以查看跟踪数据。您可以通过以下 URL 访问 Zipkin UI (<a href="http://localhost:9411/zipkin/">http://localhost:9411/zipkin/</a>)</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>DB 数据库实践</title>
    <url>/posts/d5fbb003/</url>
    <content><![CDATA[<p>本文总结了数据库基本原理及其实现。</p>
<h2 id="数据库如何工作？">数据库如何工作？</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>数据保存的格式是什么？（在内存和磁盘上）</p>
</li>
<li class="lvl-2">
<p>它什么时候从内存移动到磁盘？</p>
</li>
<li class="lvl-2">
<p>为什么每个表只能有一个主键？</p>
</li>
<li class="lvl-2">
<p>回滚事务如何工作？</p>
</li>
<li class="lvl-2">
<p>索引是如何格式化的？</p>
</li>
<li class="lvl-2">
<p>何时以及如何进行全表扫描？</p>
</li>
<li class="lvl-2">
<p>准备好的语句以什么格式保存？</p>
</li>
</ul>
<p>简而言之，数据库是如何工作的？</p>
<p>为了理解，用 C 从头开始构建一个 sqlite 的克隆。</p>
<span id="more"></span>
<h3 id="reference">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/cstack/db_tutorial">https://github.com/cstack/db_tutorial</a></p>
</li>
<li class="lvl-2">
<p><a href="https://cstack.github.io/db_tutorial/">https://cstack.github.io/db_tutorial/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>dependency</title>
    <url>/posts/2f585505/</url>
    <content><![CDATA[<h2 id="renovate">renovate</h2>
<p><a href="https://github.com/apps/renovate">renovate</a> 使用自动 “拉请求” 保持源代码依赖关系的最新性。它将扫描软件包管理器文件库 (e.g. from npm/Yarn, Bundler, Composer, Go Modules, Pip/Pipenv/Poetry, Maven/Gradle, Dockerfile/k8s, and many more) ，并提交拉请求与更新版本，无论何时发现。</p>
<p>这个应用程序可以免费安装在公共和私有存储库中。renovate (以前称为 WhiteSource) 提供免费服务，不需要付费计划。</p>
<blockquote>
<p>[!NOTE]<br>
renovate documentation is here: <a href="https://docs.renovatebot.com/">https://docs.renovatebot.com/</a>.</p>
</blockquote>
<span id="more"></span>
<h3 id="集成到github-gitlab">集成到 github/gitlab</h3>
<p>官方提供的开始配置<a href="https://docs.renovatebot.com/getting-started/running/">文档</a></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.renovatebot.com/self-hosted-configuration/">renovate self-hosted configuration</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=5CkCr9U_Q1Y&amp;t=11s">meets renovate</a></p>
</li>
</ul>
<h4 id="github-集成">github 集成</h4>
<p>安装直接通过应用授权访问 <a href="https://github.com/marketplace/renovate">renovate</a></p>
<h4 id="gitlab-集成">gitlab 集成</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.com/renovate-bot/renovate-runner">renovate runner repository</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.renovatebot.com/examples/self-hosting/#gitlab-cicd-pipeline">renovate on gitlab docs</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/renovatebot/docker-renovate/blob/main/docs/gitlab.md">renovate on gitlab best practice</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.renovatebot.com/self-hosted-configuration/#writediscoveredrepos">scale renovate run on gitlab</a></p>
</li>
</ul>
<p>以下是一些配置 renovate 社区示例，更多示例参考<a href="https://gitlab.com/search?search=renovate&amp;nav_source=navbar">搜索 gitlab</a>:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.com/24-heures-insa/renovate">24-bot</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/keylay/renovate-runner">keylay</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/commonground/core/renovate">commonground</a></p>
</li>
</ul>
<p>根据仓库 <a href="https://github.com/renovatebot/docker-renovate">renovate-docker</a> 中的 docs 中的配置步骤即可，其中所用的容器参考 <a href="https://hub.docker.com/r/renovate/renovate">docker renovate</a></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gastaud.io/en/article/gitlab-renovatebot/">https://gastaud.io/en/article/gitlab-renovatebot/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://wxsm.space/2020/integrate-renovate-with-gitlab/">https://wxsm.space/2020/integrate-renovate-with-gitlab/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mrseawave.github.io/blogs/articles/2022/02/09/renovate/">https://mrseawave.github.io/blogs/articles/2022/02/09/renovate/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.answera.top/frontend/engineering/gitlab/renovate/">https://www.answera.top/frontend/engineering/gitlab/renovate/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://dev.to/omaiboroda/try-to-update-your-dependencies-once-a-month-5dm5">https://dev.to/omaiboroda/try-to-update-your-dependencies-once-a-month-5dm5</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.logrocket.com/renovate-dependency-updates-on-steroids/">renovate 简单集成原理</a></p>
</li>
</ul>
<h3 id="configuration">configuration</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.renovatebot.com/configuration-options/">renovate configuration options</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/gitlab-ci-utils/config-files/-/tree/main/Renovate?ref_type=heads">more configuration examples</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.renovatebot.com/semantic-commits/">renovate semantic message</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.renovatebot.com/presets-config/">renovate preset config</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/renovate-bot/renovate-runner/-/blob/main/renovate.json?ref_type=heads">package semantic commit example</a></p>
</li>
<li class="lvl-2">
<p><a href="https://dev.to/kauppfbi_96/5-1-tips-to-reduce-the-noise-of-renovate-bot-3c9d">5 tips to avoid annoying renovate</a></p>
</li>
</ul>
<h4 id="timezone">timezone</h4>
<p><a href="https://docs.renovatebot.com/configuration-options/#timezone">timezone</a>: 时区</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"timezone"</span><span class="punctuation">:</span> <span class="string">"Asia/Shanghai"</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="automerge">automerge</h4>
<p><a href="https://docs.renovatebot.com/configuration-options/#automerge">automerge</a>: 自动合并配置</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// https://gitlab.com/msclock/renovate/-/blob/master/.gitlab/renovate.json</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="comment">// https://docs.renovatebot.com/configuration-options/#platformautomerge</span></span><br><span class="line">  <span class="attr">"platformAutomerge"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"packageRules"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"matchPackagePatterns"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"renovate-bot/renovate-runner"</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"matchUpdateTypes"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"minor"</span><span class="punctuation">,</span> <span class="string">"patch"</span><span class="punctuation">,</span> <span class="string">"pin"</span><span class="punctuation">,</span> <span class="string">"digest"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"automerge"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"semanticCommitType"</span><span class="punctuation">:</span> <span class="string">"perf"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="extends">extends</h4>
<p><a href="https://docs.renovatebot.com/configuration-options/#extends">extends</a>: 要使用或扩展的配置预设</p>
<h4 id="regexManager">regexManager</h4>
<p><a href="https://docs.renovatebot.com/configuration-options/#regexmanagers">regexManager</a>: 使用正则表达式匹配的自定义管理器 (用于筛选出需要更新的依赖规则管理器)</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// https://gitlab.com/gitlab-ci-utils/gitlab-ci-templates/-/blob/master/.gitlab/renovate.json</span></span><br><span class="line"><span class="comment">// https://gitlab.com/gitlab-ci-utils/gitlab-ci-templates/-/merge_requests/461</span></span><br><span class="line"><span class="comment">// https://gitlab.com/gitlab-ci-utils/gitlab-ci-templates/-/commit/7e5570740a1b705df57d8073be0a41dc31cfaca3</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"regexManagers"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">      <span class="attr">"description"</span><span class="punctuation">:</span> <span class="string">"Update https template URL for .gitlab-ci.yml from a GitLab project release"</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"fileMatch"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"\\.gitlab-ci\\.yml$"</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="comment">// 匹配使用 include:remote语法的 gitlab ci 使用位置</span></span><br><span class="line">      <span class="attr">"matchStrings"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"\\s+- remote: [\"']*?https:\\/\\/gitlab.com\\/(?&lt;depName&gt;.*?)\\/-\\/raw\\/(?&lt;currentValue&gt;.*?)\\/\\w+"</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">"datasourceTemplate"</span><span class="punctuation">:</span> <span class="string">"gitlab-releases"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="prCreation">prCreation</h4>
<p><a href="https://docs.renovatebot.com/configuration-options/#prcreation">prCreation</a>: 何时为分支创建 PR。</p>
<h3 id="datasource">datasource</h3>
<p>Renovate 的管理器扫描文件并提取依赖项之后，会为每个提取的包文件或依赖项分配一个数据源。数据源告诉 Renovate 如何搜索新版本.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.renovatebot.com/modules/datasource/">datasource on renovate docs</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.renovatebot.com/configuration-options/#customdatasources">configure custom datasource docs</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/secustor/renovate-generic-datasource">自定义扫描数据源示例</a></p>
</li>
</ul>
<h2 id="dependabot">dependabot</h2>
<p>通过 <a href="https://docs.github.com/zh/code-security/dependabot">Dependabot</a>，监视项目中使用的依赖项中的漏洞，并使依赖项保持最新。</p>
<h3 id="配置">配置</h3>
<p>访问 <a href="https://app.dependabot.com">dependabot app</a> 并选择要添加的存储库。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.github.com/zh/code-security/dependabot">https://docs.github.com/zh/code-security/dependabot</a></p>
</li>
<li class="lvl-2">
<p><a href="https://dev.to/omaiboroda/try-to-update-your-dependencies-once-a-month-5dm5">https://dev.to/omaiboroda/try-to-update-your-dependencies-once-a-month-5dm5</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>devcontainer</title>
    <url>/posts/abfea608/</url>
    <content><![CDATA[<h2 id="Dev-Container">Dev Container</h2>
<h3 id="Configuration">Configuration</h3>
<p>Dev Container 配置步骤如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安装 vscode 插件，dev container。</p>
</li>
<li class="lvl-2">
<p>ctrl+shift+p 使用 dev container 命令添加配置文件。</p>
</li>
<li class="lvl-2">
<p>选择 dev container 配置模板（原则上选择基础 debian/ubuntu 即可，其它环境均可通过或许选择 features 进行动态构建）。</p>
</li>
</ul>
<span id="more"></span>
<h3 id="Runtime-Permission">Runtime Permission</h3>
<p>添加 docker 运行权限，需要添加执行命令，或配置声明。</p>
<p>在 docker-compose 中声明权限：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Uncomment the next lines if you will use a ptrace-based debuggers like C++, Go, and Rust.</span></span><br><span class="line"><span class="attr">cap_add:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">SYS_PTRACE</span></span><br><span class="line"><span class="attr">security_opt:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">seccomp:unconfined</span></span><br><span class="line"><span class="attr">privileged:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<p>在 devcontainer.json 中配置</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"runArgs"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// Enable ptrace-based</span></span><br><span class="line">    <span class="comment">// ptrace syscall permission</span></span><br><span class="line">    <span class="string">"--cap-add=SYS_PTRACE"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Net Configuration</span></span><br><span class="line">    <span class="string">"--cap-add=NET_ADMIN"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Open all syscall permission</span></span><br><span class="line">    <span class="string">"--security-opt"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"seccomp=unconfined"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Enable GPUs</span></span><br><span class="line">    <span class="string">"--gpus=all"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// Possess all permission of the host</span></span><br><span class="line">    <span class="string">"--privileged"</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>
<p>上面的配置可以使用 devcontainer 字段配置</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"capAdd"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="comment">// Enable ptrace-based</span></span><br><span class="line">        <span class="string">"SYS_PTRACE"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// Net Configuration</span></span><br><span class="line">        <span class="string">"NET_ADMIN"</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"securityOpt"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"seccomp=unconfined"</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"privileged"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"runArgs"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">"--gpus=all"</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="GPU-Support">GPU Support</h3>
<p>配置在 Dev DinD 的开发环境中支持 Nvidia Cuda GPU。</p>
<p>在容器启动前，安装 <a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker">nvidia-container-toolkit</a></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html#setting-up-nvidia-container-toolkit">nvidia container-toolkit source</a></p>
</li>
</ul>
<h4 id="方案一">方案一</h4>
<p>使用 devcontainer 提供的官方镜像，需要配置安装 nvidia 源.</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile.gpu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bullseye or jammy</span></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/devcontainers/base:{VARIANT}</span><br><span class="line"><span class="comment"># FROM nvcr.io/nvidia/pytorch:22.12-py3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Installing nvidia-container-toolkit and Configure</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;&lt;-<span class="string">EOF</span></span></span><br><span class="line">    distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line">    curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg</span><br><span class="line">    curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \</span><br><span class="line">        sed <span class="string">'s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g'</span> | \</span><br><span class="line">        tee /etc/apt/sources.list.d/nvidia-container-toolkit.list</span><br><span class="line">    <span class="comment"># output</span></span><br><span class="line">    apt update &amp;&amp; apt-get install -y nvidia-container-toolkit &amp;&amp; nvidia-ctk runtime configure</span><br><span class="line">    <span class="comment"># set nvidia as default runtime</span></span><br><span class="line">    echo <span class="string">'{"default-runtime":"nvidia"}'</span> $(cat /etc/docker/daemon.json) | jq -s <span class="string">'.[0] + .[1]'</span> | tee /etc/docker/daemon.json</span><br><span class="line">    rm -rf /var/lib/apt/lists/* /var/cache/* /var/log/* /tmp/* ~/.cache -rf</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure>
<p>在 devcontainer.json 中配置</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"build"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"dockerfile"</span><span class="punctuation">:</span> <span class="string">"Dockerfile.gpu"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"VARIANT"</span><span class="punctuation">:</span><span class="string">"jammy"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"capAdd"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// Enable ptrace-based debugging for C++</span></span><br><span class="line">    <span class="string">"SYS_PTRACE"</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"securityOpt"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">"seccomp=unconfined"</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"privileged"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"runArgs"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="comment">// Loading libnvidia* in devcontainer, verifying by the command `ldconfig -p | grep libnvidia`</span></span><br><span class="line">    <span class="string">"--gpus=all"</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="方案二">方案二</h4>
<p>使用 nvidia 提供的官方 cuda 开发容器为基础，作为 GPU 开发容器配置.</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile.gpu</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下镜像已经内置 nvidia container toolkit源</span></span><br><span class="line"><span class="keyword">FROM</span> nvidia/cuda:<span class="number">12.1</span>.<span class="number">1</span>-cudnn8-devel-ubuntu20.<span class="number">04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;&lt;-<span class="string">EOF</span></span></span><br><span class="line">    apt update &amp;&amp; apt install -y nvidia-docker2 &amp;&amp; nvidia-ctk runtime configure</span><br><span class="line">    <span class="comment"># 和方案一相同, 配置nvidia 容器运行时到 /etc/docker/daemon.json</span></span><br><span class="line">    rm rf /var/lib/apt/lists/* /var/cache/* /var/log/* /tmp/* ~/.cache -rf</span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure>
<h4 id="方案三">方案三</h4>
<p>方案一，二都需要手动配置源或者使用已经配置好的基础镜像，第三种方法是使用 devcontainer 提供的 cuda feature 来构建.</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/devcontainers/features</span></span><br><span class="line"><span class="attr">"features"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/common-utils:2"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"upgradePackages"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"username"</span><span class="punctuation">:</span> <span class="string">"vscode"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"configureZshAsDefaultShell"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/docker-in-docker:2"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 使用 cuda feature 构建环境</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/nvidia-cuda:1"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>
<p>以上方式需要手动安装 docker-container-toolkit</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 docker nvidia runtime(nvidia-docker2/nvidia-container-toolkit)</span></span><br><span class="line">apt update &amp;&amp; apt install -y nvidia-container-toolkit &amp;&amp; nvidia-ctk runtime configure</span><br><span class="line"><span class="comment"># 重启 docker</span></span><br><span class="line">ps -ef | grep -E <span class="string">'(dockerd|docker-init.sh)'</span>  | <span class="built_in">head</span> -1 | awk <span class="string">'{print $2}'</span> | xargs <span class="built_in">sudo</span> <span class="built_in">kill</span> -9</span><br><span class="line">/usr/local/share/docker-init.sh</span><br></pre></td></tr></tbody></table></figure>
<h3 id="QA">QA</h3>
<h4 id="sudo-apt-update-error-“Release-file-is-not-yet-valid”">sudo apt update error: “Release file is not yet valid”</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># https://askubuntu.com/questions/1096930/sudo-apt-update-error-release-file-is-not-yet-valid</span></span><br><span class="line"><span class="built_in">sudo</span> hwclock -s</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Features">Features</h2>
<h3 id="common-features">common features</h3>
<p>这里列出了常用 Dev Container 的 <a href="https://github.com/devcontainers/features">features</a> 使用总结。</p>
<h4 id="Common-utils">Common utils</h4>
<p>配置容器开发环境用户，方面管理权限。实现参考通过 Dockerfile 创建非 <a href="https://code.visualstudio.com/remote/advancedcontainers/add-nonroot-user">root user</a>。</p>
<p>devcontainer 有提供专门的 common 帮助用户创建非 root 用户。</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"features"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/common-utils:2"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"username"</span><span class="punctuation">:</span> <span class="string">"vscode"</span> <span class="comment">// or others</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">"postCreateCommand"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"git-completions"</span><span class="punctuation">:</span> <span class="string">"echo 'source /usr/share/bash-completion/completions/git' &gt;&gt; ~/.bashrc"</span></span><br><span class="line"><span class="punctuation">}</span><span class="punctuation">,</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Desktop-lite">Desktop lite</h4>
<p>在 devcontainer.json 中配置 <a href="https://github.com/devcontainers/features/tree/main">desktop-lite</a></p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"features"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/desktop-lite:1"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<p>导出端口 nVNC 的 vscode 配置 forward port 为 6080 （默认 nVNC 端口）</p>
<p>支持 nVNC 浏览器推荐 Firefox 和 Chrome，这里给出自动集成 Dockerfile 的指令。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Firefox ESR</span></span><br><span class="line">apt-get update &amp;&amp; <span class="built_in">export</span> DEBIAN_FRONTEND=noninteractive &amp;&amp; apt-get install -y firefox-esr</span><br><span class="line"><span class="comment"># Chrome</span></span><br><span class="line">apt-get update &amp;&amp; <span class="built_in">export</span> DEBIAN_FRONTEND=noninteractive \</span><br><span class="line">    &amp;&amp; curl -sSL https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o /tmp/chrome.deb \</span><br><span class="line">    &amp;&amp; apt-get -y install /tmp/chrome.deb</span><br></pre></td></tr></tbody></table></figure>
<h4 id="DinD">DinD</h4>
<p>在容器内创建子容器，独立于主机的 docker 实例。在容器中安装 Docker 扩展以及所需的 CLI。</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"features"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers/features/docker-in-docker:2"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!TIP]<br>
当容器 daemon 挂掉或者更新 <code>daemon.json</code> 时，可通过 <code>/usr/local/share/docker-init.sh</code> 重启 docker 服务.</p>
</blockquote>
<h3 id="features-development">features development</h3>
<p>devcontainer features 提供了可插拔式得开发工具集成方式。这里简单介绍自定义 features 开发流程。主要参考官方 feature <a href="https://github.com/devcontainers/feature-starter">模板</a>.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/features">https://github.com/msclock/features</a></p>
</li>
<li class="lvl-2">
<p><a href="https://containers.dev/guide/feature-authoring-best-practices">https://containers.dev/guide/feature-authoring-best-practices</a></p>
</li>
</ul>
<p>Step 1, feature 开发</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>clone 官方提供的模板。示例<a href="https://github.com/msclock/features">参考</a></p>
</li>
<li class="lvl-2">
<p>使用官方模板打开 feature 的 devcontainer 开发环境</p>
</li>
<li class="lvl-2">
<p>在 src 下创建 feature, 每个 feature 以子目录构建布局</p>
</li>
<li class="lvl-2">
<p>在 feature 目录下，书写脚本，必须包含有 install.sh 及 devcontainer-feature.json 配置及脚本。详情参考模板</p>
</li>
</ul>
<p>Step 2, feature 测试</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在根目录下有 test 目录，某人有全局 _global 测试及各个 feature 测试</p>
</li>
<li class="lvl-2">
<p>在 _global 下可配置测试所有 feature, 具体在 scenarios.json 中注册 feature id, 然后在对应的注册的 id 的脚本 all_tools.sh 中添加 feature 验证命令即可</p>
</li>
<li class="lvl-2">
<p>在 test 目录下可创建单个 feature 的测试脚本，详情参考模板</p>
</li>
<li class="lvl-2">
<p>验证 feature, 使用命令 <code>devcontainer features test -f &lt;feature id&gt; -i &lt;image-name&gt;</code> 在 image-name 的镜像中验证 feature 是否安装成功.</p>
</li>
</ul>
<p>Step 3, feature CI in github action</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>直接使用模板提供的 CI test.yaml 中配置</p>
</li>
<li class="lvl-2">
<p>在 baseImage 中配置要测试的 image</p>
</li>
<li class="lvl-2">
<p>在 features 中添加要验证的 feature</p>
</li>
<li class="lvl-2">
<p>最后，test 执行成功后，可手动执行 release workflow 发布 feature.</p>
</li>
</ul>
<h2 id="Performance">Performance</h2>
<p>在 Windows/MacOS 上存在性能的 I/O binding 的损失，官方给出了几种<a href="https://code.visualstudio.com/remote/advancedcontainers/improve-performance">解决方案</a>。</p>
<h3 id="通过-wsl-挂载">通过 wsl 挂载</h3>
<p>通常在 wsl 磁盘挂载效率较高</p>
<p>参考文档:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://learn.microsoft.com/en-us/windows/wsl/filesystems">wsl filesystem</a></p>
</li>
</ul>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># in powershell</span></span><br><span class="line">docker run <span class="literal">--rm</span> <span class="literal">-it</span> <span class="literal">-v</span> <span class="string">"<span class="variable">$</span>(pwd):/pwd:delegated"</span> <span class="literal">-w</span> /<span class="built_in">pwd</span> alpine time dd <span class="keyword">if</span>=/dev/zero of=speedtest bs=<span class="number">1024</span> count=<span class="number">100000</span></span><br><span class="line"><span class="number">100000</span>+<span class="number">0</span> records <span class="keyword">in</span></span><br><span class="line"><span class="number">100000</span>+<span class="number">0</span> records out</span><br><span class="line">real    <span class="number">0</span>m <span class="number">25.51</span>s</span><br><span class="line">user    <span class="number">0</span>m <span class="number">0.11</span>s</span><br><span class="line">sys     <span class="number">0</span>m <span class="number">3.19</span>s</span><br><span class="line">docker run <span class="literal">--rm</span> <span class="literal">-it</span> <span class="literal">-v</span> <span class="string">"<span class="variable">$</span>(pwd):/pwd:cached"</span> <span class="literal">-w</span> /<span class="built_in">pwd</span> alpine time dd <span class="keyword">if</span>=/dev/zero of=speedtest bs=<span class="number">1024</span> count=<span class="number">100000</span></span><br><span class="line"><span class="number">100000</span>+<span class="number">0</span> records <span class="keyword">in</span></span><br><span class="line"><span class="number">100000</span>+<span class="number">0</span> records out</span><br><span class="line">real    <span class="number">0</span>m <span class="number">28.28</span>s</span><br><span class="line">user    <span class="number">0</span>m <span class="number">0.11</span>s</span><br><span class="line">sys     <span class="number">0</span>m <span class="number">3.23</span>s</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># in wsl</span></span><br><span class="line">docker run --<span class="built_in">rm</span> -it -v <span class="string">"<span class="subst">$(pwd)</span>:/pwd:delegated"</span> -w /pwd alpine <span class="keyword">time</span> <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=speedtest bs=1024 count=100000</span><br><span class="line">100000+0 records <span class="keyword">in</span></span><br><span class="line">100000+0 records out</span><br><span class="line">real    0m 0.22s</span><br><span class="line">user    0m 0.02s</span><br><span class="line">sys     0m 0.19s</span><br></pre></td></tr></tbody></table></figure>
<p>通过测试在 wsl 上挂载不管是 <code>delegated</code> 还是 <code>cached</code> 的效率都是 windows 上得 10x 以上.</p>
<h2 id="Devcontainer-in-CI">Devcontainer in CI</h2>
<p>将 devcontainer 构建环境集成在 CI 中，方便开发使用预编译好的镜像，对 CI 流程得 Testing 等能做到同一环境下的统一配置构建方式.</p>
<p>使用 devcontainer/cli 可以轻松的将 devcontainer 集成到 CI 环境中.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://code.visualstudio.com/docs/devcontainers/devcontainer-cli">vscode docs devcontainer cli</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/devcontainers/cli">cli docs</a></p>
</li>
<li class="lvl-2">
<p><a href="https://containers.dev/guide/gitlab-ci">using in gitlab</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g @devcontainers/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 cli 启动配置项目镜像容器</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/microsoft/vscode-remote-try-rust &amp;&amp; <span class="built_in">cd</span> vscode-remote-try-rust</span><br><span class="line">devcontainer up --workspace-folder .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在容器中执行命令 ls</span></span><br><span class="line">devcontainer <span class="built_in">exec</span> --workspace-folder . <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用cli 构建预构建镜像</span></span><br><span class="line">devcontainer build --workspace-folder .</span><br></pre></td></tr></tbody></table></figure>
<p>使用 devcontainer 配置构建镜像</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">devcontainer build \</span><br><span class="line">    --workspace-folder . \</span><br><span class="line">    --image-name registry/namespace/image-name:image-tag \</span><br><span class="line">    --push <span class="literal">true</span> \</span><br><span class="line">    --config .devcontainer/build.json</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// build.json</span></span><br><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"xxx-devcontainer"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"build"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"dockerfile"</span><span class="punctuation">:</span> <span class="string">"Dockerfile"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!CAUTION]<br>
目前构建镜像，需要配置为 ‘build’ 字段，默认的’image’使用存在 <a href="https://github.com/devcontainers/cli/issues/370">bug</a>.</p>
</blockquote>
<p>目前 devcontainer cli 没有 stop 命令，可以通过 docker 查找过滤.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">docker stop $(docker ps -q -f ancestor=image-name)</span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -q -f ancestor=image-name)</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">devcontainer up --workspace-folder . --id-label id_name=&lt;identity name&gt;</span><br><span class="line">docker ps -q --filter <span class="string">"label=id_name=&lt;identity name&gt;"</span> | xargs docker <span class="built_in">rm</span> -f</span><br></pre></td></tr></tbody></table></figure>
<h2 id="devpod">devpod</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/loft-sh/devpod">https://github.com/loft-sh/devpod</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>devcontainer</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 疑难问题</title>
    <url>/posts/7d9a968e/</url>
    <content><![CDATA[<h2 id="docker">docker</h2>
<h3 id="安装">安装</h3>
<p>开发测试环境</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置docker</span></span><br><span class="line"><span class="built_in">cat</span> &gt;/etc/docker/daemon.json&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">  "default-runtime": "nvidia",</span></span><br><span class="line"><span class="string">  "exec-opts": [</span></span><br><span class="line"><span class="string">    "native.cgroupdriver=systemd"</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "runtimes": {</span></span><br><span class="line"><span class="string">    "nvidia": {</span></span><br><span class="line"><span class="string">      "args": [],</span></span><br><span class="line"><span class="string">      "path": "nvidia-container-runtime"</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  "builder": {</span></span><br><span class="line"><span class="string">    "gc": {</span></span><br><span class="line"><span class="string">      "defaultKeepStorage": "20GB",</span></span><br><span class="line"><span class="string">      "enabled": true</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  "experimental": true,</span></span><br><span class="line"><span class="string">  "features": {</span></span><br><span class="line"><span class="string">    "buildkit": true</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  "insecure-registries": [</span></span><br><span class="line"><span class="string">    "harbor.baijiayun.com",</span></span><br><span class="line"><span class="string">    "docker.huaguisystems.com"</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "registry-mirrors": [</span></span><br><span class="line"><span class="string">    "https://docker.mirrors.sjtug.sjtu.edu.cn",</span></span><br><span class="line"><span class="string">    "https://reg-mirror.qiniu.com"</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p>
</li>
</ul>
<h4 id="更新">更新</h4>
<p>查看系统版本，根据官方 <a href="https://docs.docker.com/engine/install/">文档</a> 更新</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/os-release</span><br></pre></td></tr></tbody></table></figure>
<p>QA: <strong>Error response from daemon: Unknown runtime specified docker-runc</strong><br>
当从不兼容的版本升级 docker 并且升级后无法启动 docker 容器时会出现这种情况，执行一下<a href="https://foxutech.com/how-to-upgrade-docker/#:~:text=Instructions%20to%20upgrade%20YUM-based%20systems.%20Add%20the%20Docker,other%20version%2C%20you%20can%20modify%20based%20on%20that.">命令</a>，然后重启 docker。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">grep -rl <span class="string">'docker-runc'</span> /var/lib/docker/containers/ | xargs sed -i <span class="string">'s/docker-runc/runc/g'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="dockerd">dockerd</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ps -ef | grep dockerd</span><br><span class="line">root        6515       1  1 15:28 ?        00:01:08 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></tbody></table></figure>
<p><code>/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</code> 是 Docker daemon 的启动命令，其中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>/usr/bin/dockerd 是 Docker daemon 的路径。</p>
</li>
<li class="lvl-2">
<p>-H fd:// 是 Docker daemon 的监听地址，fd:// 是一个特殊的 Unix socket，用于 systemd socket activation。</p>
</li>
<li class="lvl-2">
<p>–containerd=/run/containerd/containerd.sock 是指定 Docker daemon 使用的 containerd 的 socket 文件路径。</p>
</li>
</ul>
<p>Docker daemon 使用 containerd 作为其默认的容器运行时，主要是因为 containerd 是一个轻量级的、高性能的开源容器运行时，它可以管理完整的容器生命周期，包括镜像管理、容器执行、任务管理、网络管理等。</p>
<p>除了 containerd，Docker 还支持其他的容器运行时，例如 runc、gVisor、Kata Containers 等。可以通过修改 Docker daemon 的配置文件来更改默认的容器运行时。</p>
<h3 id="cgroup-driver">cgroup driver</h3>
<p>Docker 的 cgroup driver 主要有两种类型：systemd 和 cgroupfs。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>systemd: 当 Docker 使用 systemd 作为其 cgroup driver 时，它将会使用 systemd 来创建和管理 cgroup。这意味着 Docker 将会与系统的其他部分（也使用 systemd 的部分）共享同一套 cgroup，从而实现更好的资源管理。</p>
</li>
<li class="lvl-2">
<p>cgroupfs: 当 Docker 使用 cgroupfs 作为其 cgroup driver 时，它将会直接与 cgroup 文件系统交互来创建和管理 cgroup。这意味着 Docker 将会有自己独立的一套 cgroup，与系统的其他部分（使用 systemd 的部分）分开。</p>
</li>
</ul>
<p>总的来说，systemd 和 cgroupfs 的主要区别在于它们与系统的其他部分的交互方式不同。systemd 更倾向于与系统的其他部分共享资源，而 cgroupfs 则更倾向于独立管理资源。</p>
<p>要将 Docker 的 cgroup driver 从 cgroupfs 迁移到 systemd，需要在 Docker 的配置文件中进行更改。以下是步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>打开 Docker 的配置文件，通常位于 /etc/docker/daemon.json。如果文件不存在，需要创建它。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nano /etc/docker/daemon.json</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>在配置文件中添加或修改 "exec-opts"，将其设置为 "native.cgroupdriver=systemd"。</p>
</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"exec-opts"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"native.cgroupdriver=systemd"</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>保存并关闭文件，然后重启 Docker 服务。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></tbody></table></figure>
<p>迁移到 systemd 的好处主要有：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>更好的资源管理：systemd 可以与系统的其他部分共享 cgroup，从而实现更好的资源管理。</p>
</li>
<li class="lvl-2">
<p>更好的兼容性：一些 Kubernetes 工具（如 kubeadm）要求 Docker 使用 systemd 作为其 cgroup driver，以确保与 Kubernetes 的兼容性。</p>
</li>
<li class="lvl-2">
<p>更好的稳定性：systemd 作为 cgroup driver 的稳定性通常比 cgroupfs 更好。</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/633832183">https://zhuanlan.zhihu.com/p/633832183</a></p>
</li>
</ul>
<h3 id="command">command</h3>
<h4 id="docker-daemon-service">docker daemon service</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">service docker start/stop/restart/status</span><br><span class="line">systemctl start/stop/restart docker</span><br></pre></td></tr></tbody></table></figure>
<h4 id="volume">volume</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 清除匿名不再引用的 volume</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="comment"># 清除所有不再引用的 volume</span></span><br><span class="line">docker volume <span class="built_in">ls</span> -f dangling=<span class="literal">true</span> | awk <span class="string">'{print $2}'</span> | xargs docker volume <span class="built_in">rm</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="docker-QA">docker QA</h2>
<p>以下为 Docker 中各种疑难问题及解答</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.jb51.net/article/136264.htm">CMD 和 ENTRYPOINT 命令</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jb51.net/article/124687.htm">在 Docker 容器中捕获信号</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jb51.net/article/136264.htm">如何忽略 ENTRYPOINT 指令</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.escapelife.site/posts/43a2bb9b.html">docker 常见文件汇总</a></p>
</li>
</ul>
<h3 id="Got-permission-denied-while-trying-to-connect-to-the-Docker-daemon-socket-at-unix-var-run-docker-sock-Get-http-2Fvar-2Frun-2Fdocker-sock-v1-40-images-json-dial-unix-var-run-docker-sock-connect-permission-denied">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/images/json: dial unix /var/run/docker.sock: connect: permission denied</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://linuxhandbook.com/docker-permission-denied/">https://linuxhandbook.com/docker-permission-denied/</a></p>
</li>
</ul>
<h2 id="docker-daemon-配置">docker daemon 配置</h2>
<p>docker 运行配置主要通过文件 daemon.json 配置。所在路径在 <code>/etc/docker/daemon.json</code>。</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="comment">// 配置docker运行数据储存路径</span></span><br><span class="line">    <span class="attr">"data-root"</span><span class="punctuation">:</span> <span class="string">"/home/docker"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 配置docker仓库源</span></span><br><span class="line">    <span class="attr">"insecure-registries"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="comment">// 私有源</span></span><br><span class="line">      <span class="string">"harbor.xxx.com"</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 公开源</span></span><br><span class="line">    <span class="attr">"registry-mirrors"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">"https://docker.mirrors.sjtug.sjtu.edu.cn"</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/">Docker 官方文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.simapple.com/docker-chinese-manual">Docker 中文文档</a></p>
</li>
</ul>
<h2 id="docker-context">docker context</h2>
<p>docker context 用于本地方便地访问远程主机的 docker 服务。在不需要手动通过 ssh 连接远程服务器时比较有帮助。</p>
<h3 id="添加-context">添加 context</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker context create &lt;context-name&gt; --docker <span class="string">"host=ssh://format"</span></span><br></pre></td></tr></tbody></table></figure>
<p>这里 <strong>format</strong> 可使用一下格式:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>username@host-ip[:port]</p>
</li>
<li class="lvl-2">
<p>name，指在～/.ssh/config 中提供的 ssh 连接配置名称。</p>
</li>
</ul>
<p>示例:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/config</span><br><span class="line">Host my-remote-docker-machine</span><br><span class="line">  Hostname host</span><br><span class="line">  User username</span><br><span class="line">  Port 12345</span><br><span class="line"></span><br><span class="line">$ docker context create my-remote-docker-machine --docker <span class="string">"host=ssh://my-remote-docker-machine"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="常用命令">常用命令</h3>
<p>下面列出了常用的 docker context 命令和示例。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker --context my-remote-docker-machine images -q</span><br><span class="line">65dadc9c7fe7</span><br><span class="line">f814fce55133</span><br><span class="line">7a9b6da4328e</span><br><span class="line">33655f17f093</span><br><span class="line">d120da10b040</span><br><span class="line">6d6859d1a42a</span><br><span class="line">c19ae228f069</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker context use my-remote-docker-machine</span><br><span class="line">my-remote-docker-machine</span><br><span class="line">Current context is now <span class="string">"my-remote-docker-machine"</span></span><br><span class="line">$ docker context <span class="built_in">ls</span></span><br><span class="line">NAME                         DESCRIPTION                               DOCKER ENDPOINT               KUBERNETES ENDPOINT   ORCHESTRATOR</span><br><span class="line">default                      Current DOCKER_HOST based configuration   unix:///var/run/docker.sock                         swarm</span><br><span class="line">my-remote-docker-machine *                                             ssh://username@host</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ docker context use default <span class="comment"># back to default</span></span><br><span class="line">$ docker context <span class="built_in">rm</span> my-remote-docker-machine</span><br><span class="line">my-remote-docker-machine</span><br></pre></td></tr></tbody></table></figure>
<p>使用 docker 上下文可能有助于避免手动将 SSH 连接到远程服务器。但是，当涉及到在本地使用远程 docker 构建映像时，需要考虑将上载 / 下载多少 docker 上下文。</p>
<h3 id="reference">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://clavinjune.dev/en/blogs/working-with-remote-docker-using-docker-context/">https://clavinjune.dev/en/blogs/working-with-remote-docker-using-docker-context/</a></p>
</li>
</ul>
<h2 id="docker-run-permission">docker run permission</h2>
<h3 id="–cap-add">–cap-add</h3>
<p>通常用于开发用的镜像需要设置 cli 参数给予相应的容器权限。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>–cap-add=NET_RAW: 允许容器进程使用原始套接字，直接访问网络层，一般进行网络嗅探等网络底层操作的容器进程需要。</p>
</li>
<li class="lvl-2">
<p>–cap-add=SYS_PTRACE: 允许容器进程使用 ptrace 系统调用。 ptrace 允许一个进程监视和控制另一个进程的执行，包括读取和修改其内存和寄存器状态。这个选项通常用于需要进行调试或其他进程控制操作的容器。</p>
</li>
<li class="lvl-2">
<p>–cap-add=NET_ADMIN: 允许容器进程使用网络管理功能。该选项需要对网络进行配置或管理的容器，例如配置网络接口、设置路由或进行网络诊断等操作。</p>
</li>
</ul>
<h3 id="–security-opt">–security-opt</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>–security-opt seccomp=unconfined: 允许设置容器的 seccomp 配置。seccomp 是一种 Linux 内核安全模块，它可以限制进程可以执行的系统调用。该选项禁用 seccomp 配置，从而允许容器进程执行所有系统调用，通常用于需要执行一些不受限制的系统调用的容器，但是这也会降低容器的安全性。</p>
</li>
</ul>
<h3 id="–privileged">–privileged</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>它允许容器进程拥有主机上的所有特权。这个选项通常用于需要访问主机上的特权设备或执行一些需要特权的操作的容器。使用这个选项会增加容器的安全风险，因为容器进程可以访问主机</p>
</li>
</ul>
<h3 id="–gpus">–gpus</h3>
<p>允许访问主机 gpu 资源</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>[num]: gpu 数量</p>
</li>
<li class="lvl-2">
<p>all: 所有 gpu</p>
</li>
</ul>
<blockquote>
<p>[!TIP]<br>
如果需要支持 Nvidia Cuda，则需要额外安装支持的 <a href="https://github.com/NVIDIA/nvidia-docker">Docker Runtime</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install -y nvidia-docker2 \</span><br><span class="line">&amp;&amp; nvidia-ctk runtime configure</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<p>验证 gpu 是否可用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># https://catalog.ngc.nvidia.com/orgs/nvidia/teams/k8s/containers/cuda-sample</span></span><br><span class="line">docker run --<span class="built_in">rm</span> --gpus=all nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda10.2</span><br></pre></td></tr></tbody></table></figure>
<h4 id="QA">QA</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error running hook #0: error running hook: exit status 1, stdout: , stderr: nvidia-container-cli: requirement error: unsatisfied condition: cuda&gt;=11.7: unknown.</p>
</li>
</ul>
<p>镜像版本要求 cuda 需要大于 11.7:</p>
<ol>
<li class="lvl-3">
<p>升级驱动满足镜像要求</p>
</li>
<li class="lvl-3">
<p>采用符合要求的镜像</p>
</li>
</ol>
<h3 id="容器中执行设置错误退出">容器中执行设置错误退出</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># set -e 配置遇到错误即退出,并设置退出错误码255</span></span><br><span class="line">docker run --<span class="built_in">rm</span> \</span><br><span class="line">    --volume <span class="string">"<span class="variable">$PWD</span>"</span>:/src \</span><br><span class="line">        -w /src \</span><br><span class="line">        python:3.8-bullseye \</span><br><span class="line">        bash -c <span class="string">"set -e &amp;&amp; \</span></span><br><span class="line"><span class="string">            pip config set global.index-url "</span>https://pypi.tuna.tsinghua.edu.cn/simple/<span class="string">" &amp;&amp; \</span></span><br><span class="line"><span class="string">            pip config set global.trusted-host "</span>pypi.tuna.tsinghua.edu.cn<span class="string">" &amp;&amp; \</span></span><br><span class="line"><span class="string">            pip install mlflow==2.4.2 || \</span></span><br><span class="line"><span class="string">            exit 255"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="dockerignore">dockerignore</h2>
<p>.dockerignore 主要用于在 docker 构建镜像时忽略不需要打包进去的过滤方式，类似于 .gitignore 文件。该文件位于构建上下文的根目录。</p>
<p>匹配规则如下:</p>
<table>
<thead>
<tr>
<th>pattern</th>
<th style="text-align:left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>/temp</em></td>
<td style="text-align:left"> 匹配根路径下一级目录下所有以 temp 开头的文件或目录</td>
</tr>
<tr>
<td><em> /</em>/temp*</td>
<td style="text-align:left"> 匹配根路径下两级目录下所有以 temp 开头的文件或目录</td>
</tr>
<tr>
<td> temp?</td>
<td style="text-align:left"> 匹配根路径下以 temp 开头，任意一个字符结尾的文件或目录</td>
</tr>
<tr>
<td> **/*.go</td>
<td style="text-align:left"> 匹配所有路径下以 .go 结尾的文件或目录，即递归搜索所有路径</td>
</tr>
<tr>
<td> *.md<br>!<a href="http://README.md">README.md</a></td>
<td style="text-align:left"> 匹配根路径下所有以 .md 结尾的文件或目录，但 <a href="http://README.md">README.md</a> 除外</td>
</tr>
</tbody>
</table>
<blockquote>
<p>[!CAUTION]<br>
如果存在冲突的行或重叠包含关系，那么以后面的匹配规则为准。</p>
</blockquote>
<h3 id="reference-2">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/qianghaohao/article/details/87902806">https://blog.csdn.net/qianghaohao/article/details/87902806</a></p>
</li>
</ul>
<h2 id="dockerfile">dockerfile</h2>
<p><img data-src="https://s2.loli.net/2022/09/12/oFw2cRPy1eKYEXt.png" alt="容器优化的思路和方法."></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p>
</li>
</ul>
<h3 id="RUN">RUN</h3>
<p>使用 EOF 避免使用冗余的换行符运行，dockerfile:1.4 声明版本，或者直接指定版本 1</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;&lt;-<span class="string">EOF</span></span></span><br><span class="line">    set -o errexit -o nounset -o pipefail</span><br><span class="line">    cd clash-dashboard</span><br><span class="line">    npm config set registry https://registry.npmmirror.com</span><br><span class="line">    npm i -g pnpm</span><br><span class="line">    pnpm install</span><br><span class="line">    npm <span class="keyword">run</span><span class="language-bash"><span class="string"> build</span></span></span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/engine/reference/builder/#here-documents">https://docs.docker.com/engine/reference/builder/#here-documents</a></p>
</li>
</ul>
<h3 id="ADD-COPY">ADD &amp; COPY</h3>
<blockquote>
<p>在编写 Dockerfile 时经常需要拷贝文件或文件夹的操作，这时就需要用到 ADD 和 COPY 指令。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>拷贝单个文件到指定目录</p>
</li>
</ul>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#拷贝当前目录下的test.jar到/usr/bin目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./test.jar /usr/bin/</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>拷贝特定的多个文件到指定目录</p>
</li>
</ul>
<p>ADD 指令支持通配符，常用的示例如下：</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#拷贝当前目录下的bin文件夹的所有sh文件到/usr/bin目录下</span></span><br><span class="line"><span class="comment">#拷贝当前目录下的bin文件夹的所有sh文件到/usr/bin目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./bin/*.sh /usr/bin/</span></span><br><span class="line"><span class="comment">#拷贝当前目录下的bin文件夹的所有带后缀的文件到/usr/bin目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./bin/*.* /usr/bin/</span></span><br><span class="line"><span class="comment">#拷贝当前目录下的bin文件夹的所有不带后缀的文件到/usr/bin目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./bin/* /usr/bin/</span></span><br><span class="line"><span class="comment">#拷贝当前目录下的bin文件夹的所有文件到/usr/bin目录下（/usr/bin目录原有的文件会保留）</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./bin/ /usr/bin/</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>拷贝文件夹到指定的目录</p>
</li>
</ul>
<p>ADD 宿主机文件夹的全路径 docker 容器下的文件夹路径 + 新文件夹名</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">#拷贝当前目录下的config文件夹到/usr/bin目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./config /usr/bin/config</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="SHELL">SHELL</h3>
<p>用于覆盖默认的 Shell</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> docker:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> &lt;&lt;-<span class="string">EOF</span></span></span><br><span class="line">    set -x</span><br><span class="line">    apk update &amp;&amp; apk <span class="keyword">add</span><span class="language-bash"><span class="string"> --no-cache bash npm nodejs git</span></span></span><br><span class="line">    npm install -g @devcontainers/cli</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># Override default shell as bash</span></span><br><span class="line"><span class="keyword">SHELL</span><span class="language-bash"><span class="string"> ["/bin/bash", "-c"]</span></span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/engine/reference/builder/#shell">https://docs.docker.com/engine/reference/builder/#shell</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/a/42216046/18916219">https://stackoverflow.com/a/42216046/18916219</a></p>
</li>
</ul>
<h2 id="dockerfile-优化">dockerfile 优化</h2>
<h3 id="选择基础镜像">选择基础镜像</h3>
<p><img data-src="https://s2.loli.net/2022/09/12/s51tCy2ReQLqaif.png" alt="选择官方镜像."></p>
<p><img data-src="https://s2.loli.net/2022/09/12/DNOunbjFT91SIEA.png" alt="使用具体的镜像 tag."></p>
<p><img data-src="https://s2.loli.net/2022/09/12/uWRJryql2XSie1G.png" alt="使用最小基础镜像."></p>
<h3 id="优化指令顺序">优化指令顺序</h3>
<p>把 WORKDIR/ENV 等命令放在前面，COPY/ADD 等命令放在后面 [^2]。</p>
<p><img data-src="https://s2.loli.net/2022/09/12/XzV5g3meuly1nBT.png" alt="优化 WORKDIR/ENV 和 COPY/ADD 顺序."></p>
<p><img data-src="https://s2.loli.net/2022/09/12/6SgjIkntAHVBdYi.png" alt="使用更具体的 COPY 路径."></p>
<h3 id="合并构建指令">合并构建指令</h3>
<p><img data-src="https://s2.loli.net/2022/09/12/PBw2jWYCgydkmUc.png" alt="合并多个 RUN 指令，减少层数."></p>
<h3 id="清理中间缓存">清理中间缓存</h3>
<p><img data-src="https://s2.loli.net/2022/09/12/VpwshZoGbNgAaCm.png" alt="清理系统包信息缓存."></p>
<p>用户数据缓存:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>~/.cache 等用户缓存。</p>
</li>
<li class="lvl-2">
<p>安装包临时缓存。</p>
</li>
</ul>
<h3 id="开发镜像和运行时镜像分离">开发镜像和运行时镜像分离</h3>
<p>runtime 镜像仅包含基本运行环境，开发镜像包含所有的开发依赖。开发镜像尽可能以 runtime 镜像为基础构建。</p>
<h3 id="多阶段构建">多阶段构建</h3>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230410/103130689.png" alt="多阶段构建"></p>
<h3 id="使用-buildkit">使用 buildkit</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 构建多平台镜像</span></span><br><span class="line">$ docker buildx build --platform \</span><br><span class="line">    linux/arm,linux/arm64,linux/amd64 \</span><br><span class="line">    -t &lt;group&gt;/hello . --push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像信息</span></span><br><span class="line">$ docker buildx imagetools inspect &lt;group&gt;/hello</span><br></pre></td></tr></tbody></table></figure>
<p>使用构建缓存 <a href="https://github.com/moby/buildkit/blob/master/frontend/dockerfile/docs/reference.md">RUN --mount</a></p>
<blockquote>
<p>[!CAUTION]<br>
buildkit 会使用 docker 构建缓存，也就是 Build Cache，需要定期清理。</p>
<p>查看缓存：docker system df</p>
<p>清理方式：echo yes | docker builder prune -a</p>
</blockquote>
<h3 id="二进制工具安装">二进制工具安装</h3>
<p>从现有镜像中安装二进制文件</p>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.17</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> GOLANG_LINT_VERSION=V1.<span class="number">43.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> GOV PATH=/usr/local/bin/govc</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=vmware/govc:v0.27.2 /govc /usr/local/bin</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=dtzar/helm-kubectl:3.8.0 /usr/local/bin /usr/local/bin</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=koalaman/shellcheck:stable /bin/shellcheck /usr/local/bin/shellcheck</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> -from=docker: 20.10.12-dind-rootless /usr/local/bin/docker /usr/local/bin/docker</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=hashicorp/packer:1.8 /bin/packer /usr/local/bin</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=quay.io/argoproj/argocli:v3.2.6 /bin/argo /usr/local/bin</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="reference-3">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.escapelife.site/posts/36c7bd6f.html">dockerfile 优化参考</a></p>
</li>
</ul>
<h2 id="docker-inspect">docker inspect</h2>
<p>docker inspect 输出可以通过 <code>--format</code>, 使用 <code>{{.}}</code> 检索某个字段结果</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 输出原始数据, 这里`.`表示所有结果</span></span><br><span class="line">docker inspect --format <span class="string">'{{.}}'</span> &lt;container name&gt;</span><br><span class="line"><span class="comment"># 以json输出,并检索字段 LogPath</span></span><br><span class="line">docker inspect --format <span class="string">'{{json .LogPath}}'</span> &lt;container name&gt; | jq</span><br><span class="line"><span class="comment"># 以表格输出</span></span><br><span class="line">docker inspect --format <span class="string">'table {{.ID}}\t{{.Name}}\t{{.Node}}\t{{.CurrentState}}'</span> &lt;container name&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="log">log</h3>
<p>Docker 默认将日志存储到一个日志文件中。要检查日志文件路径，请运行命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker inspect --format=<span class="string">'{{.LogPath}}'</span> containername</span><br><span class="line"></span><br><span class="line">/var/lib/docker/containers/f844a7b45ca5a9589ffaa1a5bd8dea0f4e79f0e2ff639c1d010d96afb4b53334/f844a7b45ca5a9589ffaa1a5bd8dea0f4e79f0e2ff639c1d010d96afb4b53334-json.log</span><br></pre></td></tr></tbody></table></figure>
<p>要查看实时日志，可以在以下命令中运行</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f `docker inspect --format=<span class="string">'{{.LogPath}}'</span> containername`</span><br></pre></td></tr></tbody></table></figure>
<p>注意：</p>
<p><code>/var/lib/docker/containers/f844a7b45ca5a9589ffaa1a5bd8dea0f4e79f0e2ff639c1d010d96afb4b53334/f844a7b45ca5a9589ffaa1a5bd8dea0f4e79f0e2ff639c1d010d96afb4b53334-json.log</code> 仅当 docker 生成日志（如果没有日志）时，才会创建此日志文件，否则该文件将不存在。如果我们运行命令 <code>docker logs containername</code>，它类似于某个时候，但什么也不返回。在这种情况下，该文件将不可用。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>重定向</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker logs -f &lt;yourContainer&gt; &amp;&gt; your.log &amp;</span><br></pre></td></tr></tbody></table></figure>
<p>说明：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-f（即–follow）：写入所有现有日志，并继续（跟随）记录接下来出现的所有内容。</p>
</li>
<li class="lvl-2">
<p>&amp;&gt; 重定向标准输出和标准错误。</p>
</li>
<li class="lvl-2">
<p>可能想在后台运行该方法，因此 &amp;。</p>
</li>
<li class="lvl-2">
<p>可以通过以下方式将输出和 stderr 分开：（&gt; output.log 2&gt; error.log 而不是使用 &amp;&gt;）。</p>
</li>
</ul>
<h2 id="docker-port">docker port</h2>
<h3 id="porting-映射">porting 映射</h3>
<p>默认情况下，宿主机是无法访问容器内部网络的，但是可以使用端口映射来解决这个问题。主要通过 docker run 跟 -P（大写） 或 -p（小写）参数来实现。docker run -P 会把容器中监听的端口随机绑定到宿主机的可用端口上：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -p &lt;format&gt; image</span><br><span class="line"><span class="comment"># 默认是 tcp 协议，如果是 udp 协议，则可以显示指定</span></span><br><span class="line">docker run -d -p 127.0.0.1:8080:80/udp nginx:latest</span><br><span class="line"><span class="comment"># 查看容器 port 映射情况</span></span><br><span class="line">docker port container_ID <span class="comment">#容器ID</span></span><br><span class="line"><span class="comment">#将nginx的80端口映射到宿主机的800端口上</span></span><br><span class="line">docker run -d --name ng -it -p 800:80 nginx</span><br><span class="line"><span class="comment"># docker port ng</span></span><br><span class="line">80/tcp -&gt; 0.0.0.0:800</span><br></pre></td></tr></tbody></table></figure>
<p><code>&lt;format&gt;</code> 指定格式如下</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ip:hostport:containerport #指定 ip、指定宿主机 port、指定容器 port</p>
</li>
<li class="lvl-2">
<p>ip::containerport #指定 ip、未指定宿主机 port（随机）、指定容器 port</p>
</li>
<li class="lvl-2">
<p>hostport:containerport #未指定 ip、指定宿主机 port、指定容器 port</p>
</li>
</ul>
<h3 id="容器互联">容器互联</h3>
<p>容器互联通过 --link 配置链接实现单独隔离容器的互联。</p>
<p>以下以 nginx + php-fpm 示例：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这里分别有一个 php-fpm 和 nginx 镜像。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、先启动php-fpm 容器， 并使用 --name 参数指定容器名</span></span><br><span class="line">[root@localhost ~] docker run -d --name php-fpm php:5.6.32-fpm</span><br><span class="line">3e4b04174da9a91f77d9560113d3021f90a9638165968ccff44fede6c7961871</span><br><span class="line"><span class="comment"># 每一个运行中的Docker容器都有一块虚拟网卡和一个内网ip，可以进到上面的容器来查看：</span></span><br><span class="line"><span class="comment"># 先安装ifconfig命令，然后使用ifconfig查看ip地址信息</span></span><br><span class="line">[root@localhost ~] docker <span class="built_in">exec</span> -it php-fpm /bin/bash</span><br><span class="line">root@3e4b04174da9:/var/www/html# apt-get update</span><br><span class="line">root@3e4b04174da9:/var/www/html# apt-get install net-tools</span><br><span class="line">root@3e4b04174da9:/var/www/html# ifconfig</span><br><span class="line"><span class="comment"># 可以看到php-fpm容器有一块 eth0 网卡， 其ip地址为 172.17.0.54，还可以查看hosts信息</span></span><br><span class="line">root@3e4b04174da9:/var/www/html# <span class="built_in">cat</span> /etc/hosts</span><br><span class="line"><span class="comment"># 容器ID解析到了该容器局域网IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、再启动nginx容器，同样指定一个名字，并使用 --link 连接到之前的php-fpm容器。</span></span><br><span class="line">[root@localhost ~] docker run -d -p 8080:80 --name nginx --<span class="built_in">link</span> php-fpm nginx:latest</span><br><span class="line">03fe0d3fbd43b5db157992703f70dd6eff4555c4e49c3620e7a212c81824778f</span><br><span class="line"><span class="comment"># 此时 nginx 容器就连接到 php-fpm 容器上了，可以进入nginx容器查看相关环境变量和hosts信息</span></span><br><span class="line">[root@localhost ~] docker <span class="built_in">exec</span> -it nginx /bin/bash</span><br><span class="line">root@03fe0d3fbd43:/ <span class="built_in">env</span></span><br><span class="line"><span class="comment"># 能够看到 nginx 容器中有很多 PHP_FPM 相关的环境变量，而hosts中除了有本身容器ID与自身IP地址的解析关系外，</span></span><br><span class="line"><span class="comment"># 还包含了php-fpm 容器的解析，我们可以使用 ping 或 telnet 命令查看两个容器之间的网络是否畅通。</span></span><br><span class="line"><span class="comment"># 先安装 ping 和 telnet ：</span></span><br><span class="line">root@03fe0d3fbd43:/ apt-get install iputils-ping</span><br><span class="line">root@03fe0d3fbd43:/ apt-get install telnet</span><br><span class="line">root@03fe0d3fbd43:/ ping php-fpm</span><br><span class="line"><span class="comment"># 看到连接了容器之后可以直接用容器名来访问,非常方便</span></span><br><span class="line"><span class="comment"># 现在我们可以配置 nginx 的 fastcgi， 转发php请求到 php-fpm 容器</span></span><br><span class="line"><span class="comment"># 先安装VI：</span></span><br><span class="line">root@03fe0d3fbd43:/ apt-get install vim-tiny</span><br><span class="line"><span class="comment"># 然后修改 /etc/nginx/conf.d/default.nginx</span></span><br><span class="line"><span class="comment"># 记得修改好后 reload 一下nginx</span></span><br><span class="line">root@03fe0d3fbd43:/ /etc/init.d/nginx reload</span><br><span class="line"><span class="comment"># 在php-fpm容器的 /php 目录下创建一个 test.php，并添加相应的权限</span></span><br><span class="line">[root@localhost ~] docker <span class="built_in">exec</span> -it php-fpm /bin/bash</span><br><span class="line">root@0805ea04f2c8:/var/www/html# <span class="built_in">mkdir</span> /php</span><br><span class="line">root@0805ea04f2c8:/var/www/html# <span class="built_in">echo</span> <span class="string">'&lt;?php echo time() . "\n";'</span> &gt; /php/test.php</span><br><span class="line">root@0805ea04f2c8:/var/www/html# <span class="built_in">chmod</span> 777 /php/test.php</span><br><span class="line"><span class="comment"># 然后在宿主机下访问该php文件：</span></span><br><span class="line">[root@localhost ~] curl <span class="string">'127.0.0.1:8080/test.php'</span></span><br><span class="line">1509695115</span><br><span class="line">[root@localhost ~] curl <span class="string">'127.0.0.1:8080/test.php'</span></span><br><span class="line">1509695138</span><br></pre></td></tr></tbody></table></figure>
<h3 id="参考">参考</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.h5w3.com/tag/Docker">https://www.h5w3.com/tag/Docker</a></p>
</li>
</ul>
<h2 id="dumb-init">dumb-init</h2>
<p>这里介绍了一种容器初始化系统 <a href="https://github.com/Yelp/dumb-init"><code>dumb-init</code></a>。</p>
<p>主要关注于解决两个问题。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>作为 <code>PID</code> 为 1 容器进程的信号处理。</p>
</li>
<li class="lvl-2">
<p>孤儿僵尸进程回收。</p>
</li>
</ul>
<span id="more"></span>
<h3 id="为什么使用-dumb-init">为什么使用 dumb-init</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/zhongbeida_xue/article/details/107489863">参考博客 1</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/MrVolleyball/p/10177568.html">参考博客 2</a></p>
</li>
</ul>
<p>使用时需注意<a href="https://github.com/Yelp/dumb-init#usage">参考</a></p>
<h3 id="install">install</h3>
<p>通过系统命令安装。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">yum/apt/apk install -y dumb-init</span><br></pre></td></tr></tbody></table></figure>
<p>通过 pip 安装管理器。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install dumb-init</span><br></pre></td></tr></tbody></table></figure>
<p>通过 github 安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">RUN wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64</span><br><span class="line">RUN <span class="built_in">chmod</span> +x /usr/local/bin/dumb-init</span><br></pre></td></tr></tbody></table></figure>
<h3 id="参考-2">参考</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/Yelp/dumb-init">dumb-init</a></p>
</li>
</ul>
<h2 id="docker-template">docker template</h2>
<p>本文主要搜集了标准的 docker 镜像的标准模板。</p>
<!-- more -->
<h3 id="python">python</h3>
<p><a href="https://github.com/docker-library/python">python 官方标准模板</a> 包括 python3 的基础镜像。</p>
<h4 id="版本分布">版本分布</h4>
<p>版本分布 bullseye/buster/alpine：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>slim 最小安装，不包含 gdb 调试脚本加载。</p>
</li>
<li class="lvl-2">
<p>非 slim，<a href="https://github.com/docker-library/python/pull/701">包含 gdb 调试脚本</a>（建议使用）。</p>
</li>
<li class="lvl-2">
<p>alpine 非 glibc 的最小镜像模板。</p>
</li>
</ul>
<h4 id="参考-3">参考</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://devguide.python.org/advanced-tools/gdb/index.html">python 开发手册支持 gdb</a></p>
</li>
</ul>
<h3 id="mysql">mysql</h3>
<p>这里简单介绍 docker 启动配置 mysql 服务方式。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/u014576291/article/details/105890286">安装 8.0.20</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装时映射到容器中的3306即可</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">  -p 3365:3306 \</span><br><span class="line">  --name mysql5.7.21 \</span><br><span class="line">  --privileged=<span class="literal">true</span> \</span><br><span class="line">  <span class="comment"># no #不重启(不带restart参数时，默认不重启)</span></span><br><span class="line">  <span class="comment"># on-failure  #退出状态非0时重启</span></span><br><span class="line">  <span class="comment"># always  #始终重启</span></span><br><span class="line">  --restart=always \ <span class="comment">#在宿主机重启后或者Docker服务重启后自动启动容器，</span></span><br><span class="line">  -v /opt/mysql5.7.21/mysql:/etc/mysql \</span><br><span class="line">  -v /opt/mysql5.7.21/logs:/logs \</span><br><span class="line">  -v /opt/mysql5.7.21/data:/var/lib/mysql \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  -d mysql:5.7.21 \</span><br><span class="line">  --character-set-server=utf8mb4 \</span><br><span class="line">  --collation-server=utf8mb4_general_ci   <span class="comment">#设置编码为utf8mb4</span></span><br></pre></td></tr></tbody></table></figure>
<!-- more -->
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/weixin_42088970/article/details/87929517">安装 5.7.21</a></p>
</li>
</ul>
<h2 id="docker-compose">docker-compose</h2>
<p><a href="https://docs.docker.com/compose/">docker-compose</a> 是一个多容器编排工具，常用于开发配置.</p>
<h3 id="GPU-support">GPU support</h3>
<p><a href="https://docs.docker.com/compose/gpu-support/">docker-compose gpu support</a>.</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda10.2</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">devices:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">driver:</span> <span class="string">nvidia</span></span><br><span class="line">              <span class="attr">count:</span> <span class="string">all</span></span><br><span class="line">              <span class="attr">capabilities:</span> [<span class="string">gpu</span>]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="healthcheck">healthcheck</h3>
<p>CMD 和 CMD-SHELL 是 Docker Compose 文件中用于定义容器健康检查的两种不同的命令类型。</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.8"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">"CMD"</span>, <span class="string">"curl"</span>, <span class="string">"-f"</span>, <span class="string">"http://minio:9000/minio/health/live"</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">tritonserver:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">minio:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">      <span class="attr">create_models_buckets:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_completed_successfully</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">"CMD-SHELL"</span>, <span class="string">"curl -f http://tritonserver:8000/v2/health/ready"</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">shm_size:</span> <span class="string">256M</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="attr">devices:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">driver:</span> <span class="string">nvidia</span></span><br><span class="line">              <span class="attr">count:</span> <span class="string">all</span></span><br><span class="line">              <span class="attr">capabilities:</span> [<span class="string">gpu</span>]</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>CMD 命令类型用于执行指定的命令，它将命令及其参数作为一个数组传递。在给定的示例中，CMD 命令执行的是 <code>curl -f http://minio:9000/minio/health/live</code> 命令，用于检查 MinIO 服务的健康状态。</p>
</li>
<li class="lvl-2">
<p>CMD-SHELL 命令类型用于执行指定的命令字符串。在给定的示例中，CMD-SHELL 命令执行的是 <code>curl -f http://tritonserver:8000/v2/health/ready</code> 命令，同样用于检查 Triton Server 服务的健康状态。</p>
</li>
</ul>
<p>因此，CMD 和 CMD-SHELL 的区别在于命令的传递方式，CMD 使用数组形式传递命令及其参数，而 CMD-SHELL 使用字符串形式传递命令。</p>
<h3 id="restart">restart</h3>
<p>restart 策略用于控制容器在退出后的行为。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>on-failure 是指在容器退出时，当其退出状态码不为 0（即失败）时，自动重启该容器。具体来说，它会重启那些在容器退出时返回非 0 状态码的容器。如果容器在退出时返回状态码 0，则不会自动重启该容器。</p>
</li>
<li class="lvl-2">
<p>no：容器退出时不重启容器；</p>
</li>
<li class="lvl-2">
<p>always：容器退出时总是重启容器；</p>
</li>
<li class="lvl-2">
<p>unless-stopped：容器退出时重启容器，除非容器被手动停止。</p>
</li>
</ul>
<h3 id="volume-2">volume</h3>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">your-service:</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">cppblueprint-src</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/workspace</span></span><br><span class="line">        <span class="attr">consistency:</span> <span class="string">cached</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="config">config</h3>
<p>docker-compose config 命令用于验证并查看最终的 docker-compose 文件。当有多个 docker-compose 文件时，可以使用 -f 参数来指定多个文件。这些文件将按照它们在命令行中出现的顺序进行合并。如果在多个文件中定义了相同的服务，那么后面的定义将覆盖前面的定义。</p>
<p>合并规则如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对于字典类型的字段（例如 environment，labels），它们将被深度合并。如果同一个键在多个文件中定义，那么后面的值将覆盖前面的值。</p>
</li>
<li class="lvl-2">
<p>对于列表类型的字段（例如 ports，volumes），它们将被扩展。也就是说，所有文件中的值都将被包含在最终的列表中。</p>
</li>
<li class="lvl-2">
<p>对于其他类型的字段，例如 image，command，如果在多个文件中定义，那么后面的值将覆盖前面的值。</p>
</li>
</ul>
<p>例如，如果有两个 docker-compose 文件，docker-compose.yml 和 docker-compose.override.yml，可以使用以下命令来查看最终的配置：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker-compose -f docker-compose.yml -f docker-compose.override.yml config</span><br></pre></td></tr></tbody></table></figure>
<h2 id="docker-api">docker api</h2>
<p>Docker Engine 有一个 RESTful API。可以在这里找到完整的 API 文档 <a href="https://docs.Docker.com/Engine/API/v1.40/%E8%BF%99%E6%84%8F%E5%91%B3%E7%9D%80%E7%94%B1%E4%BA%8E%E5%A4%9A%E5%85%8B%E5%BC%95%E6%93%8E%E6%9C%89%E4%B8%80%E4%B8%AA">https://docs.Docker.com/Engine/API/v1.40 / 这意味着由于多克引擎有一个</a> RESTful HTTP/S API，我们可以连接到一个远程多克引擎，甚至可以使用 curl 或 wget 命令远程运行命令，就像我们可以对任何其他基于 HTTP/S 的 API 所做的那样。</p>
<h3 id="python-client">python client</h3>
<p>python 通过包 docker 提供 api 客户端操作工具，<code>pip install docker</code></p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> docker</span><br><span class="line">client = docker.from_env()</span><br><span class="line"><span class="built_in">print</span>(client.containers.run(<span class="string">"alpine"</span>, [<span class="string">"echo"</span>, <span class="string">"hello"</span>, <span class="string">"world"</span>]))</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/engine/api/sdk/">https://docs.docker.com/engine/api/sdk/</a></p>
</li>
</ul>
<h2 id="docker-swarm">docker swarm</h2>
<p><a href="https://docs.docker.com/engine/swarm/">Docker Swarm</a> 是 Docker 的原生集群和编排工具，用于创建和管理 Docker 节点集群和在集群中部署服务。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/engine/swarm/">https://docs.docker.com/engine/swarm/</a></p>
</li>
</ul>
<h3 id="swarm-管理">swarm 管理</h3>
<p>Step 1, 初始化 Swarm 集群：首先，需要在一个节点上初始化 Swarm 集群。这个节点将成为集群的管理节点。使用以下命令初始化 Swarm：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 其中&lt;MANAGER-IP&gt;是管理节点的IP地址。</span></span><br><span class="line">docker swarm init --advertise-addr &lt;MANAGER-IP&gt;</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker swarm init --advertise-addr 10.16.31.3</span><br><span class="line">Swarm initialized: current node (vw5q29giyjap87yfwjbd9t0hh) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm <span class="built_in">join</span> --token SWMTKN-1-1la2dx1j0o12hk8mq0an415s637b71ujx9hfqm90c5vmi61d3v-3fcfcedql7voq0skyrj1wxson 10.16.31.3:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></tbody></table></figure>
<p>Step 2, 添加工作节点：初始化 Swarm 后，会得到一个命令和 token，其他节点可以使用这个命令和 token 加入 Swarm 集群。命令如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker swarm <span class="built_in">join</span> --token &lt;TOKEN&gt; &lt;MANAGER-IP&gt;:2377</span><br></pre></td></tr></tbody></table></figure>
<p>Step 3, 从 Swarm 集群中退出</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 在工作节点上执行：如果想让一个工作节点从Swarm集群中退出，可以在该节点上运行以下命令</span></span><br><span class="line">docker swarm leave</span><br><span class="line"><span class="comment"># 在管理节点上执行：如果想让一个管理节点从Swarm集群中退出，需要添加--force选项，命令如下</span></span><br><span class="line">docker swarm leave --force</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!CAUTION]<br>
请注意，如果 Swarm 集群只有一个管理节点，不应该让它退出，因为这将导致失去管理 Swarm 集群的能力。</p>
</blockquote>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/engine/reference/commandline/swarm/">https://docs.docker.com/engine/reference/commandline/swarm/</a></p>
</li>
</ul>
<h3 id="节点管理">节点管理</h3>
<p>Docker Swarm 中的节点管理主要涉及到添加节点、查看节点状态、更新节点和删除节点等操作。</p>
<p>添加节点：在初始化 Swarm 集群后，会得到一个命令和 token，其他节点可以使用这个命令和 token 加入 Swarm 集群。命令如下：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker swarm <span class="built_in">join</span> --token &lt;TOKEN&gt; &lt;MANAGER-IP&gt;:2377</span><br></pre></td></tr></tbody></table></figure>
<p>节点状态：可以使用以下命令查看 Swarm 集群中所有节点的状态：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker node <span class="built_in">ls</span></span><br></pre></td></tr></tbody></table></figure>
<p>更新节点：可以使用以下命令更新 Swarm 集群中的节点：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker node update &lt;NODE-ID&gt;</span><br><span class="line">docker node update &lt;NODE-ID&gt; --availiabiblity drain/active/pause</span><br></pre></td></tr></tbody></table></figure>
<p>删除节点：可以使用以下命令从 Swarm 集群中删除节点：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 首相设置节点不再被调度</span></span><br><span class="line">docker node update &lt;NODE-ID&gt; --availiabiblity drain</span><br><span class="line"><span class="comment"># 然后删除节点</span></span><br><span class="line">docker node <span class="built_in">rm</span> &lt;NODE-ID&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>label 管理:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 给节点添加label</span></span><br><span class="line">docker node update --label-add &lt;key&gt;=&lt;value&gt; &lt;NODE-ID&gt;</span><br><span class="line"><span class="comment"># 根据label部署服务</span></span><br><span class="line">docker service create --constraint <span class="string">'node.labels.&lt;key&gt;==&lt;value&gt;'</span> &lt;IMAGE&gt;</span><br><span class="line"><span class="comment"># 使用docker-compose</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | docker-compose up -f -</span></span><br><span class="line"><span class="string">version: '3'</span></span><br><span class="line"><span class="string">services:</span></span><br><span class="line"><span class="string">  web:</span></span><br><span class="line"><span class="string">    image: &lt;IMAGE&gt;</span></span><br><span class="line"><span class="string">    deploy:</span></span><br><span class="line"><span class="string">      placement:</span></span><br><span class="line"><span class="string">        constraints:</span></span><br><span class="line"><span class="string">          - node.labels.&lt;key&gt;==&lt;value&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/engine/reference/commandline/node/">https://docs.docker.com/engine/reference/commandline/node/</a></p>
</li>
</ul>
<h3 id="服务管理">服务管理</h3>
<p>docker stack 和 docker service 都是 Docker Swarm 模式下的命令，它们用于管理和操作服务，但是它们的使用场景和功能有所不同。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>docker stack：这个命令主要用于管理和操作整个应用栈。一个应用栈可以包含多个服务，这些服务可以通过同一个 docker-compose.yml 文件定义。可以使用 docker stack deploy 命令来部署整个应用栈，或者使用 docker stack rm 来移除整个应用栈。</p>
</li>
<li class="lvl-2">
<p>docker service：这个命令主要用于管理和操作单个服务。可以使用 docker service create 命令来创建一个新的服务，或者使用 docker service update 来更新一个现有的服务。此外，还可以使用 docker service scale 来调整服务的副本数量。</p>
</li>
</ul>
<p>总的来说，docker stack 命令提供了一个更高级别的抽象，它允许一次性管理和操作整个应用栈，而 docker service 命令则提供了更细粒度的控制，它允许管理和操作单个服务。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 部署服务</span></span><br><span class="line">docker stack deploy -c docker-compose.yml -c docker-compose.prod.yml myapp_stack</span><br><span class="line"><span class="comment"># 查看服务</span></span><br><span class="line">docker service <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 更新服务</span></span><br><span class="line">docker service update &lt;SERVICE-ID&gt;</span><br><span class="line"><span class="comment"># 删除服务</span></span><br><span class="line">docker service <span class="built_in">rm</span> &lt;SERVICE-ID&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="GPU">GPU</h3>
<p>将 docker runtime 默认位置为 nvidia.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/mtzgroup/bigchem/blob/master/docs/swarm-gpus.md">https://github.com/mtzgroup/bigchem/blob/master/docs/swarm-gpus.md</a></p>
</li>
</ul>
<h3 id="docker-compose-2">docker-compose</h3>
<blockquote>
<p>[!CAUTION]<br>
docker-compose 中 depends_on,restart,deploy.resources.reservations 等资源不可用，需要单独配置.</p>
</blockquote>
<h3 id="UI">UI</h3>
<p>Docker Swarm 的管理和部署可以通过各种 UI 工具进行，以下是一些常见的选项：</p>
<ol>
<li class="lvl-3">
<p>Portainer：Portainer 是一个轻量级的管理 UI，可以用来管理 Docker、Swarm、Kubernetes 等。它提供了一个直观的界面来管理 Docker Swarm 集群，包括服务、容器、网络和卷。</p>
</li>
<li class="lvl-3">
<p>SwarmPit：SwarmPit 提供了一个简单而强大的界面来管理 Docker Swarm 集群。它支持服务的自动扩展、容器日志、服务发现等功能。</p>
</li>
<li class="lvl-3">
<p>Rancher：Rancher 是一个开源的容器管理平台，它支持 Docker Swarm、Kubernetes 等。Rancher 提供了一个全面的界面来管理和部署服务。</p>
</li>
</ol>
<p>以上工具都可以帮助更方便地管理和部署 Docker Swarm 集群。可以根据需求选择合适的工具。</p>
<h4 id="swarmpit">swarmpit</h4>
<p><a href="https://github.com/swarmpit/swarmpit">SwarmPit</a>:Lightweight mobile-friendly Docker Swarm management UI</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -it --<span class="built_in">rm</span>   \</span><br><span class="line">    --name swarmpit-installer   \</span><br><span class="line">    --volume /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    swarmpit/install:1.9</span><br></pre></td></tr></tbody></table></figure>
<h4 id="portainer">portainer</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line">docker run -d \</span><br><span class="line">    -p 9000:9000 \</span><br><span class="line">    --name=portainer \</span><br><span class="line">    --restart=unless-stopped \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v portainer_data:/data \</span><br><span class="line">    portainer/portainer-ce</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.portainer.io/start/install-ce/server/docker/linux">https://docs.portainer.io/start/install-ce/server/docker/linux</a></p>
</li>
</ul>
<h3 id="swarm-mesh">swarm mesh</h3>
<p>swarm 默认使用的是 IPVS 提供的四层模型请求负载均衡消费模式。即和默认非 swarm 模式下单独 docker 使用同一一个网络模型.</p>
<p>当有其它需求实时，推荐使用 traefik 等开源方案.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://semaphoreci.com/community/tutorials/consuming-services-in-a-docker-swarm-mode-cluster">https://semaphoreci.com/community/tutorials/consuming-services-in-a-docker-swarm-mode-cluster</a></p>
</li>
</ul>
<h2 id="docker-proxy">docker proxy</h2>
<p>在容器环境中配置代理环境变量，配置<a href="https://github.com/msclock/gitlab-ci-templates/blob/main/templates/common.yml">示例</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>HTTP_PROXY</p>
</li>
<li class="lvl-2">
<p>http_proxy</p>
</li>
<li class="lvl-2">
<p>HTTPS_PROXY</p>
</li>
<li class="lvl-2">
<p>https_proxy</p>
</li>
<li class="lvl-2">
<p>NO_PROXY</p>
</li>
<li class="lvl-2">
<p>no_proxy</p>
</li>
<li class="lvl-2">
<p>ALL_PROXY</p>
</li>
<li class="lvl-2">
<p>all_proxy</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy">https://docs.docker.com/config/daemon/systemd/#httphttps-proxy</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docs</title>
    <url>/posts/51572bb7/</url>
    <content><![CDATA[<h2 id="mkdocs">mkdocs</h2>
<p>MkDocs 是一个用于创建漂亮的静态文档网站的工具</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.mkdocs.org/">https://www.mkdocs.org/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes">mkdocs themes</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/mkdocs/mkdocs/wiki/MkDocs-Plugins">mkdocs plugins</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/383582472">zhihu mkdocs 介绍</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/m0_46521785/article/details/119812280">csdn docs 文档比较</a></p>
</li>
<li class="lvl-2">
<p><a href="https://lyz-code.github.io/blue-book/linux/mkdocs/">blue book docs on mkdocs</a></p>
</li>
</ul>
<span id="more"></span>
<h3 id="quickstart">quickstart</h3>
<p>以下是一些快速开始的步骤:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">pip install mkdocs</span><br><span class="line"><span class="comment"># 在本地创建文档配置</span></span><br><span class="line">mkdocs new .</span><br><span class="line"><span class="comment"># 预览 serve 在mkdocs.yml中的文档</span></span><br><span class="line">mkdocs serve</span><br><span class="line"><span class="comment"># 构建 public 静态文件,可用于CI部署</span></span><br><span class="line">mkdocs build --site-dir public</span><br></pre></td></tr></tbody></table></figure>
<h3 id="page-navigation">page navigation</h3>
<p>在 MkDocs 中，可以使用 mkdocs.yml 配置文件来定义导航栏的结构和顺序。以下是一些常用的导航栏配置选项：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>nav：nav 是一个列表，用于定义导航栏的各个部分。每个部分都表示为一个字典，包含 title 和 url 字段。例如：</p>
</li>
</ul>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Home:</span> <span class="string">index.md</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">About:</span> <span class="string">about.md</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Contact:</span> <span class="string">contact.md</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上面的示例中，导航栏将包含 "Home"、"About" 和 "Contact" 三个部分，<a href="http://xn--index-zh6htimby602aoe0h.md">分别链接到 index.md</a>、about.md 和 contact.md 文件。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>pages：如果文档结构比较复杂，可以使用 pages 字段来定义更详细的导航栏结构。pages 是一个列表，每个列表项表示一个页面，可以是一个 Markdown 文件或一个包含 title 和 url 字段的字典。例如：</p>
</li>
</ul>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Home:</span> <span class="string">index.md</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">About:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Introduction:</span> <span class="string">about/intro.md</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Team:</span> <span class="string">about/team.md</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Contact:</span> <span class="string">contact.md</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上面的示例中，导航栏将包含 "Home"、"About" 和 "Contact" 三个部分。"About" 部分下面有两个子页面：“Introduction"和"Team”，分别链接到 about/intro.md 和 about/team.md 文件。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>theme.nav：如果正在使用特定主题（如 Material 主题），某些主题可能提供了额外的导航栏配置选项。可以在 mkdocs.yml 中的 theme 部分下找到这些选项。例如，在 Material 主题中，可以使用 theme.nav 字段来定义导航栏。例如：</p>
</li>
</ul>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">material</span></span><br><span class="line">  <span class="attr">nav:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Home:</span> <span class="string">index.md</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">About:</span> <span class="string">about.md</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">Contact:</span> <span class="string">contact.md</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="material-theme">material theme</h3>
<p>MkDocs Material 主题基于 Google 的 Material Design 风格，提供了现代化和响应式的用户界面。它的设计简洁、易于阅读，并且提供了一些有用的功能，如侧边栏导航、搜索功能、代码高亮等。</p>
<p>以下是一些 MkDocs Material 主题的特点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>响应式布局：MkDocs Material 主题会自动适应不同的屏幕大小和设备类型，使文档在桌面、平板和手机上都能良好地显示。</p>
</li>
<li class="lvl-2">
<p>侧边栏导航：MkDocs Material 主题提供了一个侧边栏导航菜单，方便用户浏览和导航文档的不同部分。</p>
</li>
<li class="lvl-2">
<p>搜索功能：MkDocs Material 主题集成了强大的搜索功能，使用户能够快速找到所需的文档内容。</p>
</li>
<li class="lvl-2">
<p>代码高亮：MkDocs Material 主题使用了 Prism.js 库来实现代码高亮，支持多种编程语言和主题。</p>
</li>
<li class="lvl-2">
<p>自定义配置：可以通过修改 MkDocs 的配置文件来自定义 MkDocs Material 主题的外观和行为，包括颜色、字体、导航栏等。</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/">https://squidfunk.github.io/mkdocs-material/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://pypi.org/project/mkdocs-material/">https://pypi.org/project/mkdocs-material/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/creating-your-site/#advanced-configuration">Advanced Configuration</a></p>
</li>
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/setup/">Configure Setup</a></p>
</li>
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/reference/">Configuration Reference</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/383582472">zhihu 教程</a></p>
</li>
</ul>
<h4 id="color">color</h4>
<p>作为任何恰当的 Material Design 实现，Material for MkDocs 支持 Google 的原始调色板，可以通过 MkDocs.yml 轻松配置。此外，通过使用 CSS 变量，可以通过几行 CSS 来定制颜色，以适应品牌标识。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/setup/changing-the-colors/">https://squidfunk.github.io/mkdocs-material/setup/changing-the-colors/</a></p>
</li>
</ul>
<h4 id="language">language</h4>
<p>MkDocs 的 Material 支持国际化 (i18n) ，并提供 60 多种语言的模板变量和标签的翻译。此外，如果可用的话，可以将站点搜索配置为使用特定于语言的词干分析器。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/setup/changing-the-language//">https://squidfunk.github.io/mkdocs-material/setup/changing-the-language//</a></p>
</li>
</ul>
<h4 id="versions-with-mike">versions with mike</h4>
<p>通过与外部实用程序集成，将这些功能添加到 MkDocs，即 Mike，MkDocs 的 Material 使得部署项目文档的多个版本变得非常容易。在部署新版本时，文档的旧版本保持不变。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/setup/setting-up-versioning/">https://squidfunk.github.io/mkdocs-material/setup/setting-up-versioning/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/squidfunk/mkdocs-material-example-versioning">https://github.com/squidfunk/mkdocs-material-example-versioning</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/72467521/auto-deploy-mkdocs-with-versionning-using-mike-on-gitlab-pages">使用 mike 多版本部署在 gitlab 中</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/jimporter/mike/issues/25">https://github.com/jimporter/mike/issues/25</a></li>
</ul>
</li>
<li class="lvl-2">
<p>[mike 多版本示例]：</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://github.com/online-ml/river">https://github.com/online-ml/river</a></li>
<li class="lvl-4"><a href="https://github.com/samuelcolvin/dirty-equals">https://github.com/samuelcolvin/dirty-equals</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/setup/setting-up-versioning/">old versioning banner warning</a></p>
</li>
</ul>
<h4 id="footer">footer</h4>
<p>项目文档的页脚是一个很好的地方，可以添加链接到或公司正在使用的网站或平台作为额外的营销渠道，例如，或者，可以通过 mkdocs.yml 轻松配置。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>禁用显示文档生成脚标，即不再<a href="https://squidfunk.github.io/mkdocs-material/setup/setting-up-the-footer/#generator-notice">显示</a> <code>Made with Material for MkDocs</code></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/setup/setting-up-the-footer/">https://squidfunk.github.io/mkdocs-material/setup/setting-up-the-footer/</a></p>
</li>
</ul>
<h4 id="markdown-extensions">markdown extensions</h4>
<p>MkDocs 的 Material 支持大量的 Python Markdown 扩展，这是它对于技术写作如此有吸引力的部分原因。下面是所有支持的扩展的列表，链接到引用的相关部分，这些部分需要启用这些特性。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/setup/extensions/python-markdown/#abbreviations">Abbreviations</a>: 渲染提示词及缩写集成</p>
</li>
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/setup/extensions/python-markdown/#admonition">Admonition</a>: 渲染警告提示</p>
</li>
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/reference/lists/#using-task-lists">Lists</a>: 渲染任务列表</p>
</li>
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/reference/code-blocks">Code Blocks</a>: 渲染代码块</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://squidfunk.github.io/mkdocs-material/reference/code-blocks/#adding-line-numbers">adding line numbers</a>: 在代码块中添加行号 </li>
<li class="lvl-4"><a href="https://squidfunk.github.io/mkdocs-material/reference/code-blocks/#highlighting-specific-lines">highlighting specific lines</a>: 高亮特定行 </li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://facelessuser.github.io/pymdown-extensions/extensions/arithmatex/">PyMdown Extension Documentation</a>: PyMdown 方便文档写作扩展文档</p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://squidfunk.github.io/mkdocs-material/reference/content-tabs/">content tabs</a>: 将备选内容分组到不同的选项卡下</li>
</ul>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/setup/extensions/python-markdown">https://squidfunk.github.io/mkdocs-material/setup/extensions/python-markdown</a></p>
</li>
</ul>
<h3 id="plugins">plugins</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/mkdocs/catalog">A list of awesome MkDocs projects and plugins.</a></p>
</li>
<li class="lvl-2">
<p><a href="https://chrieke.medium.com/the-best-mkdocs-plugins-and-customizations-fc820eb19759">https://chrieke.medium.com/the-best-mkdocs-plugins-and-customizations-fc820eb19759</a></p>
</li>
</ul>
<h4 id="mkdocs-same-dir">mkdocs-same-dir</h4>
<p>通常 mkdocs 不允许将 docs_dir 配置为 mkdocs.yml 所在路径，但这也导致 无法引用 项目根目录的 <a href="http://markdown.md">markdown.md</a> 文件。mkdocs-same-dir 为了解决这个问题，允许将 docs_dir 设置为 mkdocs.yml 路径，即 <code>docs_dir: .</code>.</p>
<p>使用该插件后，需要对 mkdocs.yml 相应路径适配 <code>docs_dir: .</code> 配置。其中包括如下:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.mkdocs.org/user-guide/configuration/#nav">nav</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.mkdocs.org/user-guide/configuration/#edit_uri">edit_uri</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.mkdocs.org/user-guide/configuration/#exclude_docs">exclude_docs</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.mkdocs.org/user-guide/configuration/#not_in_nav">not_on_nav</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/oprypin/mkdocs-same-dir/">https://github.com/oprypin/mkdocs-same-dir/</a></p>
</li>
</ul>
<h4 id="mkdocs-jupyter">mkdocs-jupyter</h4>
<p>安装依赖</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install mkdocs-jupyter</span><br></pre></td></tr></tbody></table></figure>
<p>配置 plugin</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Home:</span> <span class="string">index.md</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Notebook page:</span> <span class="string">notebook.ipynb</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Python file:</span> <span class="string">python_script.py</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdocs-jupyter</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pypi.org/project/mkdocs-jupyter/">https://pypi.org/project/mkdocs-jupyter/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/danielfrg/mkdocs-jupyter/">https://github.com/danielfrg/mkdocs-jupyter/</a></p>
</li>
</ul>
<h4 id="mkdocstrings">mkdocstrings</h4>
<p>Python 处理程序使用 Griffe 从 Python 源代码中收集文档。在法语中，“Griffe” 这个词有时可以用来代替 “签名”。Griffe 可以访问源代码的抽象语法树 (AST) 来提取有用的信息。当源代码不可用时，它还可以执行代码 (通过导入) 和内省内存中的对象。最后，它可以按照不同的样式解析文档字符串。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mkdocstrings.github.io/recipes/">自动生成 mkdocs python api 文档方案</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mkdocstrings.github.io/python/">https://mkdocstrings.github.io/python/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/model_navigator/">https://github.com/triton-inference-server/model_navigator/</a></p>
</li>
</ul>
<h4 id="mkdocs-coveage">mkdocs-coveage</h4>
<p>MkDocs 插件将覆盖率 HTML 报告集成到站点中。通过分析 <code>coverage report html</code> 导出在 htmlcov 文件夹并加载到 <a href="http://coverage.md">coverage.md</a> 页面上.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/pawamoy/mkdocs-coverage">https://github.com/pawamoy/mkdocs-coverage</a></p>
</li>
</ul>
<h4 id="mkdoxy">mkdoxy</h4>
<p>MkDocs 的 MkDoxy 插件根据 Doxygen 注释和 markdown 文件中的代码片段生成 API 文档。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/JakubAndrysek/MkDoxy">https://github.com/JakubAndrysek/MkDoxy</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mkdoxy.kubaandrysek.cz/">https://mkdoxy.kubaandrysek.cz/</a></p>
</li>
</ul>
<h3 id="integrate-with-ci">integrate with ci</h3>
<p>发布到远程仓库，并自动部署依赖于代码管理平台，通常使用命令生成静态站点文件到 public 目录，然后由代码管理平台部署。如果使用 mike 发布，请参考 mike 相关<a href="#versions-with-mike">内容</a></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://squidfunk.github.io/mkdocs-material/publishing-your-site/#publishing-your-site">Publish with CI</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/msclock/gitlab-ci-templates">Publish mkdocs in Gitlab with templates</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.siemens.com/2023/11/visual-review-of-mkdocs-sites-in-gitlab-mrs/">Review mkdocs in GitLab MR</a></p>
</li>
</ul>
<h2 id="sphinx">sphinx</h2>
<p>Sphinx 是一个用于文档生成的工具。它可以帮助将标记语言（如 reStructuredText）编写的文档转换为各种格式，如 HTML、PDF、EPUB 等。Sphinx 是 Python 社区中最常用的文档生成工具之一，被广泛用于编写 Python 项目的文档。</p>
<p>使用 Sphinx 编写文档非常简单。只需要在项目中创建一个配置文件（<a href="http://xn--conf-p61hy12bfq5e.py">通常是 conf.py</a>），指定文档源文件的位置以及输出格式的配置。然后，可以使用 reStructuredText 编写文档内容，使用 Sphinx 提供的命令将其转换为所需的格式。</p>
<p>Sphinx 还提供了丰富的功能，如自动生成 API 文档、跨引用、索引、主题定制等。可以根据需要选择适合项目的功能。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.sphinx-doc.org/">https://www.sphinx-doc.org/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.sphinx-doc.org/en/master/tutorial/">Tutorial</a></p>
</li>
<li class="lvl-2">
<p><a href="https://olgarithms.github.io/sphinx-tutorial/">Sphinx Tutorial</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.sphinx-doc.org/en/master/usage/index.html">Sphinx Usage</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://www.sphinx-doc.org/en/master/usage/extensions/index.html">Sphinx Extensions</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://www.sphinx-doc.org/en/master/usage/theming.html">Sphinx Theme</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.sphinx-doc.org/zh-tw/latest/usage/extensions/index.html">Extensions</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://www.sphinx-doc.org/en/master/development/index.html">Writing Extensions</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html">Directives</a></p>
</li>
</ul>
<p>who use sphinx:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/server/tree/main/docs">https://github.com/triton-inference-server/server/tree/main/docs</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/scikit-build/scikit-build-core">https://github.com/scikit-build/scikit-build-core</a></p>
</li>
</ul>
<h3 id="Versioning">Versioning</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://olgarithms.github.io/sphinx-tutorial/docs/9-versioning.html">https://olgarithms.github.io/sphinx-tutorial/docs/9-versioning.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://olgarithms.github.io/sphinx-tutorial/docs/10-automating-versioning.html">https://olgarithms.github.io/sphinx-tutorial/docs/10-automating-versioning.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.w3schools.cn/howto/">w3c how to</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>mkdocs</tag>
        <tag>sphinx</tag>
      </tags>
  </entry>
  <entry>
    <title>editorconfig</title>
    <url>/posts/bce07864/</url>
    <content><![CDATA[<p>EditorConfig 有助于跨不同编辑器和 IDE 为处理同一项目的多个开发人员维护一致的编码风格。EditorConfig 项目由用于定义编码样式的文件格式和一组文本编辑器插件组成，这些插件使编辑器能够读取文件格式并遵循已定义的样式。EditorConfig 文件易于阅读，并且可以很好地与版本控制系统一起工作。</p>
<h2 id="Resource">Resource</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://editorconfig.org/">editorconfig</a></td>
<td>editorconfig</td>
<td> 文档</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="常见配置项">常见配置项</h2>
<h3 id="rules">rules</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>root: 这个字段表示当前的 EditorConfig 文件是最顶层的配置文件，编辑器在读取配置时会从当前目录开始，向上查找 .editorconfig 文件，当遇到 root=true 时停止查找</p>
</li>
<li class="lvl-2">
<p>[*]：这个字段表示以下的规则应用于所有文件。</p>
</li>
<li class="lvl-2">
<p>end_of_line = lf：这个字段表示所有文件的行尾应该使用 LF (Line Feed，换行符) 结束。这是 Unix 系统的行尾字符。</p>
</li>
<li class="lvl-2">
<p>indent_style = space：这个字段表示缩进应该使用空格。</p>
</li>
<li class="lvl-2">
<p>indent_size = 2：这个字段表示缩进的大小应该是 2 个空格。</p>
</li>
<li class="lvl-2">
<p>insert_final_newline = true：这个字段表示在文件的最后插入一个新行。</p>
</li>
<li class="lvl-2">
<p>trim_trailing_whitespace = true：这个字段表示删除每行末尾的空白字符。</p>
</li>
</ul>
<h2 id="配置实例">配置实例</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.com/msclock/gitlab-ci-templates">https://gitlab.com/msclock/gitlab-ci-templates</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>editorconfig</tag>
      </tags>
  </entry>
  <entry>
    <title>压缩算法</title>
    <url>/posts/ae671705/</url>
    <content><![CDATA[<p>本文总结了各种压缩算法的 header。</p>
<h2 id="Header">Header</h2>
<p>头部字节序，标识了使用的压缩算法种类，方便编码识别。</p>
<span id="more"></span>
<h3 id="lzma">lzma</h3>
<p>模式：FORMATALONE<br>
字节：5D 00 00<br>
base64: /Td6</p>
<p>模式：FORMATXZ<br>
字节：FD 37 7A<br>
base64: XQAA</p>
<h3 id="gzip">gzip</h3>
<p>字节：1F 8B<br>
base64：H4sl</p>
<h3 id="zlib">zlib</h3>
<p>字节：78 9C<br>
base64：eJwr</p>
<h2 id="reference">reference</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/367554125">https://zhuanlan.zhihu.com/p/367554125</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>刷新 dns</title>
    <url>/posts/d215ead/</url>
    <content><![CDATA[<h2 id="DNS">DNS</h2>
<p>DNS 至提供域名解析及映射服务。访问 github 等 ip 多变的网址，需要频繁更新映射。部分原因如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>有时，可能无法访问某些网站。</p>
</li>
<li class="lvl-2">
<p>解决网络相关问题时。</p>
</li>
<li class="lvl-2">
<p>DNS 解析程序更改后。</p>
</li>
</ul>
<p>运行刷新 DNS 缓存时，这将破坏缓存中的 DNS 条目，并根据新配置的 DNS 设置执行后续查询以解析域。</p>
<span id="more"></span>
<h3 id="linux-dns处理">linux dns 处理</h3>
<p>一般 linux 可以通过 nscd 作为处理服务缓存守护程序，配置文件位置通用配置路径 <code>/etc/nscd.conf</code>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装nscd</span></span><br><span class="line">yum/apt install nscd</span><br><span class="line"><span class="comment"># 服务相关</span></span><br><span class="line">service nscd start/restart/stop</span><br><span class="line">/etc/init.d/nscd restart</span><br></pre></td></tr></tbody></table></figure>
<h2 id="windows-dns-处理">windows dns 处理</h2>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></tbody></table></figure>
<h3 id="reference">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.codenong.com/2-flush-clear-dns-cache-linux/">https://www.codenong.com/2-flush-clear-dns-cache-linux/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>dns</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter</title>
    <url>/posts/2a2a7e8a/</url>
    <content><![CDATA[<h2 id="Flutter">Flutter</h2>
<p>Google 开发的基于 Dart 跨平台桌面开发框架。</p>
<h2 id="Resource">Resource</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>类型</th>
<th>组织 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.flutter.dev/">flutter</a></td>
<td>dev doc</td>
<td>flutter</td>
</tr>
<tr>
<td><a href="https://docs.flutter.cn/">flutter cn</a></td>
<td>dev doc</td>
<td>flutter</td>
</tr>
<tr>
<td><a href="https://dartpad.dev/">dartpad</a></td>
<td>dev tool</td>
<td>online flutter dev environment</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="Devcontainer">Devcontainer</h2>
<p>推荐使用 Devcontainer 配置开发环境。</p>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"Flutter Dev Container"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"image"</span><span class="punctuation">:</span> <span class="string">"google/dart:latest"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"extensions"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">"dart-code.dart-sdk"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">"dart-code.flutter"</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">"settings"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"dart.sdkPath"</span><span class="punctuation">:</span> <span class="string">"/usr/lib/dart"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"dart.flutterSdkPath"</span><span class="punctuation">:</span> <span class="string">"/usr/lib/flutter"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<!-- https://www.youtube.com/watch?v=VPvVD8t02U8&t=20s -->
<h3 id="Quickstart">Quickstart</h3>
<h4 id="development">development</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.bilibili.com/video/av52490605/?p=4">bilibili</a></p>
</li>
</ul>
<h4 id="dart-SDK">dart SDK</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>下载 dart <a href="http://www.cndartlang.com/920.html">sdk</a></p>
</li>
</ul>
<!-- more -->
<ul class="lvl-0">
<li class="lvl-2">
<p>解压到任意文件夹下</p>
</li>
<li class="lvl-2">
<p>添加 bin 路径到环境变量</p>
</li>
<li class="lvl-2">
<p>检查</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">PS C:\Users\MSClock&gt; dart --version</span><br><span class="line">Dart VM version: 2.4.0 (Wed Jun 19 11:53:45 2019 +0200)</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h4 id="flutter-SDK">flutter SDK</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>解压安装 <code>建议不要安装到权限过高的路径</code></p>
</li>
<li class="lvl-2">
<p>设置 <code>bin</code> 环境变量</p>
</li>
<li class="lvl-2">
<p>设置 flutter <a href="https://mirrors.tuna.tsinghua.edu.cn/help/flutter/">镜像</a></p>
</li>
</ul>
<h4 id="plugins">plugins</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>VsCode</p>
<ul class="lvl-2">
<li class="lvl-4">dart</li>
<li class="lvl-4">flutter</li>
</ul>
</li>
</ul>
<h4 id="模拟器">模拟器</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>推荐雷电模拟器</p>
</li>
</ul>
<h2 id="Samples">Samples</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/flutter/samples">https://github.com/flutter/samples</a></p>
<ul class="lvl-2">
<li class="lvl-4">provider_shopper: A Flutter sample app that shows a state management approach using the Provider package.</li>
<li class="lvl-4">provider_counter: The starter Flutter application, but using Provider to manage state.</li>
<li class="lvl-4">compass_app: An app simulates a real-world and feature rich flutter development experience conforming to <a href="https://en.wikipedia.org/wiki/Model-view-viewmodel">MVVM</a>.</li>
</ul>
</li>
</ul>
<h2 id="Packages">Packages</h2>
<h3 id="widgets">widgets</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.flutter.cn/ui/widgets/material">Material Widgets</a></p>
</li>
<li class="lvl-2">
<p><a href="https://api.flutter-io.cn/flutter/material/material-library.html">Material Widgets API</a></p>
</li>
</ul>
<h3 id="state-management">state management</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pub.dev/packages/provider">provider</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://juejin.cn/post/7067356022272163847">https://juejin.cn/post/7067356022272163847</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://pub.dev/packages/riverpod">riverpod</a></p>
<ul class="lvl-2">
<li class="lvl-4"><a href="https://www.jianshu.com/p/407795aa19c4">0</a></li>
<li class="lvl-4"><a href="https://blog.wodecun.com/blog/8262.html">1 初级</a></li>
<li class="lvl-4"><a href="https://blog.wodecun.com/blog/8261.html">1 中级</a></li>
<li class="lvl-4"><a href="https://blog.wodecun.com/blog/8263.html">1 高级</a></li>
<li class="lvl-4"><a href="https://blog.wodecun.com/blog/8264.html">2</a></li>
</ul>
</li>
<li class="lvl-2">
<p><a href="https://pub.dev/packages/flutter_bloc">flutter_bloc</a></p>
</li>
</ul>
<h3 id="tools">tools</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pub.dev/packages/worker_manager">worker_manager</a>：后台线程管理工具</p>
</li>
<li class="lvl-2">
<p><a href="https://pub.dev/packages/flutter_daemon">flutter_daemon</a>： 后台进程管理工具</p>
</li>
<li class="lvl-2">
<p><a href="https://pub.dev/packages/tray_manager">tray_manager</a>: 任务栏</p>
</li>
</ul>
<h3 id="searialization">searialization</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pub.dev/packages/json_serializable">json_serializable</a>: 提供用于处理 JSON 的 Dart Build 系统构建器</p>
</li>
<li class="lvl-2">
<p><a href="https://pub.dev/packages/json_annotation">json_annotation</a>: 支持数据模型的序列化和反序列化</p>
</li>
<li class="lvl-2">
<p><a href="https://pub.dev/packages/freezed">freezed</a>: 数据类、联合和克隆的代码生成器</p>
</li>
<li class="lvl-2">
<p><a href="https://pub.dev/packages/freezed_annotation">freezed_annotation</a>: 支持数据模型的序列化和反序列化</p>
</li>
</ul>
<h3 id="route">route</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pub.dev/packages/go_router">go_router</a></p>
</li>
</ul>
<h3 id="i18n">i18n</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pub.dev/packages/flutter_localizations">flutter_localizations</a>: 本地化工具</p>
</li>
<li class="lvl-2">
<p><a href="https://pub.dev/packages/intl">intl</a>: 提供国际化功能</p>
</li>
</ul>
<h3 id="architecture">architecture</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://codewithandrea.com/articles/flutter-app-architecture-riverpod-introduction/">riverpod arch introduction</a></p>
</li>
<li class="lvl-2">
<p><a href="https://codewithandrea.com/articles/comparison-flutter-app-architectures/">comparison-flutter-app-architectures</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>git 实践</title>
    <url>/posts/c6b360c1/</url>
    <content><![CDATA[<p>本文主要收集有关 git 相关的优化及使用技巧。</p>
<h2 id="git">git</h2>
<p>git 是使用最广的分布式代码版本控制系统.</p>
<p>参考文档:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F">what is git</a></p>
</li>
<li class="lvl-2">
<p><a href="https://git-scm.com/docs">scm doc</a></p>
</li>
</ul>
<h3 id="working">working</h3>
<p>在 Git 中，working directory（工作目录）是指当前正在进行编辑和修改的文件的目录。它是与 Git 仓库中的版本控制系统相对应的文件系统中的一个目录。</p>
<p>当在工作目录中进行修改时，Git 会跟踪这些更改并将其标记为未暂存的更改。这意味着这些更改尚未被提交到 Git 仓库中。工作目录中的文件可以包括新创建的文件、已修改的文件和已删除的文件。</p>
<p>工作目录是进行开发和编辑的主要区域。可以在工作目录中添加、修改和删除文件，然后使用 Git 的各种命令来管理这些更改。当准备好将更改提交到 Git 仓库时，可以使用 git add 命令将更改暂存到暂存区，然后使用 git commit 命令将更改提交到仓库。</p>
<p>总结来说，工作目录是进行开发和编辑的区域，其中包含了对文件的修改。Git 会跟踪这些修改并提供一系列命令来管理和提交这些更改。</p>
<h3 id="index">index</h3>
<p>在 Git 中，"index" 是指暂存区（也称为索引或缓存）。暂存区是 Git 的一个重要概念，它充当了工作区和最终提交的代码库之间的中间层。</p>
<p>当在工作区修改了文件后，Git 并不会立即将这些修改提交到代码库中。相反，Git 要求将修改的文件添加到暂存区，然后再将暂存区的内容提交到代码库中。这个过程分为两个步骤：</p>
<ol>
<li class="lvl-3">
<p>将修改的文件添加到暂存区：使用 git add 命令将工作区的修改添加到暂存区。这样，Git 就会将这些修改纳入下一次提交的范围内。</p>
</li>
<li class="lvl-3">
<p>将暂存区的内容提交到代码库：使用 git commit 命令将暂存区的内容提交到代码库中。这样，Git 就会创建一个新的提交，包含了暂存区的内容，并将其添加到代码库的历史记录中。</p>
</li>
</ol>
<p>通过使用暂存区，可以对提交进行精细的控制。可以选择性地将修改的文件添加到暂存区，而不是一次性提交所有的修改。这样可以帮助构建更有意义的提交，使代码库的历史记录更加清晰和可读。</p>
<h3 id="HEAD">HEAD</h3>
<p>在 Git 中，HEAD 是一个指向当前所在分支最新提交的指针。它可以被看作是当前工作树的快照，指示了当前所在分支的最新提交。</p>
<p>HEAD 在 Git 中有两个主要的作用：</p>
<ol>
<li class="lvl-3">
<p>标识当前所在分支的最新提交：当在 Git 中进行提交操作时，HEAD 会自动更新为最新的提交。这意味着 HEAD 始终指向当前所在分支的最新提交。</p>
</li>
<li class="lvl-3">
<p>作为切换分支的指针：当切换分支时，HEAD 会随之移动到新分支的最新提交。这样，就可以在不同的分支之间进行切换，并查看每个分支的最新提交。</p>
</li>
</ol>
<p>在 Git 中，HEAD 通常指向一个分支引用，例如 refs/heads/master。这表示 HEAD 当前指向 master 分支的最新提交。当在 Git 中进行提交操作时，新的提交将被添加到当前所在分支的提交历史中，并且 HEAD 将指向这个新的提交。</p>
<p>除了指向分支引用，HEAD 还可以指向一个具体的提交哈希值。这种情况下，处于 “分离头指针” 状态，意味着不再位于任何分支上，而是直接在某个特定的提交上工作。</p>
<p>总之，HEAD 在 Git 中是一个重要的指针，用于标识当前所在分支的最新提交。它允许在不同的分支之间进行切换，并且在提交操作时自动更新为最新的提交。</p>
<h2 id="git-auto-complete">git auto-complete</h2>
<h3 id="bash-auto-complete">bash auto-complete</h3>
<p>使用 git 提供的补全脚本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"source /usr/share/bash-completion/completions/git"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="powershell-auto-complete">powershell auto-complete</h3>
<p>使用 choco install git-posh</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Set your PowerShell execution policy</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned <span class="literal">-Force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Chocolatey</span></span><br><span class="line"><span class="built_in">iwr</span> https://chocolatey.org/install.ps1 <span class="literal">-UseBasicParsing</span> | <span class="built_in">iex</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install Chocolatey packages</span></span><br><span class="line">choco install poshgit <span class="literal">-y</span></span><br><span class="line">choco install git.install <span class="literal">-y</span></span><br><span class="line">choco install conemu <span class="literal">-y</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install PowerShell modules</span></span><br><span class="line"><span class="built_in">Install-PackageProvider</span> NuGet <span class="literal">-MinimumVersion</span> <span class="string">'2.8.5.201'</span> <span class="literal">-Force</span></span><br><span class="line"><span class="built_in">Set-PSRepository</span> <span class="literal">-Name</span> PSGallery <span class="literal">-InstallationPolicy</span> Trusted</span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> <span class="string">'posh-git'</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="reference">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://hodgkins.io/ultimate-powershell-prompt-and-git-setup#install-required-components">hodgkins blog</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/dahlbyk/posh-git">github for posh git</a></p>
</li>
</ul>
<h2 id="git-EOL">git EOL</h2>
<blockquote>
<p>[!TIP]<br>
优化文件从 windows 挂进容器时，git 触发多个文件更改问题，<a href="https://code.visualstudio.com/docs/devcontainers/tips-and-tricks#_resolving-git-line-ending-issues-in-containers-resulting-in-many-modified-files">tips-and-tricks</a>。</p>
</blockquote>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line"># .gitattributes</span><br><span class="line">* text=auto eol=lf</span><br><span class="line">*.{cmd,[cC][mM][dD]} text eol=crlf</span><br><span class="line">*.{bat,[bB][aA][tT]} text eol=crlf</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-LFS">git LFS</h2>
<p>git 配置参考 <a href="https://git-lfs.com/">LFS</a> 和 <a href="https://github.com/devcontainers/features/tree/main/src/git-lfs">Devcontainer</a></p>
<p>LFS 配置示例如下，将常用的 AI 模型文件作为 LFS 形式提交:</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line"># Model Format</span><br><span class="line">*.onnx filter=lfs diff=lfs merge=lfs -text</span><br><span class="line">*.pt filter=lfs diff=lfs merge=lfs -text</span><br><span class="line">*.ckpt filter=lfs diff=lfs merge=lfs -text</span><br><span class="line">*.meta filter=lfs diff=lfs merge=lfs -text</span><br><span class="line">*.index filter=lfs diff=lfs merge=lfs -text</span><br><span class="line">checkpoint filter=lfs diff=lfs merge=lfs -text</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-rebase">git rebase</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://git-scm.com/docs/git-rebase">git rebase</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=f1wnYdLEpgI">using rebase instead of merge</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=ElRzTuYln0M&amp;t=16s">rewrite history</a></p>
</li>
</ul>
<h3 id="modify-history">modify history</h3>
<p>将遗漏的提交提交到历史中倒是第 2 个记录中</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># rebase 提取两个记录</span></span><br><span class="line">git rebase -i HEAD~2</span><br><span class="line"></span><br><span class="line"><span class="comment"># edit in rebase view</span></span><br><span class="line">pick 1fc6c95 <span class="keyword">do</span> something</span><br><span class="line">edit dd1475d the commit you want to change <span class="comment"># 将 pick 改为 edit 标记</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加遗漏的更改</span></span><br><span class="line">git add some other changes</span><br><span class="line">git commit --amend --no-edit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入下一个标记操作,若有冲突解决重提,继续continue,直到结束为止</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Squash-in-git">Squash in git</h3>
<p>通过 Interactive Rebase 实现，将第一个提交后面的提交改成 s，保存退出，按照提示操作即可。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># rebase 操作后续 3 个提交记录</span></span><br><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></tbody></table></figure>
<p>通过 merge 加 --squash 参数的方式，本地分支被完整的保留下来。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git merge --squash feat/add-coin</span><br><span class="line">git add a.txt</span><br><span class="line">git commit -m <span class="string">"feat: support add coin"</span></span><br></pre></td></tr></tbody></table></figure>
<p>squash reference</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.git-tower.com/learn/git/faq/git-squash/">https://www.git-tower.com/learn/git/faq/git-squash/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.yasking.org/a/git-squash-commits.html">https://blog.yasking.org/a/git-squash-commits.html</a></p>
</li>
</ul>
<h2 id="git-reset">git reset</h2>
<p>参考文档:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://git-scm.com/docs/git-reset">git reset</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件从staged转为unstaged</span></span><br><span class="line">git reset &lt;file&gt;</span><br><span class="line">git restore --staged &lt;file&gt;</span><br><span class="line"><span class="comment"># 将所有的文件转为unstaged</span></span><br><span class="line">git reset HEAD</span><br><span class="line"><span class="comment"># undo the last commit while keeping the changes from that commit in the staging area.</span></span><br><span class="line">git reset --soft ^HEAD</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-restore">git restore</h2>
<p>参考文档:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://git-scm.com/docs/git-restore">git restore</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># discard the unstaged changed file</span></span><br><span class="line">git restore &lt;file&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-remote">git remote</h2>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 添加远程</span></span><br><span class="line">git remote add &lt;remote-name&gt; &lt;url&gt;</span><br><span class="line"><span class="comment"># 查看本地注册的远程</span></span><br><span class="line">git remove -v</span><br><span class="line"><span class="comment"># 删除关联的远程</span></span><br><span class="line">git remote remove &lt;remote-name&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-with-depth">git with --depth</h2>
<p>仓库过大时，使用 depth 可加快拉取代码。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># --depth 1</span></span><br><span class="line">git <span class="built_in">clone</span> --depth 1 url-to-repos</span><br><span class="line"><span class="comment"># 后续再把未同步的远程历史同步到本地</span></span><br><span class="line">git fetch --unshallow</span><br><span class="line"><span class="comment"># 拉取远程分支branch到本地分支local-branch(通常等于branch)</span></span><br><span class="line">git fetch &lt;remote&gt; &lt;branch&gt;[:&lt;local-barnch&gt;=&lt;branch&gt;] --depth 1</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-config">git config</h2>
<h3 id="config">config</h3>
<p>查看所有的 git 配置位置，system/global/local 配置。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置及配置所属位置</span></span><br><span class="line">git config --list --show-origin</span><br><span class="line">git config --global user.name <span class="string">"Your Username"</span></span><br><span class="line">git config --global user.email <span class="string">"your.email@example.com"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="credential">credential</h3>
<p>Git 的全局配置，用于存储凭据，比如用户名和密码，这样在与远程 Git 仓库交互时就不需要每次都输入它们。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></tbody></table></figure>
<h3 id="http">http</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="proxy">proxy</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --global url.https://ghproxy.com/https://github.com.insteadOf https://github.com</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-log">git log</h2>
<h3 id="查看历史">查看历史</h3>
<p>查看文件夹的历史提交记录</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -- ./folder-history</span><br><span class="line"><span class="comment"># 查看文件更改</span></span><br><span class="line">git <span class="built_in">log</span> --name-only -- ./folder-history</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-filter-branch">git filter-branch</h2>
<h3 id="–index-filer">–index-filer</h3>
<p>删除所有提交有关文件夹的历史</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git filter-branch --force --index-filter \</span><br><span class="line">  <span class="string">'git rm -r --cached --ignore-unmatch folder_name'</span> \</span><br><span class="line">  --prune-empty --tag-name-filter <span class="built_in">cat</span> -- --all</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-tag">git tag</h2>
<p>本节总结了相关常用的 git tag 命令。</p>
<h3 id="查看">查看</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有的 tag，可直接筛选结果</span></span><br><span class="line">git tag -l</span><br><span class="line">git tag -l v0.*</span><br><span class="line">git tag -l | grep -E <span class="string">'v0.*'</span></span><br><span class="line"><span class="comment"># 查看远程 origin 下所有的 tag</span></span><br><span class="line">git ls-remote --tags origin</span><br></pre></td></tr></tbody></table></figure>
<h3 id="创建">创建</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 用 tag-name 创建 light tag</span></span><br><span class="line">git tag [tag name]</span><br><span class="line">git tag -a</span><br></pre></td></tr></tbody></table></figure>
<h3 id="同步">同步</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 推送所有本地tag到远程</span></span><br><span class="line">git push origin --tags</span><br><span class="line"><span class="comment"># 同步到远程 tag</span></span><br><span class="line">git push origin [tag name]</span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">git tag -d [tag name]</span><br><span class="line"><span class="comment"># 删除本地所有 tag</span></span><br><span class="line">git tag -d $(git tag -l)</span><br><span class="line"><span class="comment"># 删除远程 tag</span></span><br><span class="line">git push origin :refs/tags/[tag name]</span><br><span class="line"><span class="comment"># 删除远程所有 tag</span></span><br><span class="line">git push origin --delete $(git tag -l)</span><br><span class="line"><span class="comment"># 拉取远程 tag</span></span><br><span class="line">git fetch origin [tag name]</span><br><span class="line">git pull origin --tags</span><br><span class="line">git fetch --prune-tags <span class="comment">#删除本地仓库中已经不存在于远程仓库的标签</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="GitLab-API-tag">GitLab API tag</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 tag</span></span><br><span class="line">curl  --request DELETE --header <span class="string">"PRIVATE-TOKEN: TOKEN-ACCESS"</span> <span class="string">"https://gitlab.example.com/api/v4/projects/5/repository/tags/v1.0.0"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-branch">git branch</h2>
<h3 id="git-branch-m">git branch -m</h3>
<p>远程分支重命名后，本地需要跟踪最新的分支</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git branch -m main master</span><br><span class="line">git fetch origin</span><br><span class="line">git branch -u origin/master master</span><br><span class="line">git remote set-head origin -a</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-commit">git commit</h2>
<h3 id="s">-s</h3>
<p>在 Git commit 中，有时会看到 Signed-off-by 的标记。这是一个常见的实践，用于指示提交者已经阅读并同意相关的许可和贡献规范。</p>
<p>Signed-off-by 标记的格式通常是在提交信息的末尾添加一行，类似于：</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">Signed-off-by: Your Name &lt;your@email.com&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>通过在提交信息中包含 Signed-off-by 标记，提交者表明他们有权将这些更改提交到代码库，并同意遵守相关的法律和规定。这也可以用于追踪和验证提交的来源。</p>
<p>要配置 Signed-off-by 标记，可以按照以下步骤进行操作：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>打开 Git 仓库所在的命令行终端或 Git GUI 工具。</p>
</li>
<li class="lvl-2">
<p>在进行提交之前，确保已经设置了正确的用户名和邮箱地址。可以使用以下命令来设置：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"your@email.com"</span></span><br></pre></td></tr></tbody></table></figure>
<p>确保将 “Your Name” 替换为真实姓名，将 “<a href="mailto:your@email.com">your@email.com</a>” 替换为真实邮箱地址。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>进行提交时，在提交信息的末尾添加 Signed-off-by 标记。可以手动添加，或者使用 Git 提供的提交模板或钩子来自动生成。例如，在命令行中使用以下命令进行提交：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git commit -s -m <span class="string">"Your commit message"</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.github.com/zh/authentication/managing-commit-signature-verification/about-commit-signature-verification">在 github 中使用 commit signature verification</a></p>
</li>
</ul>
<h4 id="ssh-签名">ssh 签名</h4>
<p>使用 ssh 配置对提交进行签名，前提是已存在 ssh 签名密钥，并注册到远程版本控制。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git config commit.gpgsign <span class="literal">true</span>               <span class="comment"># 一般不需要全局开启，只需要在提交时指定-s即可</span></span><br><span class="line">git config gpg.format ssh                    <span class="comment"># 配置使用ssh签名</span></span><br><span class="line">git config user.signingKey ~/.ssh/id_rsa.pub <span class="comment"># 配置签名密钥</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="–cleanup">–cleanup</h3>
<p>对提交消息进行清理</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/2788092/start-a-git-commit-message-with-a-hashmark">https://stackoverflow.com/questions/2788092/start-a-git-commit-message-with-a-hashmark</a></p>
</li>
</ul>
<h3 id="git-commit-m">git commit -m</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git commit -m &lt;title&gt; -m &lt;content&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-commit-empty">git commit empty</h3>
<p>git 空提交，用于在本地测试及保证源码不变动的情况下增加一个提交或删除相关的空提交。</p>
<h4 id="增加一个空提交">增加一个空提交</h4>
<p><strong>Step 1.</strong> 创建一个新提交。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git commit --allow-empty -m <span class="string">"Trigger test deployment"</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>Step 2.</strong> 推动空提交到远程。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></tbody></table></figure>
<h4 id="删除空提交">删除空提交</h4>
<p><strong>Step 1.</strong> 查看空提交</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git rev-list HEAD | <span class="keyword">while</span> <span class="built_in">read</span> commitHash; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ $(git diff-tree --name-status --no-commit-id <span class="variable">$commitHash</span> | <span class="built_in">wc</span> -l) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$commitHash</span></span><br><span class="line">    <span class="keyword">fi</span>;</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>Step 2.</strong> 删除空提交</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git filter-branch --commit-filter <span class="string">'git_commit_non_empty_tree "$@"'</span> -f HEAD</span><br><span class="line"><span class="built_in">rm</span> -rf .git/refs/original/ &amp;&amp; git reflog expire --all &amp;&amp;  git gc --aggressive --prune</span><br></pre></td></tr></tbody></table></figure>
<p>解释:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-filter-branch: 让重写分支。</p>
</li>
<li class="lvl-2">
<p>-commit-filter: 过滤器进行提交。</p>
</li>
<li class="lvl-2">
<p>git_commit_non_empty_tree “$@”:  包括这个参数 -commit-filter 将跳过提交离开树。 树散列不变如果没有文件被改变，因此承诺是空的。</p>
</li>
<li class="lvl-2">
<p>-f: --force 缩写。</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://devcoops.com/create-empty-commits-git/">https://devcoops.com/create-empty-commits-git/</a></p>
</li>
</ul>
<h2 id="git-revert">git revert</h2>
<p>git revert 用于回退代码版本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将 B 到 D 都 revert</span></span><br><span class="line">git revert B^..D <span class="comment"># git revert OLDER_COMMIT^..NEWER_COMMIT</span></span><br><span class="line"><span class="comment"># 通过 rebase 方式选择回滚对应的提交</span></span><br><span class="line">git rebase -i</span><br><span class="line"><span class="comment"># 将连续多个提交回滚用一个提交完成</span></span><br><span class="line">git revert -n OLDER_COMMIT^..NEWER_COMMIT</span><br><span class="line">git commit -m <span class="string">"revert OLDER_COMMIT to NEWER_COMMIT"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-repo-clean">git repo clean</h2>
<p>安装完后，可绑定到 git 使用：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 扫描仓库当前分支的文件，文件最小为1G，类型为tar.gz，显示前1个结果</span></span><br><span class="line">git repo-clean --scan --<span class="built_in">limit</span>=1G --<span class="built_in">type</span>=tar.gz --number=1</span><br><span class="line"><span class="comment"># 在命令后添加--delete选项，则会批量删除当前分支扫描出的文件，并重写相关提交历史(包括HEAD)</span></span><br><span class="line">git repo-clean --scan --<span class="built_in">limit</span>=1G --<span class="built_in">type</span>=tar.gz --number=1 --delete</span><br><span class="line"><span class="comment"># 在命令后添加--branch选项，则会扫描所有分支的文件再执行删除，并重写相关提交历史</span></span><br><span class="line">git repo-clean --scan --<span class="built_in">limit</span>=1G --<span class="built_in">type</span>=tar.gz --number=1 --delete --branch=all</span><br></pre></td></tr></tbody></table></figure>
<h3 id="reference-2">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitee.com/oschina/git-repo-clean">https://gitee.com/oschina/git-repo-clean</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.bilibili.com/read/cv14305075/">https://www.bilibili.com/read/cv14305075/</a></p>
</li>
</ul>
<h2 id="git-submodule">git submodule</h2>
<p>教程参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://archive.kernel.org/oldwiki/git.wiki.kernel.org/index.php/GitSubmoduleTutorial.html">https://archive.kernel.org/oldwiki/git.wiki.kernel.org/index.php/GitSubmoduleTutorial.html</a></p>
</li>
</ul>
<h3 id="add">add</h3>
<p>添加子模块，当使用远程 url 时，使用 depth 加快 clone 进行绑定。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 url 绑定子模块</span></span><br><span class="line">git submodule add --depth=1 &lt; repos-url &gt; /path/to/repos-name</span><br><span class="line"><span class="comment"># 若本地已存在子项目文件夹，可直接添加</span></span><br><span class="line">git submodule add &lt; repos-to-path &gt;</span><br><span class="line"><span class="comment"># 从master拉取所有子模块最新更新</span></span><br><span class="line">git submodule foreach git pull origin master</span><br></pre></td></tr></tbody></table></figure>
<p>编辑项目生成的 .gitmodules 在对应的子项目模块添加 <strong><code>shallow = 1</code></strong>，为远程同步子模块 clone 根据 --recommend-shallow 使用对应的深度同步初始化子模块。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[submodule <span class="string">"sub1"</span>]</span><br><span class="line">    path = src/sub1</span><br><span class="line">    url = http://url/sub1.git</span><br><span class="line">    <span class="comment"># 使用 git submodule update --init --recursive 时 clone 深度设置为 1</span></span><br><span class="line">    shallow = 1</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="delete">delete</h3>
<p>删除子模块</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git submodule deinit [-f] &lt;folder&gt;</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>.gitmoduels 子模块相关描述删除</p>
</li>
<li class="lvl-2">
<p>.git/config 子模块相关描述删掉</p>
</li>
<li class="lvl-2">
<p>.git/modules/path/to/submodule</p>
</li>
<li class="lvl-2">
<p>运行 git rm --cached path/to/submodule (no trailing slash)</p>
</li>
<li class="lvl-2">
<p>删除其余并提交子模块非 git 相关配置</p>
</li>
</ul>
<h3 id="update">update</h3>
<p>拉取更新子模块</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></tbody></table></figure>
<h3 id="move">move</h3>
<p>移动子模块到新目录</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">mv</span> src/sub1 src/sub1_new</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-diff">git diff</h2>
<p>输出对比差异，在某些时候可用于 patch 补丁方面。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>diff --git a/new.txt b/new.txt：a 版本的 new.txt（变动前） 与 b 版本的 new.txt（变动后） 比较</p>
</li>
<li class="lvl-2">
<p>index 0e9cc9b…af0a351 100644：a 版本的在 index 的对象的哈希值 b 版本在工作区的对象的哈希值 文件信息（644 表示权限）</p>
</li>
<li class="lvl-2">
<p>— a/new.txt：变动前的文件</p>
</li>
<li class="lvl-2 expandable">
<p>+++ b/new.txt：变动后的文件</p>
</li>
<li class="lvl-2">
<p>@@ -1,2 +1,3 @@：变动前的文件从第 1 行开始，连续 2 行；变动后的文件第行开始，连续 3 行存在差异 。</p>
</li>
<li class="lvl-2">
<p>-：红色部分表示减少的部分</p>
</li>
<li class="lvl-2">
<p>+：绿色部分表示增加的部分</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 输出差异</span></span><br><span class="line">git diff | out-file -enc ascii &lt;out file&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="git-commit-convention">git commit convention</h2>
<p>一个好的提交 message <a href="https://cbea.ms/git-commit/">规则</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>从主体中分离出标题并用空行隔开</p>
</li>
<li class="lvl-2">
<p>限制标题字符 50 以内</p>
</li>
<li class="lvl-2">
<p>大写标题行</p>
</li>
<li class="lvl-2">
<p>不需要结束标题行</p>
</li>
<li class="lvl-2">
<p>在主题行中使用祈使语气</p>
</li>
<li class="lvl-2">
<p>主体使用 72 字符换行包装</p>
</li>
<li class="lvl-2">
<p>使用主体解释 what、why、how</p>
</li>
</ul>
<blockquote>
<p>[!NOTE]<br>
另加 Github Gist <a href="https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53">Commit Message Guidelines</a> 及示例 <a href="https://wiki.openstack.org/wiki/GitCommitMessages">wiki</a></p>
</blockquote>
<h2 id="git-commit-amend">git commit --amend</h2>
<p>修改上一个提交内容，包括修改提交作者</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git commit --amend --author=<span class="string">"Author Name &lt;email@address.com&gt;"</span></span><br></pre></td></tr></tbody></table></figure>
<p>追加到前一个提交中，并不做任何更改</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit --amend --no-edit</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub</title>
    <url>/posts/5c9de83f/</url>
    <content><![CDATA[<h2 id="GitHub">GitHub</h2>
<h3 id="profile-README">profile README</h3>
<p>github 个人主页介绍可通过配置一个仓库名和用户名相同中的 README.md 来生成.</p>
<p>开发者可以通过工具 <a href="https://github.com/muesli/markscribe">markscribe</a> <pangu> </pangu><a href="http://xn--README-og4jz13hbkai72n4cax97p.md">自动生成用户 README.md</a>, 用于显示于个人 github 主页</p>
<p>参考示例如下:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/secustor/secustor">https://github.com/secustor/secustor</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/msclock/msclock">https://github.com/msclock/msclock</a></p>
</li>
</ul>
<h2 id="GitHub-CI-CD">GitHub CI/CD</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/164744104">Github Action 精华指南</a></p>
</li>
</ul>
<span id="more"></span>
<h3 id="variables-and-secrets">variables and secrets</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions">https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.github.com/en/actions/learn-github-actions/variables">https://docs.github.com/en/actions/learn-github-actions/variables</a></p>
</li>
</ul>
<h4 id="常用变量">常用变量</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.github.com/en/actions/learn-github-actions/contexts#github-context">github context</a></p>
<ul class="lvl-2">
<li class="lvl-4">github.ref_name
<ul class="lvl-4">
<li class="lvl-6"><code>if: ${{ github.ref_name == 'main' }}</code></li>
</ul>
</li>
<li class="lvl-4">github.ref
<ul class="lvl-4">
<li class="lvl-6"><code>if: startsWith(github.ref, 'refs/tags')</code></li>
</ul>
</li>
<li class="lvl-4">github.event.repository.default_branch
<ul class="lvl-4">
<li class="lvl-6"><code>if: ${{ github.ref_name == github.event.repository.default_branch }}</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="continue-on-error">continue on error</h3>
<p>在上一个 step 失败后继续执行下一步 step</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">my-job:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Step</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">"This step will fail"</span> <span class="string">&amp;&amp;</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Step</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">continue-on-error:</span> <span class="literal">true</span> <span class="comment"># 或者使用 if: ${{ failure() }}</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">"This step will run even if Step 1 fails"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Step</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">"This step will not run if Step 1 or Step 2 fails"</span></span><br></pre></td></tr></tbody></table></figure>
<p>在此示例中，步骤 1 将失败，因为它使用 exit 1 退出时带有错误代码。但是，步骤 2 具有 continue-on-error: true 属性，这意味着即使步骤 1 失败，它也将继续运行。如果步骤 1 或步骤 2 失败，步骤 3 将不会运行。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stacktuts.com/how-to-run-a-github-actions-step-even-if-the-previous-step-fails-while-still-failing-the-job">https://stacktuts.com/how-to-run-a-github-actions-step-even-if-the-previous-step-fails-while-still-failing-the-job</a></p>
</li>
</ul>
<h3 id="call-workflow">call workflow</h3>
<p>workflow_call 是 GitHub Actions 中的一个关键字，它允许在一个工作流中调用另一个工作流。这个功能在 GitHub Actions 中是相对较新的，它可以帮助更好地组织和复用 CI/CD 代码。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/devcontainers-contrib/features/blob/main/.github/workflows/release.yaml">https://github.com/devcontainers-contrib/features/blob/main/.github/workflows/release.yaml</a></p>
</li>
</ul>
<h2 id="act">act</h2>
<p><a href="https://github.com/nektos/act">act</a> 用于本地测试 GitHub Action 管道，避免频繁推送到远程测试 CI 流程。</p>
<p>手动安装需要各个平台安装工具</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line">curl -s https://raw.githubusercontent.com/nektos/act/master/install.sh | bash</span><br><span class="line"><span class="comment"># choco</span></span><br><span class="line">choco install act-cli</span><br><span class="line"><span class="comment"># winget</span></span><br><span class="line">winget install nektos.act</span><br><span class="line"><span class="comment"># gh release</span></span><br><span class="line">gh extension install https://github.com/nektos/gh-act</span><br></pre></td></tr></tbody></table></figure>
<!-- more -->
<p>通过 devcontainer feature 支持 <a href="https://github.com/devcontainers-contrib/features/tree/main/src/act">act</a></p>
<blockquote>
<p>[!TIP]<br>
建议在 vscode devcontainer 配置 dind 进行测试。</p>
</blockquote>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">"features"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"ghcr.io/devcontainers-contrib/features/act:1"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="常用命令">常用命令</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 列出 actions jobs/workflows</span></span><br><span class="line">act --list/-l</span><br><span class="line"><span class="comment"># Stage  Job ID  Job name  Workflow name  Workflow file     Events</span></span><br><span class="line"><span class="comment"># 0      build   build     build          devcontainer.yml  pull_request,push</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 actions job, -v --verbose</span></span><br><span class="line">act -j &lt;job ID&gt; -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传递 secrets, 匹配actions yaml中引用方式 `${{ secrets.DOCKER_REGISTRY_PASS }}`</span></span><br><span class="line">act -s DOCKER_REGISTRY_ID=1234 -s DOCKER_REGISTRY_PASS=1234</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 debug log</span></span><br><span class="line">act -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 workflow</span></span><br><span class="line">act -W &lt;workflow <span class="built_in">id</span>/file&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="actions">actions</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/marketplace?type=actions">https://github.com/marketplace?type=actions</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/164744104">Github Action 精华指南</a></p>
</li>
</ul>
<h3 id="action-token">action token</h3>
<p>Actions 的 TOKEN 认证有 GITHUB_TOKEN, PERSONAL_TOKEN</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>GITHUB_TOKEN: 是 GitHub 提供的一种特殊类型的令牌，用于对 GitHub API 进行身份验证和授权。它主要用于执行与 GitHub 相关的操作，例如创建和管理存储库、发布问题和拉取请求等。</p>
<ul class="lvl-2">
<li class="lvl-4">默认没有 workflow 权限</li>
</ul>
</li>
<li class="lvl-2">
<p>PERSONAL_TOKEN: 是用户自己生成的令牌，用于对 GitHub 进行身份验证和授权。它可以用于执行与 GitHub API 相关的操作，但权限范围可能会受到限制，取决于用户在生成令牌时所选择的权限。</p>
<ul class="lvl-2">
<li class="lvl-4">可手动设置 workflow 权限，<a href="https://github.com/msclock/gitlab-ci-templates/tree/main/.github">参考</a></li>
</ul>
</li>
</ul>
<p>总结来说，GITHUB_TOKEN 是由 GitHub 提供的特殊令牌，用于对 GitHub API 进行身份验证和授权，而 PERSONAL_TOKEN 是用户自己生成的令牌，也用于对 GitHub 进行身份验证和授权，但权限可能会受到限制。</p>
<!--
personal token is on the edge
-->
<h3 id="dependabot">dependabot</h3>
<p>Dependabot 是一个自动化的依赖更新工具，它可以帮助保持项目中的依赖库和组件的最新版本。它可以扫描项目的依赖关系，并自动检测是否有新版本可用。如果有新版本可用，Dependabot 会自动创建一个拉取请求（Pull Request）来更新依赖库。</p>
<p>为项目配置 Dependabot 的步骤如下：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在项目的代码仓库中，创建一个名为.github 的文件夹（如果还没有的话）。</p>
</li>
<li class="lvl-2">
<p>在.github 文件夹中创建一个名为 dependabot.yml 的文件。</p>
</li>
<li class="lvl-2">
<p>在 dependabot.yml 文件中，使用 YAML 格式来配置 Dependabot 的行为。</p>
</li>
</ul>
<p>下面是一个示例的 dependabot.yml 文件的内容：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">updates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package-ecosystem:</span> <span class="string">"github-actions"</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">"/"</span></span><br><span class="line">    <span class="attr">schedule:</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">"daily"</span> <span class="comment"># weekly, monthly</span></span><br></pre></td></tr></tbody></table></figure>
<p>在这个示例中，配置了一个更新规则，用于更新 GitHub Actions 的依赖库。具体的配置可以根据项目和需求进行调整。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将 dependabot.yml 文件提交到代码仓库中。</p>
</li>
</ul>
<p>一旦配置完成并提交到代码仓库，Dependabot 将会根据配置自动检查并更新项目中的依赖库。可以根据需要调整配置，例如更改更新的频率、指定特定的依赖库等。</p>
<p>请注意，Dependabot 支持多种不同的依赖管理工具和生态系统，可以根据项目使用的工具进行相应的配置。详细的配置选项和示例可以在 Dependabot 的官方文档中找到。</p>
<h3 id="action-dev">action dev</h3>
<!-- todo -->
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/sfeir-open-source/sfeir-school-github-action-dev">https://github.com/sfeir-open-source/sfeir-school-github-action-dev</a></p>
</li>
</ul>
<h3 id="common-actions">common actions</h3>
<p>这里收集了常用到的 action</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/autowarefoundation/autoware-github-actions">https://github.com/autowarefoundation/autoware-github-actions</a></p>
</li>
</ul>
<h4 id="dockerhub-ghcr">dockerhub/ghcr</h4>
<p><strong>docker/login-action@v2</strong> example</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">DockerHub</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">${{</span> <span class="string">secrets.DOCKER_REGISTRY_ID</span> <span class="string">}}</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">${{</span> <span class="string">secrets.DOCKER_REGISTRY_PASS</span> <span class="string">}}</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Container</span> <span class="string">Registry</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="string">ghcr.io</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">${{</span> <span class="string">github.repository_owner</span> <span class="string">}}</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">${{</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">}}</span></span><br></pre></td></tr></tbody></table></figure>
<p><strong>Sync images from dockerhub to ghcr</strong> example</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="comment"># ghcr logins for pushing image after testing</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">Container</span> <span class="string">Registry</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">registry:</span> <span class="string">ghcr.io</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">${{</span> <span class="string">github.repository_owner</span> <span class="string">}}</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">${{</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">}}</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Login</span> <span class="string">to</span> <span class="string">DockerHub</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">docker/login-action@v2</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">${{</span> <span class="string">secrets.DOCKER_REGISTRY_ID</span> <span class="string">}}</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">${{</span> <span class="string">secrets.DOCKER_REGISTRY_PASS</span> <span class="string">}}</span></span><br><span class="line">  <span class="bullet">-</span> <span class="comment"># copy 3rd party zookeeper image from dockerhub to ghcr</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Image</span> <span class="string">(zookeeper)</span> <span class="string">to</span> <span class="string">target</span> <span class="string">registries</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">akhilerm/tag-push-action@v2.0.0</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">src:</span> <span class="string">wurstmeister/zookeeper:latest</span></span><br><span class="line">      <span class="attr">dst:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        ghcr.io/${{ github.repository_owner }}/3rdparty/zookeeper:latest</span></span><br><span class="line"><span class="string"></span>  <span class="bullet">-</span> <span class="comment"># copy 3rd party kafka image from dockerhub to ghcr</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Image</span> <span class="string">(kafka)</span> <span class="string">to</span> <span class="string">target</span> <span class="string">registries</span></span><br><span class="line">    <span class="attr">uses:</span> <span class="string">akhilerm/tag-push-action@v2.0.0</span></span><br><span class="line">    <span class="attr">with:</span></span><br><span class="line">      <span class="attr">src:</span> <span class="string">wurstmeister/kafka:latest</span></span><br><span class="line">      <span class="attr">dst:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">ghcr.io/${{</span> <span class="string">github.repository_owner</span> <span class="string">}}/3rdparty/kafka:latest</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="actions-checkout">actions/checkout</h4>
<p>在 action 中迁出代码</p>
<p>参考示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/gitlab-ci-templates/tree/main/.github">https://github.com/msclock/gitlab-ci-templates/tree/main/.github</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/msclock/blog_hexo/tree/master/.github">https://github.com/msclock/blog_hexo/tree/master/.github</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/actions/checkout">https://github.com/actions/checkout</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/actions/checkout/pkgs/container/checkout">https://github.com/actions/checkout/pkgs/container/checkout</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/actions/checkout/blob/main/action.yml">https://github.com/actions/checkout/blob/main/action.yml</a></p>
</li>
</ul>
<h4 id="yesolutions-mirror-action">yesolutions/mirror-action</h4>
<p>仓库镜像同步</p>
<p>参考示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/gitlab-ci-templates/tree/main/.github">https://github.com/msclock/gitlab-ci-templates/tree/main/.github</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/yesolutions/mirror-action">https://github.com/yesolutions/mirror-action</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/msclock/gitlab-ci-templates">https://github.com/msclock/gitlab-ci-templates</a></p>
</li>
</ul>
<h4 id="devcontainers-ci">devcontainers/ci</h4>
<p>使基于 devcontainer 的项目，能够在 devcontainer 环境下构建镜像，CI 测试等其它操作.</p>
<p>使用文档:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/devcontainers/ci/blob/main/docs/github-action.md">https://github.com/devcontainers/ci/blob/main/docs/github-action.md</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/devcontainers/ci/blob/main/docs/multi-platform-builds.md">https://github.com/devcontainers/ci/blob/main/docs/multi-platform-builds.md</a></p>
</li>
</ul>
<p>参考示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/gitlab-ci-templates/tree/main/.github">https://github.com/msclock/gitlab-ci-templates/tree/main/.github</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/devcontainers/ci">https://github.com/devcontainers/ci</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/marketplace/actions/dev-container-build-and-run-action">https://github.com/marketplace/actions/dev-container-build-and-run-action</a></p>
</li>
</ul>
<h4 id="pre-commit-action">pre-commit/action</h4>
<p>基于 pre-commit 对代码执行检测</p>
<p>参考示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/blog_hexo/tree/master/.github">https://github.com/msclock/blog_hexo/tree/master/.github</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/marketplace/actions/pre-commit">https://github.com/marketplace/actions/pre-commit</a></p>
</li>
</ul>
<h4 id="stefanzweifel-git-auto-commit-action">stefanzweifel/git-auto-commit-action</h4>
<p>检测本地更改，并提交记录到当前分支上</p>
<p>参考示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/blog_hexo/tree/master/.github">https://github.com/msclock/blog_hexo/tree/master/.github</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/stefanzweifel/git-auto-commit-action">https://github.com/stefanzweifel/git-auto-commit-action</a></p>
</li>
</ul>
<h4 id="peter-evans-create-pull-request">peter-evans/create-pull-request</h4>
<p>集成创建 pr</p>
<p>参考示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/blog_hexo/tree/master/.github">https://github.com/msclock/blog_hexo/tree/master/.github</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/marketplace/actions/create-pull-request">https://github.com/marketplace/actions/create-pull-request</a></p>
</li>
</ul>
<h4 id="dorny-paths-filter">dorny/paths-filter</h4>
<p>监测路径更改并反馈变化</p>
<blockquote>
<p>[!NOTE]<br>
当检测前面步骤是否出现改动时，需要对 dorny/paths-filter 配置 id, 然后在后续步骤使用具体 id 中是否出现改动进行判断.</p>
</blockquote>
<p>参考示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/gitlab-ci-templates/tree/main/.github">https://github.com/msclock/gitlab-ci-templates/tree/main/.github</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/rocker-org/devcontainer-features/blob/main/.github">https://github.com/rocker-org/devcontainer-features/blob/main/.github</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/devcontainers-contrib/features/blob/main/.github">https://github.com/devcontainers-contrib/features/blob/main/.github</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/marketplace/actions/paths-changes-filter">https://github.com/marketplace/actions/paths-changes-filter</a></p>
</li>
</ul>
<h4 id="cycjimmy-semantic-release-action">cycjimmy/semantic-release-action</h4>
<p>标记代码版本，创建 tag 及 release</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/cycjimmy/semantic-release-action">https://github.com/cycjimmy/semantic-release-action</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/marketplace/actions/action-for-semantic-release">https://github.com/marketplace/actions/action-for-semantic-release</a></p>
</li>
</ul>
<h4 id="pypa-gh-action-pypi-publish">pypa/gh-action-pypi-publish</h4>
<p>发布 python 包到 pypi</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/marketplace/actions/pypi-publish">https://github.com/marketplace/actions/pypi-publish</a></p>
</li>
</ul>
<h4 id="actions-stale">actions/stale</h4>
<p>将 issue 和 pr 标记为 stale</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/model_navigator/blob/main/.github/workflows/stale.yaml">https://github.com/triton-inference-server/model_navigator/blob/main/.github/workflows/stale.yaml</a></p>
</li>
</ul>
<h4 id="hynek-build-and-inspect-python-package">hynek/build-and-inspect-python-package</h4>
<p>在 CI 中构建和检查 Python 包</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/hynek/build-and-inspect-python-package">https://github.com/hynek/build-and-inspect-python-package</a></p>
</li>
</ul>
<h4 id="rossjrw-pr-preview-action">rossjrw/pr-preview-action</h4>
<p>在 CI 的 PR 上创建 Pages 预览</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/rossjrw/pr-preview-action">https://github.com/rossjrw/pr-preview-action</a></p>
</li>
</ul>
<h4 id="hmarr-auto-approve-action">hmarr/auto-approve-action</h4>
<p>自动批准 pr</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/hmarr/auto-approve-action">https://github.com/hmarr/auto-approve-action</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>GitLab Expert</title>
    <url>/posts/5f127ddd/</url>
    <content><![CDATA[<h2 id="GitLab">GitLab</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=sQ7Nw3o0izc">https://www.youtube.com/watch?v=sQ7Nw3o0izc</a></p>
</li>
</ul>
<h3 id="CI-CD">CI/CD</h3>
<p>CI: Continuous Integration<br>
- Detect Errors<br>
- Reduce Integration Problem<br>
- Team Work<br>
CD: Continuous Delivery/Continuous Deployment<br>
- Every Change is Releasable<br>
- Value Quickly to Get Feedback What Users Care About</p>
<p>CI/CD 在开发中的流程:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Code</p>
</li>
<li class="lvl-2">
<p>Commit</p>
</li>
<li class="lvl-2">
<p>Test(CI)</p>
<ul class="lvl-2">
<li class="lvl-4">Build</li>
<li class="lvl-4">Unit</li>
<li class="lvl-4">Integration</li>
</ul>
</li>
<li class="lvl-2">
<p>CD</p>
<ul class="lvl-2">
<li class="lvl-4">Review</li>
<li class="lvl-4">Staging</li>
<li class="lvl-4">Production</li>
</ul>
</li>
</ul>
<h3 id="Workflow">Workflow</h3>
<h3 id="mr">mr</h3>
<p>在 每个 branch 上显示的 <code>0|1</code> 状态表示该分支上的提交状态，0 表示存在 0 个提交落后于 default branch, 1 表示存在 1 个提交提前于 default branch。</p>
<h2 id="GitLab-Badge">GitLab Badge</h2>
<p>徽章是一种统一的方式，用于呈现有关项目的概述信息。它们由一个小图像和图像指向的 URL 组成。徽标的示例可以是管道状态、测试覆盖范围或联系项目维护人员的方式。</p>
<h3 id="添加-pipeline-badge">添加 pipeline badge</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>进入 Settings -&gt; General -&gt; Badges</p>
</li>
<li class="lvl-2">
<p>Name 字段：<code>Pipeline Status</code></p>
</li>
<li class="lvl-2">
<p>Link 字段：<code>https://gitlab.com/%{project_path}/-/commits/%{default_branch}</code></p>
</li>
<li class="lvl-2">
<p>Image URL 字段：<code>https://gitlab.com/%{project_path}/badges/%{default_branch}/pipeline.svg</code></p>
</li>
</ul>
<span id="more"></span>
<h2 id="GitLab-Runner">GitLab Runner</h2>
<p>执行 GitLab CI/CD 需要配置 GitLab runner</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.tutorialspoint.com/gitlab/gitlab_ci_configuring_gitlab_runners.htm">gitlab runner</a> 是用于配置 GitLab CI/CD 重要工具。</p>
</li>
</ul>
<h3 id="安装">安装</h3>
<p>配置 gitlab-runner 为项目提供 CI/CD 的执行器。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/ci/docker/using_docker_build.md">https://github.com/gitlabhq/gitlabhq/blob/master/doc/ci/docker/using_docker_build.md</a></p>
</li>
</ul>
<h4 id="binary-install">binary install</h4>
<p>Step 1. <a href="https://docs.gitlab.com/runner/install/">参考文档</a>，根据机器架构安装下载二进制。<br>
Step 2. 为二进制包添加执行权限。<br>
Step 3. 配置 gitlab 工作路径 <code>--working-directory</code>，避免 gitlab-runner 构建的缓存撑爆硬盘，配置文件所在 <code>/etc/systemd/system/gitlab-runner.service</code>。<br>
Step 4. 安装 gitlab-runner 服务。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># root 用户，避免权限</span></span><br><span class="line">gitlab-runner install --working-directory /home/gitlab-runner --user root</span><br></pre></td></tr></tbody></table></figure>
<p>Step 5. 注册 gitlab-runner 的执行器，生成配置文件 <code>/etc/gitlab-runner/config.toml</code>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-runner register</span><br></pre></td></tr></tbody></table></figure>
<p>可单独配置 runner 的构建目录 <code>builds_dir</code>，注意路径权限：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 gitlab-runner-custom-build-dir</span><br></pre></td></tr></tbody></table></figure>
<h4 id="shell-executor">shell executor</h4>
<p>使用 docker 配置 shell executor</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d --name gitlab-runner \</span><br><span class="line">    --restart always \</span><br><span class="line">    --privileged \</span><br><span class="line">    --gpus=all \</span><br><span class="line">    <span class="comment"># Host Docker Authentication \</span></span><br><span class="line">    -v /root/.docker/:/root/.docker/ \</span><br><span class="line">    <span class="comment"># Deprecated buildx https://docs.docker.com/build/architecture/#install-buildx ,maybe including ~/.docker/cli-plugins, /usr/lib/docker/cli-plugins, /usr/libexec/docker/cli-plugins and same in /usr/local-likes</span></span><br><span class="line">    -v /usr/libexec/docker/cli-plugins/docker-buildx:/usr/libexec/docker/cli-plugins/docker-buildx \</span><br><span class="line">    <span class="comment"># Build Cache as Same Path \</span></span><br><span class="line">    -v /data2/cache:/data2/cache \</span><br><span class="line">    <span class="comment"># Docker Cli \</span></span><br><span class="line">    -v /usr/bin/docker:/usr/bin/docker \</span><br><span class="line">    <span class="comment"># Bind hosts on Demand \</span></span><br><span class="line">    -v /etc/hosts:/etc/hosts \</span><br><span class="line">    <span class="comment"># Gitlab Config \</span></span><br><span class="line">    -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">    <span class="comment"># Docker-compose \</span></span><br><span class="line">    -v /usr/local/bin/docker-compose:/usr/local/bin/docker-compose \</span><br><span class="line">    <span class="comment"># Docker Sock \</span></span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    <span class="comment"># Image</span></span><br><span class="line">    gitlab/gitlab-runner:latest \</span><br><span class="line">    run \</span><br><span class="line">    <span class="comment"># Root permission \</span></span><br><span class="line">    --user=root \</span><br><span class="line">    <span class="comment"># Bind as source for run docker run -v in gitlab-runner container \</span></span><br><span class="line">    --working-directory=/data2/cache</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!CAUTION]<br>
注意 gitlab-runner 容器中用户和主机用户权限配置冲突解决，包括构建目录 /data2/cache 和 docker.sock 等挂载的访问权限都需要配置.</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 /data2/cache</span><br></pre></td></tr></tbody></table></figure>
<p>向 gitlab instance 注册 runner</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register</span><br></pre></td></tr></tbody></table></figure>
<p>配置完后，host 下的 gitlab runner config 如下:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># cat /srv/gitlab-runner/config/config.toml</span></span><br><span class="line">concurrent = 1</span><br><span class="line">check_interval = 0</span><br><span class="line"></span><br><span class="line">[session_server]</span><br><span class="line">  session_timeout = 1800</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = <span class="string">"shell"</span></span><br><span class="line">  url = <span class="string">"gitlab instance url"</span></span><br><span class="line">  <span class="built_in">id</span> = 143</span><br><span class="line">  token = <span class="string">"DkJVTi5KxJJGVpSDZVEC"</span></span><br><span class="line">  token_obtained_at = 2023-07-17T10:06:40Z</span><br><span class="line">  token_expires_at = 0001-01-01T00:00:00Z</span><br><span class="line">  executor = <span class="string">"shell"</span></span><br><span class="line">  environment = [<span class="string">"DOCKER_AUTH_CONFIG={\"auths\":{\"any docker hub\":{\"auth\":\"ZmVuZ2xpOjUxYWYuOWVjZQ==\"}}}"</span>]</span><br><span class="line">  [runners.custom_build_dir]</span><br><span class="line">  [runners.cache]</span><br><span class="line">    [runners.cache.s3]</span><br><span class="line">    [runners.cache.gcs]</span><br><span class="line">    [runners.cache.azure]</span><br></pre></td></tr></tbody></table></figure>
<p>更新配置 /srv/gitlab-runner/config, 重启镜像，生效配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker restart gitlab-runner</span><br></pre></td></tr></tbody></table></figure>
<h4 id="docker-executor">docker executor</h4>
<p><strong>DOOD 配置</strong>: 使用主机的 docker daemon</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># cat /srv/gitlab-runner/config/config.toml</span></span><br><span class="line">concurrent = 1</span><br><span class="line">check_interval = 0</span><br><span class="line"></span><br><span class="line">[session_server]</span><br><span class="line">  session_timeout = 1800</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  <span class="comment"># runner name as runner tag</span></span><br><span class="line">  name = <span class="string">"docker"</span></span><br><span class="line">  url = <span class="string">"gitlab instance url"</span></span><br><span class="line">  <span class="built_in">id</span> = 73</span><br><span class="line">  token = <span class="string">"gitlab runner token"</span></span><br><span class="line">  token_obtained_at = 2022-08-31T09:27:10Z</span><br><span class="line">  token_expires_at = 0001-01-01T00:00:00Z</span><br><span class="line">  executor = <span class="string">"docker"</span></span><br><span class="line">  <span class="comment"># Docker authentication, 也可以通过挂载主机的/root/.docker/config.json</span></span><br><span class="line">  environment = [<span class="string">"DOCKER_AUTH_CONFIG={\"auths\":{\"any docker hub\":{\"auth\":\"authentication generated by login step\"}}}"</span>]</span><br><span class="line">  [runners.custom_build_dir]</span><br><span class="line">  [runners.cache]</span><br><span class="line">    [runners.cache.s3]</span><br><span class="line">    [runners.cache.gcs]</span><br><span class="line">    [runners.cache.azure]</span><br><span class="line">  [runners.docker]</span><br><span class="line">    tls_verify = <span class="literal">false</span></span><br><span class="line">    image = <span class="string">"docker:latest"</span></span><br><span class="line">    privileged = <span class="literal">false</span></span><br><span class="line">    disable_entrypoint_overwrite = <span class="literal">false</span></span><br><span class="line">    oom_kill_disable = <span class="literal">false</span></span><br><span class="line">    disable_cache = <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 配置拉取镜像策略</span></span><br><span class="line">    pull_policy = <span class="string">"if-not-present"</span></span><br><span class="line">    <span class="comment"># /cache 是默认的本地构建缓存目录</span></span><br><span class="line">    <span class="comment"># /builds 是默认的本地构建目录</span></span><br><span class="line">    <span class="comment"># 若所在路径容量优先,可考虑创建软连接到 /cache (项目中间结果缓存)及/builds (项目构建缓存)</span></span><br><span class="line">    volumes = [</span><br><span class="line">        <span class="string">"/cache:/cache"</span>,</span><br><span class="line">        <span class="string">"/builds:/builds"</span>,</span><br><span class="line">        <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span>,</span><br><span class="line">        <span class="string">"/root/.docker/config.json:/root/.docker/config.json"</span>,</span><br><span class="line">    ]</span><br><span class="line">    shm_size = 0</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cloud.tencent.com/developer/article/1737663">https://cloud.tencent.com/developer/article/1737663</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/docker/using_docker_build.html">https://docs.gitlab.com/ee/ci/docker/using_docker_build.html</a></p>
</li>
</ul>
<h4 id="k8s-install">k8s install</h4>
<p>使用 helm 在 k8s 上安装 gitlab-runner</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/miss1181248983/article/details/109260287">https://blog.csdn.net/miss1181248983/article/details/109260287</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Tobewont/kubernetes/tree/master">https://github.com/Tobewont/kubernetes/tree/master</a></p>
</li>
</ul>
<!--
https://juejin.cn/post/7148321080766103583
https://juejin.cn/s/install%20gitlab%20runner%20on%20kubernetes%20helm
https://docs.gitlab.com/runner/install/kubernetes.html
 -->
<h4 id="常用命令">常用命令</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gitlab-runner stop <span class="comment"># 停止 runner</span></span><br><span class="line">gitlab-runner start/restart <span class="comment"># 开启/或重启 runner</span></span><br><span class="line">gitlab-runner install <span class="comment"># 安装 runner</span></span><br><span class="line">gitlab-runner register <span class="comment"># 注册关联执行器</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="集成-docker-构建环境">集成 docker 构建环境</h4>
<p>需要配置 gitlab-runner 访问 dockerhub 权限 <code>DOCKER_AUTH_CONFIG</code>。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/runner/install/">gitlab-runner 配置参考</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/huiguo/p/15347085.html">gitlab-runner 常见问题</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/white_pure/article/details/108039238">gitlab-runner 权限解决方式</a></p>
</li>
</ul>
<h3 id="更多配置">更多配置</h3>
<p>CI 在 Gitlab 中跑起来，可能需要对 runner <a href="https://docs.gitlab.com/runner/configuration/">配置</a>.</p>
<p>参考文档:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/runners/configure_runners.html">Configuration</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/runner/configuration/advanced-configuration.html">Advanced Configuration</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/runner/configuration/proxy.html">Running GitLab Runner behind a proxy</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/runner/configuration/gpus.html">GPU</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/chiehpower/Gitlab-CI-For-Deep-Learning">Enable GPU in GitLab</a></p>
</li>
</ul>
<h3 id="常见问题">常见问题</h3>
<h4 id="Missing-usr-bin-gitlab-runner-helper-Creating-cache-is-disabled">Missing /usr/bin/gitlab-runner-helper. Creating cache is disabled</h4>
<p>存在环境变量 variable 设置到 <a href="https://gitlab.com/gitlab-org/gitlab-runner/-/issues/3086">DEBUG</a>，需删掉干扰环境变量。</p>
<h2 id="GitLab-CI-CD">GitLab CI/CD</h2>
<p>参考文档:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/">CI/CD</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/yaml/gitlab_ci_yaml.html">GitLab gitlab-ci yaml</a></p>
</li>
</ul>
<h3 id="gitlab-template">gitlab template</h3>
<p>使用 GitLab CI/CD 最高效的方式是使用现有的模板.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html">optimize yaml</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.com/msclock/gitlab-ci-templates">https://gitlab.com/msclock/gitlab-ci-templates</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/gitlab-ci-utils/gitlab-ci-templates/">https://gitlab.com/gitlab-ci-utils/gitlab-ci-templates/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates">https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/ethima">https://gitlab.com/ethima</a></p>
</li>
<li class="lvl-2">
<p><a href="https://hodovi.cc/blog/creating-templates-for-gitlab-ci-jobs/">https://hodovi.cc/blog/creating-templates-for-gitlab-ci-jobs/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/nvidia/kubernetes/device-plugin/.common.yml">https://gitlab.com/nvidia/kubernetes/device-plugin/.common.yml</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/guided-explorations">GitLab CI/CD Exploration</a></p>
</li>
</ul>
<h3 id="variable">variable</h3>
<p><a href="https://docs.gitlab.com/ee/ci/variables/">GitLab CI/CD Variable</a> 变量是一种环境变量，用于：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>控制作业和管道的行为。</p>
</li>
<li class="lvl-2">
<p>存储要重复使用的值。</p>
</li>
<li class="lvl-2">
<p>避免在<code>.gitlab-ci.yml</code> 中硬编码值。</p>
</li>
</ul>
<p>变量分为：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-project">Project CI/CD variables</a>.</p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-a-group">Group CI/CD variables</a>.</p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/variables/#add-a-cicd-variable-to-an-instance">Instance CI/CD variables</a>.</p>
</li>
</ul>
<p><a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">预置变量（Predefined variables reference）</a>预定义的 CI/CD 变量在每个 GitLab CI/CD 管道中都可用。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.com/gitlab-org/gitlab/-/issues/220562">check if a var not exist</a></p>
</li>
</ul>
<h4 id="GIT-STRATEGY">GIT_STRATEGY</h4>
<p>在 GitLab CI 中，可以使用 GIT_STRATEGY 来指定 Git 操作的策略。GIT_STRATEGY 有以下几个可选值：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>clone：每个 Job 都会执行 <code>git clone</code> 操作来获取代码，默认值。</p>
</li>
<li class="lvl-2">
<p>fetch：每个 Job 都会执行 <code>git fetch</code> 操作来更新代码。</p>
</li>
<li class="lvl-2">
<p>none：每个 Job 都不会执行 Git 操作，适用于无需访问代码仓库的 Job。</p>
</li>
</ul>
<h3 id="rules">rules</h3>
<p>GitLab CI/CD 中的 rules 语法允许定义灵活的条件来确定何时创建或执行作业</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">workflow:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">&lt;expression&gt;</span></span><br><span class="line">      <span class="attr">changes:</span> <span class="string">&lt;array_of_files&gt;</span></span><br><span class="line">      <span class="attr">exists:</span> <span class="string">&lt;array_of_files&gt;</span></span><br><span class="line">      <span class="attr">allow_failure:</span> <span class="string">&lt;boolean&gt;</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line">      <span class="attr">start_in:</span> <span class="string">&lt;string&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>if：确定作业是否应该被创建或执行的条件。它支持使用预定义变量、运算符和正则表达式的广泛表达式。</p>
</li>
<li class="lvl-2">
<p>changes：可选字段，允许指定一组文件，当这些文件在提交中被修改时，作业应该触发。</p>
</li>
<li class="lvl-2">
<p>exists：可选字段，允许指定一组文件，当这些文件存在于存储库中时，作业应该触发。</p>
</li>
<li class="lvl-2">
<p>allow_failure：可选字段，允许指定作业是否允许失败而不影响整体流水线状态。它接受布尔值（true 或 false）。</p>
</li>
<li class="lvl-2">
<p>when：可选字段，允许指定作业应该在何时被创建或执行。它接受以下值：on_success、on_failure、always、manual 或 never。</p>
</li>
<li class="lvl-2">
<p>start_in：可选字段，允许通过指定时间间隔来延迟作业的开始。它接受值如 3 minutes、1 hour 或 1 day。</p>
</li>
</ul>
<h3 id="extends">extends</h3>
<p>复用 CI 脚本配置语法。</p>
<p>如果 <code>my-other-block</code> 在对应的 script 有自定义值，则它会覆盖 extend 中的 值。</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">my-base-block:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Hello, Gitlab CI!"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">my-other-block:</span></span><br><span class="line">  <span class="attr">extends:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">my-base-block</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Bye, Gitlab CI!"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####### 合并后的值  ######</span></span><br><span class="line"></span><br><span class="line"><span class="attr">my-base-block:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Hello, Gitlab CI!"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">my-other-block:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Bye, Gitlab CI!"</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/53175030/gitlab-ci-extend-script-section">extend script sections</a></p>
</li>
</ul>
<h3 id="matrix">matrix</h3>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">matrix</span></span><br><span class="line"></span><br><span class="line"><span class="string">.parallel-matrix:</span></span><br><span class="line">  <span class="attr">parallel:</span></span><br><span class="line">    <span class="attr">matrix:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CLOUD:</span> [<span class="string">aws</span>, <span class="string">azure</span>, <span class="string">gcp</span>]</span><br><span class="line">        <span class="attr">ARCH:</span> [<span class="string">kubernetes</span>, <span class="string">service-mesh</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">Matrix:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">matrix</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">alpine:latest</span></span><br><span class="line">  <span class="attr">parallel:</span> <span class="type">!reference</span> [<span class="string">.parallel-matrix</span>, <span class="string">parallel</span>] <span class="comment"># or extends: [.parallel-matrix]</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"Hello from $ARCH from $CLOUD"</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://dnsmichi.at/2021/09/23/efficient-pipelines-gitlab-ci-cd-parallel-matrix-builds-reference/">https://dnsmichi.at/2021/09/23/efficient-pipelines-gitlab-ci-cd-parallel-matrix-builds-reference/</a></p>
</li>
</ul>
<h3 id="trigger">trigger</h3>
<p>使用子管道，解耦 CI 复杂的 jobs.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/pipelines/downstream_pipelines.html#pass-cicd-variables-to-a-downstream-pipeline">Pass variables to downstream jobs</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/pipelines/downstream_pipelines.html">https://docs.gitlab.com/ee/ci/pipelines/downstream_pipelines.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.padok.fr/en/blog/complex-gitlab-pipelines">https://www.padok.fr/en/blog/complex-gitlab-pipelines</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/gitlab-org/project-templates/jsonnet">https://gitlab.com/gitlab-org/project-templates/jsonnet</a></p>
</li>
<li class="lvl-2">
<p><a href="https://scu.med.cornell.edu/git/help/ci/yaml/README.md#trigger-child-pipeline-with-generated-configuration-file">https://scu.med.cornell.edu/git/help/ci/yaml/README.md#trigger-child-pipeline-with-generated-configuration-file</a></p>
</li>
<li class="lvl-2">
<p><a href="https://about.gitlab.com/blog/2022/02/22/parent-child-vs-multi-project-pipelines/">https://about.gitlab.com/blog/2022/02/22/parent-child-vs-multi-project-pipelines/</a></p>
</li>
</ul>
<h3 id="interruptible">interruptible</h3>
<p>当为 job 配置了 interruptible 时，如果当前分支存在新的提交，会自动取消当前管道.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.gnome.org/GNOME/librsvg/-/merge_requests/405">https://gitlab.gnome.org/GNOME/librsvg/-/merge_requests/405</a></p>
</li>
</ul>
<h3 id="script">script</h3>
<p>在 gitlab-ci 中，存在 <code>before_script(sc)</code>, <code>script(s)</code>, <code>after_script(as)</code> 三个脚本阶段，特征如下:</p>
<p><code>before_script</code>:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>影响 job 状态</p>
</li>
<li class="lvl-2">
<p>变量能传递到 <code>s</code> 中</p>
</li>
</ul>
<p><code>script</code>:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>影响 job 状态</p>
</li>
<li class="lvl-2">
<p>能接受 <code>bs</code> 中变量</p>
</li>
</ul>
<p><code>after_script</code>:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>不影响 job 状态</p>
</li>
<li class="lvl-2">
<p>不接受 <code>bs</code> 和 <code>s</code> 中变量，只接受 variable 中的变量</p>
</li>
</ul>
<h4 id="传递环境变量到af">传递环境变量到 <code>af</code></h4>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">pass_var_to_as:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev_id=123</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"dev_id=$dev_id"</span> <span class="string">&gt;</span> <span class="string">.variables.txt</span></span><br><span class="line">  <span class="attr">after_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">source</span> <span class="string">.variables.txt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">$dev_id</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.variables.txt</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="在job之间传递变量">在 job 之间传递变量</h4>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">pass_var_to_downstream:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev_id=123</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"dev_id=$dev_id"</span> <span class="string">&gt;</span> <span class="string">dev.env</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">reports:</span></span><br><span class="line">      <span class="attr">dotenv:</span> <span class="string">dev.env</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-submodule">git submodule</h3>
<p>使用 git 子模块能保证项目依赖关系，在开发及构建能有效的保证这种关系的稳定。在 GitLab 中使用子模块可能需要做一定的<a href="https://docs.gitlab.com/ee/ci/git_submodules.html">配置</a>。</p>
<p><code>.gitsubmodules</code>: 使用 Git 子模块时，项目应具有名为 .gitmodules 的文件。可能需要对其进行修改才能在 GitLab CI/CD 作业中工作。</p>
<p>例如，在以下情况下，配置可能如下所示：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>项目位于 <a href="https://gitlab.com/secret-group/my-project">https://gitlab.com/secret-group/my-project</a></p>
</li>
<li class="lvl-2">
<p>项目依赖于 要将其作为子模块包含在内。<a href="https://gitlab.com/group/project">https://gitlab.com/group/project</a></p>
</li>
<li class="lvl-2">
<p>可以使用类似 <a href="mailto:.git@gitlab.com">.git@gitlab.com</a>:secret-group/my-project.git</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[submodule <span class="string">"project"</span>]</span><br><span class="line">  path = project</span><br><span class="line">  url = ../../group/project.git</span><br></pre></td></tr></tbody></table></figure>
<p><strong>当子模块位于同一 GitLab 服务器上时，应该在文件中使用相对 URL</strong>。然后，可以在所有 CI/CD 作业中使用 HTTPS 进行克隆。还可以使用 SSH 进行所有本地检出 .gitmodules。</p>
<p>上述配置指示 Git 自动推断克隆源时要使用的 URL。Git 对 HTTPS 和 SSH 使用相同的配置。GitLab CI/CD 使用 HTTPS 克隆源，可以继续使用 SSH 在本地克隆。</p>
<p><strong>对于不在同一 GitLab 服务器上的子模块，请使用完整的 URL</strong>：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[submodule <span class="string">"project-x"</span>]</span><br><span class="line">  path = project-x</span><br><span class="line">  url = https://gitserver.com/group/project-x.git</span><br></pre></td></tr></tbody></table></figure>
<p>子模块在 .gitlab-ci.yml 中 job 中的配置子模块迁出方式。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">variables:</span><br><span class="line">  GIT_SUBMODULE_STRATEGY: recursive <span class="comment"># 递归拉取子模块</span></span><br><span class="line">  GIT_SUBMODULE_UPDATE_FLAGS: --<span class="built_in">jobs</span> 4 <span class="comment"># 并发拉取</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="git-lfs">git lfs</h3>
<p>要为代码仓库配置 Git LFS 拉取，需要执行以下步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在 GitLab CI 脚本中，添加以下命令以安装 Git LFS：</p>
</li>
</ul>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">lfs</span> <span class="string">install</span> <span class="comment"># install lfs manually</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">lfs</span> <span class="string">pull</span> <span class="comment"># pull manually</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>确保项目中包含了.gitattributes 文件，并在其中指定要使用 Git LFS 进行跟踪的文件类型。例如，如果想要使用 Git LFS 跟踪所有的.mp4 文件，可以在.gitattributes 文件中添加以下内容：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">*.mp4 filter=lfs diff=lfs merge=lfs -text</span><br></pre></td></tr></tbody></table></figure>
<p>这将告诉 Git LFS 将.mp4 文件视为大文件，并使用 Git LFS 进行跟踪。</p>
<h3 id="access-token">access token</h3>
<p>在 GitLab 项目配置中配置 access token, 可根据需要配置权限，使用方式</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>make a pr or oush with gitlab project token</p>
</li>
</ul>
<p>将代码更改推送逻辑封装到一个 .yml 文件中，然后在其他项目中通过 extends 关键字来扩展这个模板。参考的<a href="https://gitlab.com/msclock/gitlab-ci-templates/raw/main/templates/common.yml">示例</a></p>
<p>参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/security/token_overview.html">https://docs.gitlab.com/ee/security/token_overview.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html">https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/70775139/how-do-i-push-to-gitlab-with-a-project-access-token">https://stackoverflow.com/questions/70775139/how-do-i-push-to-gitlab-with-a-project-access-token</a></p>
</li>
</ul>
<h3 id="workflow">workflow</h3>
<p>使用工作流 workflow 控制管道行为。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/yaml/#workflow">https://docs.gitlab.com/ee/ci/yaml/#workflow</a></p>
</li>
</ul>
<h3 id="include">include</h3>
<p>使用 include 在 CI/CD 配置中包含外部 YAML 文件。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/yaml/#include">https://docs.gitlab.com/ee/ci/yaml/#include</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates">gitlab instance builtin template</a></p>
</li>
</ul>
<h3 id="artifact">artifact</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html">https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/yaml/index.html#artifacts">artifact report 类型</a></p>
</li>
</ul>
<h4 id="dotenv">dotenv</h4>
<p><strong>dotenv</strong> 保存为 artifact</p>
<p>将环境变量保存为 artifact</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/hashicorp/tfc-workflows-gitlab/blob/main/Base.gitlab-ci.yml">https://github.com/hashicorp/tfc-workflows-gitlab/blob/main/Base.gitlab-ci.yml</a></p>
</li>
</ul>
<h4 id="job">job</h4>
<p>配置 job 中的各种 artifact 行为</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/jobs/job_artifacts.html">https://docs.gitlab.com/ee/ci/jobs/job_artifacts.html</a></p>
</li>
</ul>
<h3 id="service">service</h3>
<p>gitlab ci 中定义的 service 默认以 privileged 权限启动，方便服务内部工作正常.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/services/">https://docs.gitlab.com/ee/ci/services/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/ci/services/#security-when-using-services-containers">https://docs.gitlab.com/ee/ci/services/#security-when-using-services-containers</a></p>
</li>
</ul>
<h3 id="publish-release">publish release</h3>
<p>GitLab 中发布 release 时会自动创建一个标签 (CI_COMMIT_TAG)，所以可以通过检查标签是否存在来判断是否发布了 release。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/user/project/releases">https://docs.gitlab.com/ee/user/project/releases</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/api/releases/">https://docs.gitlab.com/ee/api/releases/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/gitlab-org/release-cli/-/tree/master/docs/examples/release-assets-as-generic-package/">gitlab release cli publish a generic package</a></p>
</li>
</ul>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">job-name:</span></span><br><span class="line">  <span class="comment"># ... other configurations ...</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="comment"># using defined syntax</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line">    <span class="comment"># or</span></span><br><span class="line">    <span class="comment"># prefix matches v</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_TAG</span> <span class="string">=~</span> <span class="string">/^(v)/</span></span><br><span class="line">    <span class="comment"># using exists syntax</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_TAG</span> <span class="type">!=</span> <span class="string">''</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span> <span class="string">$CI_COMMIT_TAG</span> <span class="string">=~</span> <span class="string">/^./</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">if:</span></span><br><span class="line">      <span class="attr">exists:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">exists:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$CI_COMMIT_TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">manual</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="badges">badges</h3>
<p>徽章是一种统一的方式，用于显示关于项目的简化信息。徽章由一个小图像和图像所指向的 URL 组成。在 GitLab 中，徽章显示在项目描述下面。可以在项目和组级别使用徽章。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/user/project/badges.html">https://docs.gitlab.com/ee/user/project/badges.html</a></p>
</li>
</ul>
<h3 id="cron">cron</h3>
<p>定时命令</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># ┌───────────── minute (0 - 59)</span></span><br><span class="line"><span class="comment"># │ ┌───────────── hour (0 - 23)</span></span><br><span class="line"><span class="comment"># │ │ ┌───────────── day of the month (1 - 31)</span></span><br><span class="line"><span class="comment"># │ │ │ ┌───────────── month (1 - 12)</span></span><br><span class="line"><span class="comment"># │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)</span></span><br><span class="line"><span class="comment"># │ │ │ │ │</span></span><br><span class="line"><span class="comment"># │ │ │ │ │</span></span><br><span class="line"><span class="comment"># │ │ │ │ │</span></span><br><span class="line"><span class="comment"># * * * * * &lt;command to execute&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.gitlab.com/ee/topics/cron/">https://docs.gitlab.com/ee/topics/cron/</a></p>
</li>
</ul>
<h2 id="GitLab-Deploy">GitLab Deploy</h2>
<!-- https://docs.gitlab.com/ee/topics/autodevops/ -->
<!-- https://github.com/travis-ci/dpl#supported-providers -->
<h3 id="native">native</h3>
<p>使用 ssh 验证远程部署，主要使用 scp 及 ssh 等工具</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 传输文件到远程</span></span><br><span class="line">scp -P 5022 local_file_path username@remote_host:remote_file_path</span><br><span class="line"><span class="comment"># 执行远程命令</span></span><br><span class="line">ssh -p 5022 username@remote_host <span class="string">'command_to_execute'</span></span><br></pre></td></tr></tbody></table></figure>
<p>生产 ssh 密钥用于自动化部署</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></tbody></table></figure>
<p>将公钥添加到服务器。将 id_rsa.pub 文件的内容复制并粘贴到服务器的～/.ssh/authorized_keys 文件中。</p>
<p>将私钥添加到 GitLab。在 GitLab 中，转到项目的 Settings -&gt; CI/CD -&gt; Variables。创建一个新的变量，例如 SSH_PRIVATE_KEY，并将 id_rsa 文件的内容粘贴到值字段中。</p>
<p>在 .gitlab-ci.yml 文件中使用 SSH 密钥。可以在脚本中使用 SSH_PRIVATE_KEY 变量来建立 SSH 连接。例如：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  stage: deploy</span><br><span class="line">  script:</span><br><span class="line">    - <span class="string">'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )'</span></span><br><span class="line">    - <span class="built_in">eval</span> $(ssh-agent -s)</span><br><span class="line">    - <span class="built_in">echo</span> <span class="string">"<span class="variable">$SSH_PRIVATE_KEY</span>"</span> | <span class="built_in">tr</span> -d <span class="string">'\r'</span> | ssh-add - &gt; /dev/null</span><br><span class="line">    - <span class="built_in">mkdir</span> -p ~/.ssh</span><br><span class="line">    - <span class="built_in">chmod</span> 700 ~/.ssh</span><br><span class="line">    - ssh-keyscan yourserver.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">    - <span class="built_in">chmod</span> 644 ~/.ssh/known_hosts</span><br><span class="line">    - ssh user@yourserver.com <span class="string">'your deploy command'</span></span><br></pre></td></tr></tbody></table></figure>
<p>这个脚本首先检查是否已经安装了 ssh-agent，如果没有则安装它。然后，它启动 ssh-agent，添加私钥，并将服务器添加到 known_hosts 文件中。最后，它通过 SSH 连接到服务器并运行部署命令。</p>
<p>示例脚本</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shellcheck disable=SC1091,SC2154</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -ex</span><br><span class="line"></span><br><span class="line">docker_compose_file=<span class="string">"deploy/docker/docker-compose.yml"</span></span><br><span class="line">deploy_relative_path=<span class="string">"/tmp"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">local</span> ssh_port=<span class="variable">$SSH_PORT</span></span><br><span class="line"><span class="keyword">if</span> [[ -z <span class="string">"<span class="variable">${ssh_port}</span>"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    ssh_port=22</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the commands for start, update, and delete</span></span><br><span class="line">start_command=<span class="string">"docker-compose -f <span class="variable">$docker_compose_file</span> up -d"</span></span><br><span class="line">update_command=<span class="string">"docker-compose -f <span class="variable">$docker_compose_file</span> pull &amp;&amp; <span class="variable">$start_command</span>"</span></span><br><span class="line">delete_command=<span class="string">"docker-compose -f <span class="variable">$docker_compose_file</span> down"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the function to transfer file to remote via ssh</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">transfer_file</span></span>() {</span><br><span class="line">    <span class="built_in">local</span> host=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> file=<span class="variable">$2</span></span><br><span class="line">    <span class="built_in">local</span> destination=<span class="variable">$3</span></span><br><span class="line"></span><br><span class="line">    scp -P22 <span class="string">"<span class="variable">$file</span>"</span> <span class="string">"<span class="variable">$host</span>"</span>:<span class="string">"<span class="variable">$destination</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the function to execute commands remotely via ssh</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">remote_deploy</span></span>() {</span><br><span class="line">    <span class="built_in">local</span> host=<span class="variable">$1</span></span><br><span class="line">    <span class="built_in">local</span> <span class="built_in">command</span>=<span class="variable">$2</span></span><br><span class="line"></span><br><span class="line">    ssh -p22 <span class="string">"<span class="variable">$host</span>"</span> <span class="string">"<span class="variable">$command</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define the functions for start, update, and delete</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">start</span></span>() {</span><br><span class="line">    <span class="built_in">local</span> host=<span class="variable">$1</span></span><br><span class="line">    transfer_file <span class="string">"<span class="variable">$host</span>"</span> <span class="variable">$docker_compose_file</span> <span class="variable">$deploy_relative_path</span></span><br><span class="line">    remote_deploy <span class="string">"<span class="variable">$host</span>"</span> <span class="string">"<span class="variable">$start_command</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">update</span></span>() {</span><br><span class="line">    <span class="built_in">local</span> host=<span class="variable">$1</span></span><br><span class="line">    transfer_file <span class="string">"<span class="variable">$host</span>"</span> <span class="variable">$docker_compose_file</span> <span class="variable">$deploy_relative_path</span></span><br><span class="line">    remote_deploy <span class="string">"<span class="variable">$host</span>"</span> <span class="string">"<span class="variable">$update_command</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">delete</span></span>() {</span><br><span class="line">    <span class="built_in">local</span> host=<span class="variable">$1</span></span><br><span class="line">    remote_deploy <span class="string">"<span class="variable">$host</span>"</span> <span class="string">"<span class="variable">$delete_command</span>"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="pages">pages</h3>
<p>使用 GitLab Pages 部署项目文档，参考<a href="https://docs.gitlab.com/ee/user/project/pages/">使用 GitLab Pages</a></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.com/pages">Example websites hosted by GitLab Pages</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/pages/doxygen">doxygen</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/pages/sphinx">sphinx</a></p>
</li>
</ul>
<h2 id="GitLab-API">GitLab API</h2>
<h3 id="python-操作">python 操作</h3>
<p>python 作为胶水语言及丰富的包源，很容易和其它工具配置集成。这里介绍通过 <a href="https://python-gitlab.readthedocs.io/en/latest/">python-gitlab</a> 集成进 gitlab 中的一种方式。</p>
<h4 id="API-操作">API 操作</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://python-gitlab.readthedocs.io/en/stable/api-objects.html">示例参考</a></p>
</li>
<li class="lvl-2">
<p><a href="https://python-gitlab.readthedocs.io/en/latest/">python-gitlab docs</a></p>
</li>
</ul>
<h3 id="GitLab-API-2">GitLab API</h3>
<h4 id="create-pull-request">create pull request</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl --header <span class="string">"PRIVATE-TOKEN: <span class="variable">$CI_JOB_TOKEN</span>"</span> \</span><br><span class="line">    --request POST <span class="string">"https://gitlab.example.com/api/v4/projects/<span class="variable">$CI_PROJECT_ID</span>/merge_requests"</span> \</span><br><span class="line">    --form <span class="string">"source_branch=temp_branch"</span> \</span><br><span class="line">    --form <span class="string">"target_branch=<span class="variable">$CI_COMMIT_REF_NAME</span>"</span> \</span><br><span class="line">    --form <span class="string">"title=PR from temp_branch"</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!NOTE]<br>
需要将 <code>https://gitlab.example.com</code> 替换为 GitLab 实例的 URL，$CI_PROJECT_ID 是项目 ID，$CI_JOB_TOKEN 是 CI/CD 作业令牌，$CI_COMMIT_REF_NAME 是当前分支的名称。</p>
</blockquote>
<h4 id="delete-tag">delete tag</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 删除 tag v1.0.0</span></span><br><span class="line"><span class="comment"># --request 使用 DELETE 方法</span></span><br><span class="line"><span class="comment"># --header 使用访问认证 Token</span></span><br><span class="line">curl --header <span class="string">"PRIVATE-TOKEN: TOKEN-ACCESS"</span> \</span><br><span class="line">    --request DELETE <span class="string">"https://gitlab.example.com/api/v4/projects/<span class="variable">$CI_PROJECT_ID</span>/repository/tags/v1.0.0"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="GitLab-CI-local">GitLab CI local</h2>
<p><a href="https://github.com/firecow/gitlab-ci-local">Gitlab CI local</a> 用于本地测试 gitlab 管道，避免频繁推送到远程测试 CI 流程。</p>
<blockquote>
<p>[!TIP]<br>
建议在 vscode devcontainer 配置 nodejs 及 dind 进行测试。</p>
</blockquote>
<h3 id="安装-2">安装</h3>
<p>手动安装，参考 <a href="https://github.com/firecow/gitlab-ci-local/blob/master/README.md">README.md</a></p>
<h3 id="常用命令-2">常用命令</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 列出job</span></span><br><span class="line">gitlab-ci-local --list</span><br><span class="line">gitlab-ci-local --list-json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行job</span></span><br><span class="line">gitlab-ci-local job &lt;job-name&gt;</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>gpg</title>
    <url>/posts/4e3089ba/</url>
    <content><![CDATA[<h2 id="GPG">GPG</h2>
<p>GPG（GNU Privacy Guard）是一种开源的加密软件，它可以用于加密和签名数据。它使用公钥和私钥对来实现加密和签名。公钥和私钥对是由用户生成的，公钥可以公开分享，而私钥则应该保密。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.github.com/zh/authentication/managing-commit-signature-verification/about-commit-signature-verification">在 github 中使用 commit signature verification</a></p>
</li>
</ul>
<span id="more"></span>
<h3 id="导入导出-gpg">导入导出 gpg</h3>
<p>导出 GPG 密钥：生成密钥后，您需要将其导出以便在其他机器上使用。使用以下命令导出密钥</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gpg --export-secret-keys -a <span class="string">"您的邮箱地址"</span> &gt; 私钥文件名.asc</span><br></pre></td></tr></tbody></table></figure>
<p>导入 GPG 密钥：在其他机器上，您需要导入之前导出的 GPG 密钥。将私钥文件传输到目标机器上，并使用以下命令导入密钥：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gpg --import 私钥文件名.asc</span><br></pre></td></tr></tbody></table></figure>
<h3 id="在devcontainer中使用gpg">在 devcontainer 中使用 gpg</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://code.visualstudio.com/remote/advancedcontainers/sharing-git-credentials#_sharing-gpg-keys">https://code.visualstudio.com/remote/advancedcontainers/sharing-git-credentials#_sharing-gpg-keys</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>go</title>
    <url>/posts/b6689356/</url>
    <content><![CDATA[<h2 id="相关资源">相关资源</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.geeksforgeeks.org/golang/">gk golang</a></td>
<td>geeksforgeeks</td>
<td> 教程 </td>
</tr>
<tr>
<td><a href="https://pkg.go.dev/">go pkg</a></td>
<td>go</td>
<td> 社区 </td>
</tr>
<tr>
<td><a href="https://studygolang.com/">go 语言中文网</a></td>
<td> studygolang</td>
<td> 社区 </td>
</tr>
<tr>
<td><a href="https://studygolang.com/pkgdoc">godoc 标准库</a></td>
<td> studygolang</td>
<td> 文档 </td>
</tr>
<tr>
<td><a href="http://www.golangs.cn/">go json 结构转换工具</a></td>
<td> golangs</td>
<td> 工具 </td>
</tr>
<tr>
<td><a href="https://deps.dev/">open source insight</a></td>
<td>osi</td>
<td> 工具</td>
</tr>
</tbody>
</table>
<h2 id="Beginner">Beginner</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://go.dev/wiki/">https://go.dev/wiki/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=yyUHQIec83I">nana go beginner tutorials</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=un6ZyFkqFKo&amp;t=8s">freecodecamp go tutorials</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=qyM8Pi1KiiM">go Concurrency Patterns</a></p>
</li>
</ul>
<span id="more"></span>
<h3 id="mod">mod</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://go.dev/ref/mod">https://go.dev/ref/mod</a></p>
</li>
</ul>
<p>初始化一个 go 项目。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">go mod init github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line"><span class="built_in">touch</span> main.go</span><br></pre></td></tr></tbody></table></figure>
<h4 id="go-mod">go mod</h4>
<p>在 Go 语言中，Go Modules 是用于包管理和版本控制的官方解决方案。下面是一些常用的 Go Modules 命令及其相关解释：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>go mod init：初始化一个新的 Go Modules 项目。这个命令会创建一个 go.mod 文件来记录项目的依赖关系和版本信息。</p>
</li>
<li class="lvl-2">
<p>go mod tidy：根据代码中的导入语句和已有的依赖关系，自动将项目的 go.mod 文件更新为最新状态。它会移除不再使用的依赖项，并添加缺失的依赖项。</p>
</li>
<li class="lvl-2">
<p>go mod vendor：将项目的依赖项复制到项目根目录下的 vendor 目录中。这样可以将所有的依赖项存放在项目本地，以便离线构建和更好的版本控制。</p>
</li>
<li class="lvl-2">
<p>go mod download：下载并缓存项目的依赖项。这个命令会下载所有的依赖项到本地缓存中，以便后续的构建操作使用。</p>
</li>
<li class="lvl-2">
<p>go mod verify：验证项目的依赖项是否完整和正确。它会检查缓存中的依赖项和 go.sum 文件中记录的哈希值是否匹配，以确保依赖项没有被篡改。</p>
</li>
<li class="lvl-2">
<p>go mod graph：打印项目的依赖图。它会列出所有的依赖项及其之间的依赖关系，以帮助理解项目的依赖结构。</p>
</li>
<li class="lvl-2">
<p>go mod edit：手动编辑 go.mod 文件。可以使用这个命令来添加、删除或修改依赖项，或者手动调整版本约束。</p>
</li>
<li class="lvl-2">
<p>go mod why：显示指定模块为什么被选择。可以使用这个命令来查看特定模块被引入的原因，以及它与其他模块的冲突解决方式。</p>
</li>
</ul>
<p>这些是一些常用的 Go Modules 命令及其相关解释。使用这些命令，可以更好地管理和控制 Go 项目的依赖关系，并确保项目的构建过程稳定和可靠。</p>
<h3 id="channel">channel</h3>
<h4 id="select">select</h4>
<p>从多个 channel 中选择一个执行。</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    intCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// intCh is a channel for integers</span></span><br><span class="line">    strCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>) <span class="comment">// strCh is a channel for strings</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Anonymous function to send integer to intCh</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        intCh &lt;- <span class="number">42</span></span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Anonymous function to send string to strCh</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        strCh &lt;- <span class="string">"hello"</span></span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Select statement to receive from intCh or strCh</span></span><br><span class="line">    <span class="keyword">select</span> {</span><br><span class="line">    <span class="keyword">case</span> value := &lt;-intCh:</span><br><span class="line">        fmt.Println(value)</span><br><span class="line">    <span class="keyword">case</span> value := &lt;-strCh:</span><br><span class="line">        fmt.Println(value)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="done-channel">done channel</h4>
<p>done channel 可以用于主动停止一个 goroutine。</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// infiniteLoop runs an infinite loop until a signal is received on the done channel</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">infiniteLoop</span><span class="params">(done &lt;-<span class="keyword">chan</span> <span class="type">bool</span>)</span></span> {</span><br><span class="line">    <span class="keyword">for</span> {</span><br><span class="line">        <span class="keyword">select</span> {</span><br><span class="line">        <span class="keyword">case</span> &lt;-done: <span class="comment">// if a signal is received on the done channel</span></span><br><span class="line">            <span class="keyword">return</span> <span class="comment">// exit the infinite loop</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            fmt.<span class="built_in">println</span>(<span class="string">"working..."</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>) <span class="comment">// create a boolean channel called done</span></span><br><span class="line">    <span class="keyword">go</span> infiniteLoop(done)   <span class="comment">// start running the infiniteLoop in a separate goroutine</span></span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second) <span class="comment">// sleep for 10 seconds</span></span><br><span class="line">    <span class="built_in">close</span>(done)                 <span class="comment">// close the done channel to signal the infiniteLoop to stop</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="pipeline-pattern">pipeline pattern</h4>
<p>pipeline pattern 用于创建异步任务管道，可以模拟一个生成器。</p>
<figure class="highlight go"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// generator is a function that returns a channel to generate integers</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generator</span><span class="params">(num <span class="type">int</span>)</span></span> &lt;-<span class="keyword">chan</span> <span class="type">int</span> {</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ {</span><br><span class="line">            ch &lt;- i</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    }()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// caller is a function that calls the generator function and prints the generated values</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">caller</span><span class="params">()</span></span> {</span><br><span class="line">    gen := generator(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">for</span> value := <span class="keyword">range</span> gen {</span><br><span class="line">        fmt.Println(value)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Project">Project</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/wagslane/go-rabbitmq">go-rabbitmq go project</a></p>
</li>
</ul>
<h2 id="gin-vue-admin">gin-vue-admin</h2>
<p>基于 gin-vue-admin 构建的后台管理系统.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/flipped-aurora/gin-vue-admin">https://github.com/flipped-aurora/gin-vue-admin</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.bilibili.com/video/BV1Fi4y1S754/">b 站 gva 后端设计讲解</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.bilibili.com/video/BV1kv4y1g7nT">b 站 gva 自动代码生成</a></p>
</li>
</ul>
<h2 id="Cobra">Cobra</h2>
<p>Cobra 是一个命令行开发框架，用于快速构建命令行工具。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/spf13/cobra">https://github.com/spf13/cobra</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.ctyun.cn/developer/article/463154414891077">https://www.ctyun.cn/developer/article/463154414891077</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>Welcome to Hexo</title>
    <url>/posts/51646408/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using <code>Hexo</code>, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quickstart">Quickstart</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></tbody></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<h2 id="next">next</h2>
<p>主要记录一下 next 主题的一些简单的配置，以便后面更加轻松的使用 next 的一些配置。</p>
<!-- more -->
<h3 id="下载主题">下载主题</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd hexo</span><br><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></tbody></table></figure>
<h3 id="主题说明">主题说明</h3>
<p>在项目文件中有多个<code>_config.yml</code> 文件，为方便区分。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>hexo 根目录下的<code>_config.yml</code> 称为<code>站点配置文件</code>。</p>
</li>
<li class="lvl-2">
<p>next 主题文件夹下的 <code>theme/next/_config.yml</code> 称为<code>主题配置文件</code>。</p>
</li>
</ul>
<h3 id="设置语言">设置语言</h3>
<p>在<code>主题配置文件</code>中设置简体中文</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="设置Menu">设置 Menu</h3>
<h4 id="新建页面">新建页面</h4>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></tbody></table></figure>
<h4 id="为文章指定分类">为文章指定分类</h4>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Next主题配置</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-12-15 10:57:12</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="更新主题">更新主题</h3>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">cd themes/next</span><br><span class="line">git pull</span><br></pre></td></tr></tbody></table></figure>
<h3 id="参考">参考</h3>
<p><a href="https://theme-next.org">next 官方文档</a></p>
<h2 id="markdown-嵌入-ipynb">markdown 嵌入 ipynb</h2>
<p>登陆 <a href="https://nbviewer.jupyter.org/">nbviewer</a> ，然后输入相应的 ipynb 文件链接，即可在线显示。也可以在本地的 jupyter 中打开。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://nbviewer.jupyter.org/github/royalosyin/Python-Practical-Application-on-Climate-Variability-Studies/blob/master/ex12-Analysis%20of%20Monthly%20GPCP%20precipitation.ipynb"</span> <span class="attr">width</span>=<span class="string">"570"</span> <span class="attr">height</span>=<span class="string">"2000"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="Github-CI-CD">Github CI/CD</h2>
<p>配置 私有仓库存储 hexo 笔记，公有仓库存储生成的 静态页面.</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/deploy.yml</span></span><br><span class="line"><span class="comment"># Deploy to pages</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Pages</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">18</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">${{</span> <span class="string">runner.OS</span> <span class="string">}}-npm-cache</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            ${{ runner.OS }}-npm-cache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 使用 developer settings 生成的 personal token 部署</span></span><br><span class="line">          <span class="comment"># 参考 https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-set-personal-access-token-personal_token</span></span><br><span class="line">          <span class="attr">personal_token:</span> <span class="string">${{</span> <span class="string">secrets.PERSONAL_TOKEN</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">external_repository:</span> <span class="string">msclock/msclock.github.io</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">user_name:</span> <span class="string">'github-actions[bot]'</span></span><br><span class="line">          <span class="attr">user_email:</span> <span class="string">'github-actions[bot]@users.noreply.github.com'</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>license</title>
    <url>/posts/5768f419/</url>
    <content><![CDATA[<h2 id="Resource">Resource</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://choosealicense.com/">choosealicense</a></td>
<td>choosealicense</td>
<td>license 说明 </td>
</tr>
<tr>
<td><a href="https://opensource.guide/legal/#which-open-source-license-is-appropriate-for-my-project">opensource.guide</a></td>
<td>opensource</td>
<td>opensource guide</td>
</tr>
<tr>
<td><a href="https://en.wikipedia.org/wiki/Free-software_license">Free Software License</a></td>
<td>wikipedia</td>
<td>wiki</td>
</tr>
<tr>
<td><a href="https://spdx.org/licenses/">SPDX</a></td>
<td>spdx</td>
<td>SPDX License</td>
</tr>
</tbody>
</table>
<span id="more"></span>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>mamba 包管理器</title>
    <url>/posts/96bd41f/</url>
    <content><![CDATA[<h2 id="Mamba">Mamba</h2>
<p><a href="https://mamba.readthedocs.io/en/latest/index.html">Mamba</a> 是一个快速、健壮、跨平台的包管理器。</p>
<p>它在 Windows、OS X 和 Linux（包括 ARM64 和 PPC64LE）上运行，与 conda 软件包完全兼容，并支持大多数 conda 命令。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># upgrade all packages</span></span><br><span class="line">mamba update --all -y</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!CAUTION]<br>
mamba 自带的 conda 环境中的 python 在 windows 上编译需要附带设置 mamba 环境，否则运行会 <strong>crash</strong></p>
<ul class="lvl-1">
<li class="lvl-2"><code>PYTHONHOME=path-to-mambaforge-installation</code></li>
<li class="lvl-2"><code>PYTHONPATH=path-to-mambaforge-installation</code></li>
</ul>
</blockquote>
<span id="more"></span>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/conda-forge/miniforge">https://github.com/conda-forge/miniforge</a></p>
</li>
</ul>
<h2 id="conda">conda</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://anaconda.org/msclock/dashboard">https://anaconda.org/msclock/dashboard</a></p>
</li>
</ul>
<h2 id="设置国内源">设置国内源</h2>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 添加清华源</span></span><br><span class="line">conda config --add channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">conda config --add channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channel https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br></pre></td></tr></tbody></table></figure>
<h2 id="conda环境">conda 环境</h2>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 指定python版本创建版本</span></span><br><span class="line">conda create --name &lt;env_name&gt; python=3.7</span><br><span class="line"><span class="comment"># 重命名环境</span></span><br><span class="line">conda rename -n &lt;old_env_name&gt; &lt;new_env_name&gt;</span><br><span class="line"><span class="comment"># 删除环境</span></span><br><span class="line">conda remove --name &lt;env_name&gt; --all</span><br><span class="line"><span class="comment"># 激活</span></span><br><span class="line">conda activate &lt;env_name&gt;</span><br><span class="line"><span class="comment"># 查看可用环境</span></span><br><span class="line">conda info --envs</span><br></pre></td></tr></tbody></table></figure>
<h2 id="Auto-Integration">Auto Integration</h2>
<p>自动激活 conda 环境</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 集成 powershell, -d == --dry-run</span></span><br><span class="line">conda init powershell [-d]</span><br><span class="line">conda init --all -d</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>k8s</title>
    <url>/posts/655061ae/</url>
    <content><![CDATA[<!--
k8s:
    aliyun 入门:https://developer.aliyun.com/learning/course/51?spm=a2c6h.12873639.article-detail.124.377a3155x8UJpu&scm=20140722.ID_community@@course@@51._.ID_community@@course@@51-OR_rec-V_1-RL_community@@article@@742566

https://thenewstack.io/tutorial-deploy-the-nvidia-gpu-operator-on-kubernetes-based-on-containerd-runtime/
 -->
<h2 id="resource">resource</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/bregman-arie/devops-exercises/blob/master/topics/kubernetes/README.md">devops-exercises</a></td>
<td>bregman-arie</td>
<td> 基础</td>
</tr>
</tbody>
</table>
<h2 id="k8s">k8s</h2>
<p>什么是 <a href="https://kubernetes.io/zh-cn/docs/home/">k8s</a></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>开源的容器编排工具</p>
</li>
<li class="lvl-2">
<p>由 google 开发</p>
</li>
<li class="lvl-2">
<p>帮助在不同的部署环境中管理容器应用</p>
</li>
</ul>
<p>k8s 解决的问题</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>将传统铁板一块的应用转为微服务管理</p>
</li>
<li class="lvl-2">
<p>增加容器的使用便利</p>
</li>
<li class="lvl-2">
<p>高效管理成千上百的容器的能力</p>
</li>
</ul>
<p>k8s 提供的编排功能</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>高可用且无关机时延</p>
</li>
<li class="lvl-2">
<p>可扩展性或高性能</p>
</li>
<li class="lvl-2">
<p>容灾，备份和还原</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://kubernetes.io/zh-cn/docs/tutorials/kubernetes-basics/">https://kubernetes.io/zh-cn/docs/tutorials/kubernetes-basics/</a></p>
</li>
</ul>
<span id="more"></span>
<h3 id="安装">安装</h3>
<p>docker runtime 安装 k8s</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install ca-certificates curl gnupg</span><br><span class="line">install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb [arch="</span>$(dpkg --print-architecture)<span class="string">" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  "</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$VERSION_CODENAME</span>"</span>)<span class="string">" stable"</span> | <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">apt update &amp;&amp; apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"><span class="comment"># debian</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install ca-certificates curl gnupg</span><br><span class="line">install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb [arch="</span>$(dpkg --print-architecture)<span class="string">" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">  "</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">"<span class="variable">$VERSION_CODENAME</span>"</span>)<span class="string">" stable"</span> | <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">apt update &amp;&amp; apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置docker</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;/etc/docker/daemon.json&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">{</span></span><br><span class="line"><span class="string">  "default-runtime": "nvidia",</span></span><br><span class="line"><span class="string">  "exec-opts": [</span></span><br><span class="line"><span class="string">    "native.cgroupdriver=systemd"</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "runtimes": {</span></span><br><span class="line"><span class="string">    "nvidia": {</span></span><br><span class="line"><span class="string">      "args": [],</span></span><br><span class="line"><span class="string">      "path": "nvidia-container-runtime"</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  "builder": {</span></span><br><span class="line"><span class="string">    "gc": {</span></span><br><span class="line"><span class="string">      "defaultKeepStorage": "20GB",</span></span><br><span class="line"><span class="string">      "enabled": true</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  "experimental": true,</span></span><br><span class="line"><span class="string">  "features": {</span></span><br><span class="line"><span class="string">    "buildkit": true</span></span><br><span class="line"><span class="string">  },</span></span><br><span class="line"><span class="string">  "insecure-registries": [</span></span><br><span class="line"><span class="string">    "harbor.baijiayun.com",</span></span><br><span class="line"><span class="string">    "docker.huaguisystems.com"</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  "registry-mirrors": [</span></span><br><span class="line"><span class="string">    "https://docker.mirrors.sjtug.sjtu.edu.cn",</span></span><br><span class="line"><span class="string">    "https://reg-mirror.qiniu.com"</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 k8s 软件工具</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update sysctl settings for Kubernetes networking</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;/etc/sysctl.d/kubernetes.conf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置k8s源并安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">yum updatee &amp;&amp; yum install -y kubelet kubeadm kubectl</span><br><span class="line"><span class="comment"># debian/ubuntu</span></span><br><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://apt.kubernetes.io/ kubernetes-xenial main"</span> | <span class="built_in">tee</span> -a /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"><span class="comment"># 国内</span></span><br><span class="line">curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main"</span> | <span class="built_in">tee</span> /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"></span><br><span class="line">apt update &amp;&amp; apt install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选:为kubelet 关闭交换优化性能</span></span><br><span class="line"></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos用于临时关闭 SELinux 安全策略</span></span><br><span class="line"></span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选:为了实现 docker 使用的 cgroup-driver 和 kubelet 使用的 cgroup 一致,根据具体情况修改kubelet 配置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'KUBELET_EXTRA_ARGS="--cgroup-driver=systemd"'</span> | <span class="built_in">tee</span> -a /etc/default/kubelet</span><br><span class="line"></span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></tbody></table></figure>
<p>配置 k8s 集群</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置需要的k8s镜像</span></span><br><span class="line">kubeadm config images list</span><br><span class="line">kubeadm config images list | xargs docker pull</span><br><span class="line"></span><br><span class="line">kubeadm init \</span><br><span class="line">    --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">    <span class="comment"># 根据网络配置api及service</span></span><br><span class="line">    <span class="comment"># --pod-network-cidr=10.244.0.0/16 \</span></span><br><span class="line">    <span class="comment"># --apiserver-advertise-address=10.16.8.135 \</span></span><br><span class="line">    <span class="comment"># --service-cidr=10.96.0.0/16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用阿里云镜像源</span></span><br><span class="line">kubeadm config images pull \</span><br><span class="line">    --image-repository registry.aliyuncs.com/google_containers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换时区到国内</span></span><br><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"><span class="comment">#安装ntpdate工具</span></span><br><span class="line">apt-get install ntpdate</span><br><span class="line"><span class="comment">#设置系统时间与网络时间同步</span></span><br><span class="line">ntpdate cn.pool.ntp.org</span><br><span class="line"><span class="comment">#然后将时间更新到硬件上：</span></span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></tbody></table></figure>
<p>containerd 安装 k8s</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置containerd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为kubelet 关闭交换优化性能</span></span><br><span class="line"></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update sysctl settings for Kubernetes networking</span></span><br><span class="line"><span class="built_in">cat</span> &gt;&gt;/etc/sysctl.d/kubernetes.conf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb https://apt.kubernetes.io/ kubernetes-xenial main"</span> | <span class="built_in">tee</span> -a /etc/apt/sources.list.d/kubernetes.list</span><br><span class="line"></span><br><span class="line">apt update &amp;&amp; apt install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line">containerd config default | <span class="built_in">tee</span> /etc/containerd/config.toml</span><br><span class="line">systemctl restart containerd</span><br><span class="line">systemctl status containerd</span><br><span class="line"><span class="comment"># https://www.youtube.com/watch?v=k3iexxiYPI8</span></span><br></pre></td></tr></tbody></table></figure>
<p>参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/396775382">0 基础搭建 gpu k8s</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/a2e44fe93f88">kubeadm 初始化踩坑</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/justmeandopensource/kubernetes">https://github.com/justmeandopensource/kubernetes</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/justmeandopensource/kubernetes/blob/master/docs/install-cluster-centos-7.md">https://github.com/justmeandopensource/kubernetes/blob/master/docs/install-cluster-centos-7.md</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/justmeandopensource/kubernetes/blob/master/docs/install-cluster-ubuntu-20.md">https://github.com/justmeandopensource/kubernetes/blob/master/docs/install-cluster-ubuntu-20.md</a></p>
</li>
</ul>
<h4 id="QA">QA</h4>
<h5 id="kubelet-service-failed">kubelet.service failed</h5>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: activating (auto-restart) (Result: exit-code) since Wed 2023-07-19 11:44:14 CST; 7s ago</span><br><span class="line">     Docs: https://kubernetes.io/docs/</span><br><span class="line">  Process: 2856971 ExecStart=/usr/bin/kubelet (code=exited, status=1/FAILURE)</span><br><span class="line"> Main PID: 2856971 (code=exited, status=1/FAILURE)</span><br><span class="line">    Tasks: 0</span><br><span class="line">   Memory: 0B</span><br><span class="line">   CGroup: /system.slice/kubelet.service</span><br><span class="line"></span><br><span class="line">Jul 19 11:44:14 localhost.localdomain systemd[1]: Unit kubelet.service entered failed state.</span><br><span class="line">Jul 19 11:44:14 localhost.localdomain systemd[1]: kubelet.service failed.</span><br></pre></td></tr></tbody></table></figure>
<p>kubelet 启动失败<br>
kubelet 服务启动失败。可以通过查看 kubelet 的日志来获取更多信息，使用以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">journalctl -fu kubelet</span><br><span class="line">journalctl -xe</span><br></pre></td></tr></tbody></table></figure>
<h5 id="validate-service-connection-CRI-v1-runtime-API-is-not-implemented">validate service connection: CRI v1 runtime API is not implemented</h5>
<p>错误日志:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[root@localhost ~]# containerd --version</span><br><span class="line">containerd containerd.io 1.6.21 3dce8eb055cbb6872793272b4f20ed16117344f8</span><br><span class="line">[root@localhost ~]# docker info |grep Cgroup</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line">WARNING: bridge-nf-call-ip6tables is disabled</span><br><span class="line"> Cgroup Version: 1</span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /var/lib/kubelet/kubeadm-flags.env</span><br><span class="line">--container-runtime=docker</span><br><span class="line">[root@localhost ~]# kubeadm init --pod-network-cidr=10.244.0.0/16</span><br><span class="line">[init] Using Kubernetes version: v1.27.3</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING Swap]: swap is enabled; production deployments should <span class="built_in">disable</span> swap unless testing the NodeSwap feature gate of the kubelet</span><br><span class="line">error execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">        [ERROR CRI]: container runtime is not running: output: <span class="keyword">time</span>=<span class="string">"2023-07-19T15:29:19+08:00"</span> level=fatal msg=<span class="string">"validate service connection: CRI v1 runtime API is not implemented for endpoint \"unix:///var/run/containerd/containerd.sock\": rpc error: code = Unimplemented desc = unknown service runtime.v1.RuntimeService"</span></span><br><span class="line">, error: <span class="built_in">exit</span> status 1</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>解决 1: 将 containerd 配置文件 /etc/containerd/config.toml 的 <code>containerd.toml中disabled_plugins = ["cri"]</code> 项<a href="https://zhuanlan.zhihu.com/p/602626745">注释</a></p>
<blockquote>
<p>[!TIP]<br>
cri 是 Container Runtime Interface 的缩写，这是 Kubernetes 用来与容器运行时进行交互的接口。如果在 containerd.toml 文件中禁用了 cri，那么 containerd 将无法作为 Kubernetes 的容器运行时使用.</p>
</blockquote>
<p>解决 2: 使用 Docker 作为其容器运行时。可以通过编辑 /etc/default/kubelet 文件来完成这个操作。在这个文件中，需要添加或修改以下行：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">KUBELET_EXTRA_ARGS=--container-runtime=docker</span><br></pre></td></tr></tbody></table></figure>
<p>然后，重新启动 kubelet 服务：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl restart kubelet</span><br></pre></td></tr></tbody></table></figure>
<h5 id="如何确定k8s运行时">如何确定 k8s 运行时</h5>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl describe nodes | grep <span class="string">'Container Runtime Version'</span></span><br></pre></td></tr></tbody></table></figure>
<p>基于 docker 为: <code>Container Runtime Version:  docker://24.0.4</code><br>
基于 containerd 为: <code>Container Runtime Version:  containerd://1.7.1-k3s1</code></p>
<h3 id="架构">架构</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>整体架构图<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/224032480.png" alt="k8s arch."></p>
</li>
<li class="lvl-2">
<p>控制面架构图<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/232926883.png" alt="image."></p>
</li>
<li class="lvl-2">
<p>多控制面及多节点架构<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/233246495.png" alt="image."></p>
</li>
</ul>
<h3 id="k8s-主要组件">k8s 主要组件</h3>
<h4 id="Node-Pod">Node &amp; Pod</h4>
<p>容器的抽象</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>pod 是 k8s 最小单元</p>
</li>
<li class="lvl-2">
<p>pod 是基于容器的抽象</p>
</li>
<li class="lvl-2">
<p>通常一个 pod 只包含一个应用</p>
</li>
<li class="lvl-2">
<p>每个 pod 都有 ip, 当 pod 挂掉时，重启的 pod 会生成新的 ip.</p>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/233722615.png" alt="image."></p>
<h4 id="Service-Ingress">Service &amp; Ingress</h4>
<p>容器间通信</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>service 持有不变的 ip.</p>
</li>
<li class="lvl-2">
<p>service 声明周期和 Pod 不是唯一绑定关系.</p>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/234254143.png" alt="image."></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ingress 为服务提供了统一的访问方式</p>
</li>
<li class="lvl-2">
<p>ingress 屏蔽了 ip 及 port 的传统方式</p>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/234920715.png" alt="image."></p>
<h4 id="ConfigMap-Secret">ConfigMap &amp; Secret</h4>
<p>容器运行外部配置</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ConfigMap 提供了容器外部配置管理方式</p>
</li>
<li class="lvl-2">
<p>Secret 提供加密数据的配置，可在 Deployment/Pod 中引用<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/235526389.png" alt="image."></p>
</li>
</ul>
<h4 id="Volume">Volume</h4>
<p>数据持久化</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>用于提供数据持久化配置</p>
</li>
<li class="lvl-2">
<p>本地机器，远程或集群外部位置<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221022/235806623.png" alt="image."></p>
</li>
</ul>
<h4 id="Deploment-StatefulSet">Deploment &amp; StatefulSet</h4>
<p>提供容器副本部署，deployment 下所有配置都由 k8s 处理</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Deploment 提供了多次多节点部署的能力 (replica)</p>
</li>
<li class="lvl-2">
<p>Deploment 节点间由 svc 提供统一访问 ip</p>
</li>
<li class="lvl-2">
<p>Deploment 多节点间提供了负载均衡能力</p>
</li>
<li class="lvl-2">
<p>StatefulSet 用于部署状态应用，如 MySQL,MonogDB,ES</p>
</li>
<li class="lvl-2">
<p>StatefulSet 部署 DB 并不容易，通常部署于 k8s 集群外<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/000713816.png" alt="image."></p>
</li>
</ul>
<h3 id="k8s-配置">k8s 配置</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>kubctl k8s cli</p>
</li>
<li class="lvl-2">
<p>yaml 配置声明模板</p>
</li>
<li class="lvl-2">
<p>etcd 保存了所有的 k8s 组件当前状态</p>
</li>
<li class="lvl-2">
<p>每个配置由 3 个部分组成 <strong>metadata</strong>, <strong>specification</strong>, <strong>status</strong></p>
</li>
<li class="lvl-2">
<p>status 由 k8s 从 控制面的 etcd 拉取结果 和 metadata/specification 对比生成</p>
</li>
</ul>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1)metadata of configuration</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="comment"># 2)specification of the kind</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="comment"># 3)status generated and added by k8s</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="k8s-yaml-完整配置">k8s yaml 完整配置</h3>
<p>流量请求路径</p>
<blockquote>
<p>browser -&gt; (webapp external service) -&gt; webapp(pod) -&gt; (mongodb internal service) -&gt; mongodb(pod)</p>
</blockquote>
<p>配置文件：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 1.configmap: mongo-config.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># config map name</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-config</span></span><br><span class="line"><span class="comment"># key-value format</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># mongo service and endpoint</span></span><br><span class="line">  <span class="attr">mongo-url:</span> <span class="string">mongo-service</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 2.secret: mongo-secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span> <span class="comment"># base64-encoded</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">mongo-user:</span> <span class="string">bW9uZ291c2Vy</span> <span class="comment"># echo -n mongouser | base64</span></span><br><span class="line">  <span class="attr">mongo-password:</span> <span class="string">bW9uZ29wYXNzd29yZA==</span> <span class="comment"># echo -n mongopassword | base64</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 3.mongo deployment: mongo.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-deployment</span></span><br><span class="line">  <span class="comment"># 1.can naming any k8s component a label</span></span><br><span class="line">  <span class="comment"># 2.label are key/value pairs</span></span><br><span class="line">  <span class="comment"># 3.identifier to a collection</span></span><br><span class="line">  <span class="comment"># 4.key app is used to matched in selector to connection between deployments and pods(connecting pods to deploments)</span></span><br><span class="line">  <span class="comment"># 5.connecting services to deployments</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mongo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mongo</span></span><br><span class="line">  <span class="comment"># 1.blueprint for pods</span></span><br><span class="line">  <span class="comment"># 2.apply to pod</span></span><br><span class="line">  <span class="comment"># 3.has its own "metadata" and "spec" section and configure for pod</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mongodb</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mongo:5.0</span> <span class="comment"># which image</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">27017</span></span><br><span class="line">        <span class="comment"># image init environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MONGO_INITDB_ROOT_USERTNAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="comment"># same as mongo-secret of memtadata in mongo-secret.yaml</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line">              <span class="comment"># same as mongo-user of data in mongo-secret.yaml</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">mongo-user</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MONGO_INITDB_ROOT_PASSWORD</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="comment"># same as mongo-secret of memtadata in mongo-secret.yaml</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line">              <span class="comment"># same as mongo-password of data in mongo-secret.yaml</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">mongo-password</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 4.mongo service: mongo.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># same as mongo-url in configmap to define the service url to mongo</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mongo-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># select pods to forwaord the request to service(connecting services to deployments)</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="comment"># same as app in template connecting service to Pods</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mongo</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># request-&gt; (port:27017)mongo service -&gt; (targetPort:27017)pod(contianerPort:27017)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="comment"># service port</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">      <span class="comment"># contianerPort of Deployment</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">27017</span> <span class="comment"># same as contianerPort in template</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 3.webapp deployment: webapp.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-deployment</span></span><br><span class="line">  <span class="comment"># 1.can naming any k8s component a label</span></span><br><span class="line">  <span class="comment"># 2.label are key/value pairs</span></span><br><span class="line">  <span class="comment"># 3.identifier to a collection</span></span><br><span class="line">  <span class="comment"># 4.key app is used to matched in selector to connection between deployments and pods</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webapp</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">webapp</span></span><br><span class="line">  <span class="comment"># main port: blueprint for pods</span></span><br><span class="line">  <span class="attr">template:</span> <span class="comment"># has its own "metadata" and "spec" section and configure for pod</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">webapp</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webapp</span></span><br><span class="line">        <span class="comment"># which image</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nanajanashia/k8s-demo-app:v1.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">3000</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">USER_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line">            <span class="attr">key:</span> <span class="string">mongo-user</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">USER_PWD</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">mongo-secret</span></span><br><span class="line">            <span class="attr">key:</span> <span class="string">mongo-password</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DB_URL</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">mongo-config</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">mongo-url</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># 4.webapp service: webapp.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># same as mongo-url in configmap</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webapp-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># Default = ClusterIp (an internal service)</span></span><br><span class="line">  <span class="comment"># NodePort here,NodePort Service is accessible on each worker node's ip address</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="comment"># select pods to forwaord the request to service</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="comment"># same as app in template connecting service to Pods</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">webapp</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="comment"># request-&gt; (port:3000)webapp service -&gt; (targetPort:3000)pod(contianerPort:3000)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="comment"># service port</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line">      <span class="comment"># contianerPort of Deployment</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">3000</span> <span class="comment"># same as contianerPort in template</span></span><br><span class="line">      <span class="comment"># expose the service on each node's ip at a static port &lt;NodeIP&gt;:&lt;NodePort&gt;(here 3000:30100)</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30100</span> <span class="comment"># 30000-32768</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f mongo-config.yaml</span><br><span class="line">kubectl apply -f mongo-secret.yaml</span><br><span class="line">kubectl apply -f mongo.yaml</span><br><span class="line">kubectl apply -f webapp.yaml</span><br><span class="line"><span class="comment"># interacting with k8s clusuter</span></span><br><span class="line">kubectl get all</span><br><span class="line">kubectl get configmap</span><br><span class="line">kubectl get secret</span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl get --<span class="built_in">help</span></span><br><span class="line">kubectl describe service webapp-service</span><br><span class="line">kubectl describe pod &lt; pod name &gt;</span><br><span class="line">kubectl logs &lt; pod name &gt; -f</span><br><span class="line">kubectl get svc</span><br><span class="line">kubectl get node</span><br><span class="line">kubectl get node -o wide <span class="comment"># It can be accessed in a browser at address internal-ip:30100</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Namespace">Namespace</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>提供以名字空间的方式管理资源</p>
</li>
<li class="lvl-2">
<p>每个名字空间需要定义自己的 configmap，不同空间通过 service 访问</p>
</li>
<li class="lvl-2">
<p>default 默认提供的名字空间，默认创建的资源都位于该空间下。</p>
</li>
<li class="lvl-2">
<p>kube-system 不要改动或创建该空间，提供了系统处理，master, kubectl 处理</p>
</li>
<li class="lvl-2">
<p>kube-public 提供了包含集群信息的 configMap 信息</p>
</li>
<li class="lvl-2">
<p>kube-node-lease 提供了感知节点心跳、节点可用</p>
</li>
</ul>
<p>通过 kubectl 创建</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># create namespace [namespace name]:创建名字空间</span></span><br><span class="line">kubectl create namespaec my-ns</span><br></pre></td></tr></tbody></table></figure>
<p>通过配置文件创建</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersioni:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-configmap</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">my-ns</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">db_url:</span> <span class="string">mysql-service.database</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="为什么用-Namespace">为什么用 Namespace</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>结构化管理组件</p>
</li>
<li class="lvl-2">
<p>团队间避免冲突</p>
</li>
<li class="lvl-2">
<p>共享服务</p>
</li>
<li class="lvl-2">
<p>命名空间限制访问及资源</p>
</li>
</ul>
<h4 id="在空间中创建组件">在空间中创建组件</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>当未指定空间时在默认空间创建</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f mysql-configmap.yaml</span><br><span class="line">kubectl get configmap</span><br><span class="line"><span class="comment"># 获取默认空间中的 configmap</span></span><br><span class="line">kubectl get configmap -n default</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Ingress">Ingress</h3>
<p>避免 service ip 及 port 暴露</p>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/220321961.png" alt="image."></p>
<p>External Service：通过分配 external IP 给服务 (nodePort of ports in Service)，使用 ip:port 外部访问</p>
<p>Ingress: 通过分配 routing 规则推动请求到内部服务 (internal service)，这里 http 只代表推动请求<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/220901029.png" alt="image."><br>
Host: 需为合理的域名地址，映射域名地址到节点 IP 为入口点<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/221238833.png" alt="image."></p>
<h4 id="配置-Ingress">配置 Ingress</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>匹配所有映射规则，可配置单个 domain 映射多服务 (多个 path) 或多 domain 映射规则</p>
</li>
<li class="lvl-2">
<p>管理所有重定向</p>
</li>
<li class="lvl-2">
<p>集群入口控制</p>
</li>
<li class="lvl-2">
<p>大多是由第三方实现，云服务商提供 Ingress 访问（自有虚拟负载均衡）</p>
</li>
<li class="lvl-2">
<p>K8s Nginx Ingress Controller（不需要自己实现）</p>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/221757290.png" alt="image."><br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/222351496.png" alt="image."></p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># dasahboard-ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dashboard-ingress</span></span><br><span class="line">  <span class="attr">namespacce:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">dashboard.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">        <span class="attr">serviceNamme:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">        <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f dashboard-ingress.yaml</span><br><span class="line"><span class="comment"># 查看 ingress ip</span></span><br><span class="line">kubectl get ingress -n kubernetes-dashboard --watch</span><br><span class="line">vim /etc/hosts <span class="comment"># add 'ip dashboard.com' domain map</span></span><br><span class="line"><span class="comment"># 查看 ingress 默认 backend</span></span><br><span class="line">kubectl describe ingress dashboard-ingress -n kubernetes-dashboard</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Ingress-常用配置方法">Ingress 常用配置方法</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>单个 domain 配置多个映射路径<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/224919614.png" alt="image."></p>
</li>
<li class="lvl-2">
<p>多个 host 配置<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/225016142.png" alt="image."></p>
</li>
<li class="lvl-2">
<p>https 配置<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/225210493.png" alt="image."></p>
</li>
</ul>
<h3 id="HPA、KPA">HPA、KPA</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>HPA（Horizontal Pod Autoscaler）：<a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/">HPA</a> 是一种 Kubernetes 控制器，用于根据 CPU 利用率或自定义指标自动调整 Pod 的副本数。当 Pod 的 CPU 利用率或自定义指标超过或低于一定阈值时，HPA 会自动增加或减少 Pod 的副本数，以确保应用程序的可用性和性能。要使用 HPA，需要在 Kubernetes 集群中启用 Metrics Server。</p>
</li>
<li class="lvl-2">
<p>KPA（Kubernetes Pod Autoscaler）：<a href="https://kubernetes.io/docs/tasks/run-application/autoscaling-pods/#autoscaling-based-on-memory-usage">KPA</a> 是一种 Kubernetes 控制器，用于根据内存使用率自动调整 Pod 的容器资源限制。当 Pod 的内存使用率超过一定阈值时，KPA 会自动增加 Pod 的容器资源限制，以确保应用程序的可用性和性能。与 HPA 不同，KPA 不会增加或减少 Pod 的副本数，而是仅调整 Pod 的容器资源限制。</p>
</li>
</ul>
<h3 id="持久化-in-k8s">持久化 in k8s</h3>
<!-- todo -->
<h3 id="调度节点">调度节点</h3>
<p><a href="https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/">scheduling</a>。</p>
<p>要将另一台机器加入到当前 Kubernetes 集群中，需要执行以下步骤：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在要加入集群的机器上安装 Kubernetes 组件，包括 kubelet、kubeadm 和 kubectl 等。</p>
</li>
<li class="lvl-2">
<p>在当前集群中的任意一台机器上运行以下命令，生成加入集群所需的 token：</p>
 <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></tbody></table></figure>
</li>
<li class="lvl-2">
<p>将第 2 步生成的加入集群的命令复制到要加入集群的机器上执行。例如：</p>
 <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">kubeadm join &lt;ip_address&gt;:&lt;port&gt; --token &lt;token&gt; --discovery-token-ca-cert-hash sha256:&lt;hash&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>其中，ip_address 和 port 是当前 Kubernetes 集群中某一台机器的地址和端口号，token 和 hash 是第 2 步生成的。</p>
</li>
<li class="lvl-2">
<p>等待几分钟，新的节点就会加入到集群中，并自动同步集群中的配置信息。</p>
</li>
<li class="lvl-2">
<p>可以使用 kubectl 命令查看新节点是否已经加入到集群中：</p>
 <figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></tbody></table></figure>
<p>如果新节点已经加入到集群中，那么可以看到它的状态为 Ready。</p>
</li>
</ul>
<h3 id="GPU">GPU</h3>
<!--
GPU Share https://github.com/AliyunContainerService/gpushare-scheduler-extender

    Example:
        https://www.jianshu.com/p/48a33e01230a

K8s:
    example:
        https://zhuanlan.zhihu.com/p/396775382
        https://developer.aliyun.com/article/742566
 -->
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 当部署单机k8s支持 GPU时，需要将control panel untaint，让master node 能调度</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/">https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://developer.nvidia.com/zh-cn/blog/improving-gpu-utilization-in-kubernetes/">https://developer.nvidia.com/zh-cn/blog/improving-gpu-utilization-in-kubernetes/</a></p>
</li>
</ul>
<h3 id="reference">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=s_o8dwzRlu4">https://www.youtube.com/watch?v=s_o8dwzRlu4</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=X48VuDVv0do">https://www.youtube.com/watch?v=X48VuDVv0do</a></p>
</li>
<li class="lvl-2">
<p><a href="http://docs.kubernetes.org.cn/227.html">http://docs.kubernetes.org.cn/227.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.kubernetes.org.cn/k8s">https://www.kubernetes.org.cn/k8s</a></p>
</li>
<li class="lvl-2">
<p><a href="https://kubernetes.io/docs/tutorials/">https://kubernetes.io/docs/tutorials/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://developers.redhat.com/topics/kubernetes">books</a></p>
</li>
<li class="lvl-2">
<p><a href="https://opensource.com/resources/what-is-kubernetes">opensource k8s</a></p>
</li>
</ul>
<h2 id="minikube">minikube</h2>
<p><a href="https://minikube.sigs.k8s.io/docs/">minikube</a> 是一个轻量级的 <a href="https://kubernetes.io/zh/docs/home/">Kubernetes</a> 实现，用于在本地机器上运行单节点 Kubernetes 集群。它支持多个驱动程序（Docker、containerd、cri-o、Podman 等），可以在 Linux、macOS 和 Windows 上运行。</p>
<h3 id="安装-2">安装</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux 上</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line"><span class="built_in">sudo</span> install minikube-linux-amd64 /usr/local/bin/minikube</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!TIP] 常见错误</p>
<p><strong>memory-swap is not allowed</strong></p>
<p>若在 docker 中使用 minikube，则需要为 docker 容器开启 privileged 权限。</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>macOS 上</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">brew install minikube</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>Windows 上</p>
</li>
</ul>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">choco install minikube</span><br></pre></td></tr></tbody></table></figure>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化/启动 minikube 环境</span></span><br><span class="line">minikube start --driver=docker [--memory=2g] [--kubernetes-version=1.22.1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止 minikube 环境</span></span><br><span class="line">minikube stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 minikube 环境</span></span><br><span class="line">minikube delete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 minikube 中查看 api version</span></span><br><span class="line">minikube kubectl -- api-versions</span><br><span class="line">kubectl api-versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 minikube 状态</span></span><br><span class="line">minikube status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 minikube IP</span></span><br><span class="line">minikube ip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 minikube 版本</span></span><br><span class="line">minikube version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 minikube dashboard</span></span><br><span class="line">minikube addons <span class="built_in">enable</span> metrics-server</span><br><span class="line">minikube dashboard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Kubernetes 代理</span></span><br><span class="line">kubectl proxy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 Kubernetes 代理</span></span><br><span class="line">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/</span><br></pre></td></tr></tbody></table></figure>
<h3 id="运行应用">运行应用</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个 deployment</span></span><br><span class="line">kubectl create deployment hello-minikube --image=k8s.gcr.io/echoserver:1.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露 deployment 服务</span></span><br><span class="line">kubectl expose deployment hello-minikube --<span class="built_in">type</span>=NodePort --port=8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务</span></span><br><span class="line">kubectl get services</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问服务</span></span><br><span class="line">minikube service hello-minikube</span><br></pre></td></tr></tbody></table></figure>
<h3 id="本地多集群模拟">本地多集群模拟</h3>
<p>在 minikube 中，如果需要创建多个本地集群，可以使用以下步骤：</p>
<p>使用不同的文件夹或文件名安装多个 minikube 实例。例如，可以使用以下命令安装两个 minikube 实例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安装多个 minikube 实例，创建两个名为 <code>cluster-1</code> 和 <code>cluster-2</code> 的本地集群。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube start -p cluster-1</span><br><span class="line">minikube start -p cluster-2</span><br><span class="line"><span class="comment"># 列出找到的集群</span></span><br><span class="line">minikube profile list</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>设置当前使用的 minikube 实例</p>
</li>
</ul>
<p>在使用多个 minikube 实例时，需要使用 <code>minikube profile</code> 命令来设置当前使用的 minikube 实例。例如，要使用 <code>cluster-1</code> 实例，可以使用以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube profile cluster-1</span><br></pre></td></tr></tbody></table></figure>
<p>然后，可以使用 <code>kubectl</code> 命令与该实例进行交互。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>删除 minikube 实例</p>
</li>
</ul>
<p>如果不再需要某个 minikube 实例，可以使用以下命令删除它：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">minikube delete -p cluster-1</span><br></pre></td></tr></tbody></table></figure>
<p>这将删除名为 <code>cluster-1</code> 的 minikube 实例。</p>
<h2 id="kind">kind</h2>
<p>使用 <a href="https://kind.sigs.k8s.io/docs/user/quick-start#installation">kind</a> 创建本地 cluster。</p>
<p>安装完成后，可以使用 kind 来管理 Kubernetes 集群。一些常用的命令包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>kind create cluster: 创建一个新的 Kubernetes 集群</p>
</li>
<li class="lvl-2">
<p>kind delete cluster: 删除当前的 Kubernetes 集群</p>
</li>
<li class="lvl-2">
<p>kind get clusters: 获取当前存在的 Kubernetes 集群</p>
</li>
<li class="lvl-2">
<p>kind load docker-image: 将本地的 Docker 镜像加载到 kind 集群中</p>
</li>
<li class="lvl-2">
<p>kind export kubeconfig: 将 kind 集群的 kubeconfig 导出到本地文件中</p>
</li>
<li class="lvl-2">
<p>kind get nodes: 获取 kind 集群中的节点</p>
</li>
</ul>
<h3 id="gpu-support">gpu support</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/kubernetes-sigs/kind/issues/3164">https://github.com/kubernetes-sigs/kind/issues/3164</a></p>
</li>
</ul>
<h2 id="kubectl">kubectl</h2>
<p>kubectl 是 Kubernetes 的命令行工具，用于管理 Kubernetes 集群，C/S 架构。</p>
<h3 id="安装-3">安装</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux 上</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -LO <span class="string">"https://dl.k8s.io/release/<span class="subst">$(curl -L -s https://dl.k8s.io/release/stable.txt)</span>/bin/linux/amd64/kubectl"</span></span><br><span class="line"><span class="built_in">chmod</span> +x kubectl</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> kubectl /usr/local/bin/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 kubectl 版本信息</span></span><br><span class="line">kubectl version --client</span><br><span class="line">kubectl version --client --output=yaml</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>macOS 上</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">brew install kubectl</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>Windows 上</p>
</li>
</ul>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">choco install kubernetes<span class="literal">-cli</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="基本使用-2">基本使用</h3>
<p>k8s cli 工具 kubectl，提供了操作基本组件及交互能力。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>create/edit/delete deployment: 基于 deployment 的 CRUD 操作</p>
</li>
<li class="lvl-2">
<p>get nodes/pod/service/replicaset/deployment: 查看 k8s 不同组件状态</p>
</li>
<li class="lvl-2">
<p>logs [pod name]: 调试 pod</p>
</li>
<li class="lvl-2">
<p>exec -it [pod name] – bash: 获取交互式终端</p>
</li>
<li class="lvl-2">
<p>describe pod [pod name]: 获取 pod 详情</p>
</li>
<li class="lvl-2">
<p>apply -f [file name]: 应用配置</p>
</li>
<li class="lvl-2">
<p>delete -f [file name]: 删除配置</p>
</li>
<li class="lvl-2">
<p>deployment 管理 replicaset</p>
</li>
<li class="lvl-2">
<p>replicaset 管理 pod</p>
</li>
<li class="lvl-2">
<p>pod 是容器的抽象</p>
</li>
</ul>
<p>示例：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 API Version</span></span><br><span class="line">kubectl api-version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Kubernetes 集群信息</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># subcommand</span></span><br><span class="line"><span class="comment">#   - pod</span></span><br><span class="line"><span class="comment">#   - service</span></span><br><span class="line"><span class="comment">#   - deployment</span></span><br><span class="line"><span class="comment">#   - replicaset</span></span><br><span class="line"><span class="comment">#   - configmap</span></span><br><span class="line"><span class="comment">#   - secret</span></span><br><span class="line"><span class="comment">#   - ingress</span></span><br><span class="line"><span class="comment">#   - pv</span></span><br><span class="line"><span class="comment">#   - pvc</span></span><br><span class="line"><span class="comment">#   - storageclass</span></span><br><span class="line"><span class="comment">#   - envet</span></span><br><span class="line"><span class="comment">#   - namespaces</span></span><br><span class="line"><span class="comment">#   - componentstatuses</span></span><br><span class="line"><span class="comment">#   - nodes</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Kubernetes 节点信息</span></span><br><span class="line">kubectl get [subcommand]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Kubernetes 详细信息</span></span><br><span class="line">kubectl describe pod [name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用 Kubernetes 资源</span></span><br><span class="line">kubectl apply -f [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 Kubernetes Pod</span></span><br><span class="line">kubectl delete pod [pod-name]</span><br><span class="line">kubectl delete pods -l &lt;label&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="持久化存储">持久化存储</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个 PVC</span></span><br><span class="line">kubectl apply -f https://k8s.io/examples/pods/storage/pv-claim.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Pod</span></span><br><span class="line">kubectl apply -f https://k8s.io/examples/pods/storage/pv-pod.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Pod</span></span><br><span class="line">kubectl get pod task-pv-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 Pod</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it task-pv-pod -- /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 Pod 中创建文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello World"</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出 Pod</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 Pod</span></span><br><span class="line">kubectl delete pod task-pv-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的 Pod</span></span><br><span class="line">kubectl apply -f https://k8s.io/examples/pods/storage/pv-pod.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Pod</span></span><br><span class="line">kubectl get pod task-pv-pod</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问 Pod</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it task-pv-pod -- /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件，输出 "Hello World"，说明 index.html 是被持久化在 PV 中的</span></span><br><span class="line"><span class="built_in">cat</span> /usr/share/nginx/html/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出 Pod</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 PVC</span></span><br><span class="line">kubectl delete pvc task-pv-claim</span><br></pre></td></tr></tbody></table></figure>
<h3 id="pod-调试">pod 调试</h3>
<p>查看及调试 pod 详情，<a href="https://kubernetes.io/zh-cn/docs/tasks/debug/debug-application/">k8s 官方 POD 调试参考</a>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 deployment: kubectl create deployment [pod name] --images=xxxx</span></span><br><span class="line">kubectl create deployment nginx-depl --image=nginx</span><br><span class="line"><span class="comment"># 编辑 deployment nginx-depl: kubectl edit deployment [pod name]</span></span><br><span class="line"><span class="comment"># 查看 pod 信息发现自动创建一个新 deployment(running)，旧的 deployment(terminating)。</span></span><br><span class="line">kubectl edit deployment nginx-depl</span><br><span class="line"><span class="comment"># 删除 deployment :kubectl delete deployment [pod name]</span></span><br><span class="line">kubectl delete deployment nginx-depl</span><br><span class="line"><span class="comment"># 查看 部署更新状态</span></span><br><span class="line">kubectl rollout status [pod-name]</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建 mongo depl</span></span><br><span class="line">kubectl create deployment mongo-depl --image=mongo</span><br><span class="line"><span class="comment"># 查看详情，状态为：mongo-depl(containerCreating)</span></span><br><span class="line">kubectl get pod</span><br><span class="line">kubectl describe pod mongo-depl-xxxx</span><br><span class="line"><span class="comment"># 查看 debug pod name: kubectl logs [pod name]</span></span><br><span class="line">kubectl logs mongo-depl-xxxx</span><br><span class="line"><span class="comment"># 进入容器查看 kubectl exec -it [pod name] -- /bin/bash</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it mongo-depl-xxxx --  bash</span><br></pre></td></tr></tbody></table></figure>
<h2 id="k3d">k3d</h2>
<h3 id="gpu-workload">gpu workload</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://k3d.io/v5.5.2/usage/advanced/cuda/#run-and-test-the-custom-image-with-k3d">https://k3d.io/v5.5.2/usage/advanced/cuda/#run-and-test-the-custom-image-with-k3d</a></p>
</li>
</ul>
<h2 id="kustomize">kustomize</h2>
<p><a href="https://github.com/kubernetes-sigs/kustomize">kustomize</a> 是一个用于 Kubernetes 部署的工具，它允许通过声明性配置来管理应用程序的部署。使用 Kustomize，可以轻松地管理多个环境（如开发、测试和生产）之间的差异，而无需为每个环境创建单独的部署文件。</p>
<p>Kustomize 使用 Kubernetes 的原生 API 来管理部署，因此它与 Kubernetes 的其他工具（如 kubectl）非常兼容。此外，Kustomize 还支持使用变量和模板来生成部署文件，使得管理大型应用程序变得更加容易。详情文档<a href="https://kubectl.docs.kubernetes.io/guides/">参考</a>。</p>
<h3 id="安装-4">安装</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>Linux</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -s <span class="string">"https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"</span>  | bash</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>Windows</p>
</li>
</ul>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">choco install kustomize</span><br></pre></td></tr></tbody></table></figure>
<h2 id="helm">helm</h2>
<h3 id="概念">概念</h3>
<p><a href="https://helm.sh/zh/">helm</a> 是 k8s 包管理 yaml 工具。</p>
<p>helm charts</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>一堆 yaml 文件</p>
</li>
<li class="lvl-2">
<p>使用 helm 创建自己的 charts</p>
</li>
<li class="lvl-2">
<p>推送 chars 到 helm 仓库</p>
</li>
<li class="lvl-2">
<p>使用现有的 helm chars</p>
</li>
<li class="lvl-2">
<p>使用模板引擎配置 yaml</p>
</li>
</ul>
<p>helm char 结构<br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/230523187.png" alt="image."></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.escapelife.site/posts/8ef3f56.html">helm 1 from escape</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.escapelife.site/posts/eb8ef4fd.html">helm 2 from escape</a></p>
</li>
</ul>
<h3 id="安装-5">安装</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 二进制下载安装</span></span><br><span class="line">wget -o helm.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz</span><br><span class="line">tar -zxvf helm.tar.gz</span><br><span class="line"><span class="comment"># 直接使用脚本安装</span></span><br><span class="line">curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash</span><br><span class="line"><span class="comment"># 国内安装 https://mirrors.huaweicloud.com/helm/</span></span><br><span class="line">wget -o helm.tar.gz https://mirrors.huaweicloud.com/helm/v3.12.2/helm-v3.12.2-linux-amd64.tar.gz</span><br><span class="line">tar -zxvf helm.tar.gz</span><br><span class="line"><span class="built_in">cp</span> linux-amd64/helm /usr/local/bin/</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://helm.sh/zh/docs/intro/install/">https://helm.sh/zh/docs/intro/install/</a></p>
</li>
</ul>
<h3 id="基本使用-3">基本使用</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># helm repo add [NAME] [URL] [flags]</span></span><br><span class="line">helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line">helm repo add brigade https://brigadecore.github.io/charts</span><br><span class="line">helm repo update</span><br><span class="line"></span><br><span class="line"><span class="comment"># helm install [NAME] [CHART] [flags]</span></span><br><span class="line"><span class="comment"># 使用 my-values.yaml 值覆盖模板值安装</span></span><br><span class="line">helm install --values=my-values.yaml &lt;charname&gt;</span><br><span class="line"><span class="comment"># 直接指定值覆盖安装,多个值用逗号隔开</span></span><br><span class="line">helm install --<span class="built_in">set</span> version=v2.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#  helm upgrade [RELEASE] [CHART] [flags]</span></span><br><span class="line">helm upgrade -i nvdp nvdp/nvidia-device-plugin \</span><br><span class="line">    --namespace nvdp \</span><br><span class="line">    --create-namespace \</span><br><span class="line">    --<span class="built_in">set</span>=runtimeClassName=nvidia \</span><br><span class="line">    --<span class="built_in">set</span>=image.repository=registry.gitlab.com/nvidia/kubernetes/device-plugin/staging/k8s-device-plugin \</span><br><span class="line">    --<span class="built_in">set</span>=image.tag=8b416016</span><br><span class="line"></span><br><span class="line"><span class="comment"># helm uninstall &lt;release_name&gt;</span></span><br><span class="line">helm uninstall nvdp</span><br></pre></td></tr></tbody></table></figure>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221023/230750437.png" alt="image."></p>
<h3 id="打包">打包</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>helm create --generated-from-existing</code></p>
</li>
</ul>
<p>helm create --generate-from-existing` 是 Helm 命令行工具中的一个命令，用于从现有的 Kubernetes 资源中生成 Helm 包的模板。</p>
<p>它的语法是：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">helm create &lt;chart-name&gt; --generate-from-existing &lt;existing-resource&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>其中，<code>&lt;chart-name&gt;</code> 是 Helm 包的名称，<code>&lt;existing-resource&gt;</code> 是现有的 Kubernetes 资源名称。</p>
<p>该命令将会从现有的 Kubernetes 资源中生成 Helm 包的模板，包括 <code>Chart.yaml</code>、<code>values.yaml</code> 和 <code>templates</code> 目录等文件。在生成的 Helm 包模板中，所有的 Kubernetes 资源将会被转换为 Helm 模板语法。</p>
<p>例如，假设我们有一个名为 <code>my-app</code> 的 Kubernetes 资源，我们可以使用以下命令生成一个 Helm 包模板：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">helm create my-chart --generate-from-existing my-app</span><br></pre></td></tr></tbody></table></figure>
<p>这将会在当前目录下生成一个名为 <code>my-chart</code> 的 Helm 包模板，其中包括 <code>Chart.yaml</code>、<code>values.yaml</code> 和 <code>templates</code> 目录等文件，所有的 Kubernetes 资源都会被转换为 Helm 模板语法。</p>
<p>需要注意的是，该命令只能生成基本的 Helm 包模板，仍然需要手动编辑以适应特定的需求。此外，该命令仅适用于 Kubernetes 资源，不适用于其他类型的资源。</p>
<h2 id="rancher">rancher</h2>
<p>rancher 是一个 全栈式 的 Kubernetes 容器管理平台，为提供在任何地方都能成功运行 Kubernetes 的工具。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://ranchermanager.docs.rancher.com/zh/">rancher 中文文档</a></p>
</li>
<li class="lvl-2">
<p><a href="http://mirror.rancher.cn/">rancher 国内镜像</a></p>
</li>
<li class="lvl-2">
<p><a href="https://forums.rancher.cn/">rancher 国内论坛</a></p>
</li>
</ul>
<h3 id="安装-6">安装</h3>
<!--
https://zhuanlan.zhihu.com/p/403539342
https://zhuanlan.zhihu.com/p/495279401
https://blog.csdn.net/burn_in_hell/article/details/122908503
https://blog.csdn.net/burn_in_hell/article/details/122850969
https://blog.csdn.net/u012751272/article/details/120566298

https://blog.csdn.net/qq_43792385/article/details/104424848
https://blog.csdn.net/qq_43792385/article/details/104692634
-->
<p>单节点通过容器安装，并访问浏览器访问 ip:443，设置 admin 密码，右下角可设置显示语言为简体中文。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker&nbsp;run&nbsp;-d&nbsp;--restart=unless-stopped&nbsp;\</span><br><span class="line">    --name rancher \</span><br><span class="line">    -p&nbsp;80:80&nbsp;-p&nbsp;443:443&nbsp;\</span><br><span class="line">    --privileged \</span><br><span class="line">    rancher/rancher:v2.5.9</span><br></pre></td></tr></tbody></table></figure>
<p>参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.rancher.cn/docs/rancher2/best-practices/use-in-china/_index">rancher 国内加速</a></p>
</li>
</ul>
<h3 id="App">App</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/chenshanhao2008/article/details/113826476">https://blog.csdn.net/chenshanhao2008/article/details/113826476</a></p>
</li>
</ul>
<h3 id="gpu">gpu</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/u012751272/article/details/118859135">https://blog.csdn.net/u012751272/article/details/118859135</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/u012751272/article/details/120566298">https://blog.csdn.net/u012751272/article/details/120566298</a></p>
</li>
</ul>
<h2 id="rke">rke</h2>
<p>Rancher Kubernetes Engine，简称 RKE，是一个经过 CNCF 认证的 Kubernetes 安装程序。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.rancher.cn/docs/rke/_index">https://docs.rancher.cn/docs/rke/_index</a></p>
</li>
</ul>
<h2 id="k3s">k3s</h2>
<p><a href="https://docs.k3s.io/zh/">K3s</a> 是一个轻量级的 Kubernetes 发行版，它针对边缘计算、物联网等场景进行了高度优化。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.rancher.cn/docs/k3s/_index">https://docs.rancher.cn/docs/k3s/_index</a></p>
</li>
<li class="lvl-2">
<p><a href="https://forums.rancher.cn/t/k3s/1416">使用国内资源安装 K3s 全攻略</a></p>
</li>
</ul>
<h3 id="安装-7">安装</h3>
<h4 id="Quickstart">Quickstart</h4>
<p>使用脚本部署<a href="https://docs.rancher.cn/docs/k3s/quick-start/_index/">快速部署</a></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -sfL https://get.k3s.io | sh -</span><br><span class="line"><span class="comment"># 国内加速</span></span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -</span><br><span class="line"><span class="comment"># 卸载时使用安装时的脚本卸载</span></span><br><span class="line">k3s-uninstall.sh</span><br></pre></td></tr></tbody></table></figure>
<p>运行此安装后，详情<a href="https://docs.rancher.cn/docs/k3s/quick-start/_index/">参考</a>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>K3s 服务将被配置为在节点重启后或进程崩溃或被杀死时自动重启.</p>
</li>
<li class="lvl-2">
<p>将安装其他实用程序，包括 kubectl, crictl, ctr, <a href="http://k3s-killall.sh">k3s-killall.sh</a> 和 <a href="http://k3s-uninstall.sh">k3s-uninstall.sh</a></p>
</li>
<li class="lvl-2">
<p>将 kubeconfig 文件写入到 /<code>etc/rancher/k3s/k3s.yaml</code>，由 K3s 安装的 kubectl 将自动使用该文件.</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看安装的k3s服务</span></span><br><span class="line">systemctl status k3s</span><br><span class="line">journalctl -u k3s</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Run-with-autok3s">Run with autok3s</h4>
<p><a href="https://docs.rancher.cn/docs/k3s/autok3s/_index">AutoK3s</a> 是用于简化 K3s 集群管理的轻量级工具，可以使用 AutoK3s 在任何地方运行 K3s 服务。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -itd  --name autok3s \</span><br><span class="line">  --restart=unless-stopped \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  cnrancher/autok3s:v0.6.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="Run-k3s-in-docker">Run k3s in docker</h4>
<p>在容器中运行 k3s 集群，镜像由 rancher 社区提供</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --privileged \</span><br><span class="line">  --name k3s-server-1 \</span><br><span class="line">  --hostname k3s-server-1 \</span><br><span class="line">  -p 6443:6443 \</span><br><span class="line">  -d rancher/k3s:v1.24.10-k3s1 \</span><br><span class="line">  server</span><br></pre></td></tr></tbody></table></figure>
<p>运行起来后，通过 kubeconfig 进行访问</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> k3s-server-1:/etc/rancher/k3s/k3s.yaml ~/.kube/config</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!TIP]<br>
如果需要 gpu 支持的 k3s 运行在容器中时，需要安装 cuda 及做相关<a href="https://gist.github.com/markrexwinkel/3607c7073f6f94f2f05d51ef48c04e32">配置</a></p>
</blockquote>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.k3s.io/advanced#running-k3s-in-docker">https://docs.k3s.io/advanced#running-k3s-in-docker</a></p>
</li>
</ul>
<h4 id="Run-k3s-Based-on-docker">Run k3s Based on docker</h4>
<p>k3s 默认使用自己维护的 <code>/var/lib/rancher/rke2/bin/containerd</code> 作为运行时。以 docker 作为运行时需要指定参数: <code>-s - --docker</code>.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -sfL https://get.k3s.io | sh -s - --docker</span><br><span class="line"><span class="comment">#  国内</span></span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_RKE2_MIRROR=cn sh -s - --docker</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!TIP]<br>
可以将 k3s 配置到使用 docker 的运行时，方便资源管理</p>
</blockquote>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.k3s.io/advanced#using-docker-as-the-container-runtime">https://docs.k3s.io/advanced#using-docker-as-the-container-runtime</a></p>
</li>
</ul>
<h4 id="Run-k3s-Based-on-containerd">Run k3s Based on containerd</h4>
<p>k3s 默认使用自己维护的 <code>/var/lib/rancher/rke2/bin/containerd</code> 作为运行时，如果需要用自定义的 containerd 时，需指定参数 <code>-s - --container-runtime-endpoint /run/containerd/containerd.sock</code></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用默认的containerd</span></span><br><span class="line">curl -sfL https://get.k3s.io | sh -</span><br><span class="line"><span class="comment"># 使用自定义的containerd</span></span><br><span class="line">curl -sfL https://get.k3s.io | sh -s - --container-runtime-endpoint /run/containerd/containerd.sock</span><br><span class="line"><span class="comment">#  国内</span></span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_RKE2_MIRROR=cn sh -s - --container-runtime-endpoint /run/containerd/containerd.sock</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!TIP]<br>
同时也可以将 docker 配置为使用自定义的 containerd, 方便资源管理</p>
</blockquote>
<p>编辑 Docker 的 daemon.json 文件（通常位于 /etc/docker/daemon.json），添加以下内容，然后重启 docker 服务 <code>systemctl restart docker</code>：</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="comment">// Set the execution options with native.cgroupdriver as systemd</span></span><br><span class="line">  <span class="attr">"exec-opts"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">"native.cgroupdriver=systemd"</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the log driver as json-file</span></span><br><span class="line">  <span class="attr">"log-driver"</span><span class="punctuation">:</span> <span class="string">"json-file"</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the log options with a maximum size of 100m</span></span><br><span class="line">  <span class="attr">"log-opts"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"max-size"</span><span class="punctuation">:</span> <span class="string">"100m"</span></span><br><span class="line">  <span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the storage driver as overlay2</span></span><br><span class="line">  <span class="attr">"storage-driver"</span><span class="punctuation">:</span> <span class="string">"overlay2"</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set the containerd socket path</span></span><br><span class="line">  <span class="attr">"containerd"</span><span class="punctuation">:</span> <span class="string">"/run/containerd/containerd.sock"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<p>这样，k3s 和 Docker 就会使用同一个 containerd 实例作为其容器运行时，在不考虑 docker 时优先使用 containerd。</p>
<h4 id="QA-2">QA</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>/var/lib/kubelet目录报Device or resource busy</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 先卸载,再删除</span></span><br><span class="line">umount $(<span class="built_in">df</span> -HT | grep <span class="string">'/var/lib/kubelet'</span> | awk <span class="string">'{print $7}'</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="访问集群">访问集群</h3>
<p>存储在 <code>/etc/rancher/k3s/k3s.yaml</code> 的是部署的 k3 集群的 kubeconfig 文件，用于对 Kubernetes 集群的访问</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> KUBECONFIG=/etc/rancher/k3s/k3s.yaml</span><br><span class="line">kubectl get pods --all-namespaces</span><br><span class="line">helm <span class="built_in">ls</span> --all-namespaces</span><br></pre></td></tr></tbody></table></figure>
<p>直接指定 kubeconfig</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl --kubeconfig /etc/rancher/k3s/k3s.yaml get pods --all-namespaces</span><br><span class="line">helm --kubeconfig /etc/rancher/k3s/k3s.yaml <span class="built_in">ls</span> --all-namespaces</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.rancher.cn/docs/k3s/cluster-access/_index">https://docs.rancher.cn/docs/k3s/cluster-access/_index</a></p>
</li>
</ul>
<h3 id="gpu-on-k3s">gpu on k3s</h3>
<p>Step 1, 准备节点 (驱动等)<br>
Step 2, 安装 k8s nvidia plugins<br>
Step 3, benchmark 测试</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/NVIDIA/k8s-device-plugin">https://github.com/NVIDIA/k8s-device-plugin</a></p>
</li>
</ul>
<h4 id="Based-on-docker">Based on docker</h4>
<p>根据 k3s <a href="https://docs.k3s.io/advanced#nvidia-container-runtime-support">文档</a> , 注册 RuntimeClass 及 nvidia 设备发现及调度插件.</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">node.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RuntimeClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nvidia</span></span><br><span class="line"><span class="attr">handler:</span> <span class="string">docker</span> <span class="comment"># change to `docker` for dockerd</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># the following is same as k3s based on containerd</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://opni.io/setup/gpu/#rke">https://opni.io/setup/gpu/#rke</a></p>
</li>
</ul>
<h4 id="Based-on-containerd">Based on containerd</h4>
<p>根据 k3s <a href="https://docs.k3s.io/advanced#nvidia-container-runtime-support">文档</a> , 注册 RuntimeClass 及 nvidia 设备发现及调度插件.</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">node.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RuntimeClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nvidia</span></span><br><span class="line"><span class="attr">handler:</span> <span class="string">nvidia</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># From https://github.com/NVIDIA/gpu-feature-discovery/blob/main/deployments/static/nfd.yaml</span></span><br><span class="line"><span class="comment"># Modified to set `runtimeClassName: nvidia`, as k3s does not replace the default container runtime</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-feature-discovery</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfd-master</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">node-feature-discovery</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfd-master</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfd-master</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfd-master</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfd-master</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">node-feature-discovery</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nfd</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfd</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">node-feature-discovery</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nfd</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfd</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">nfd-master</span></span><br><span class="line">      <span class="attr">runtimeClassName:</span> <span class="string">nvidia</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">fieldRef:</span></span><br><span class="line">                <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/kubernetes_incubator/node-feature-discovery:v0.6.0</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">nfd-master</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"nfd-master"</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"--extra-label-ns=nvidia.com"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">            <span class="attr">valueFrom:</span></span><br><span class="line">              <span class="attr">fieldRef:</span></span><br><span class="line">                <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">quay.io/kubernetes_incubator/node-feature-discovery:v0.6.0</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">nfd-worker</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"nfd-worker"</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"--sleep-interval=60s"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"--options={\"sources\": {\"pci\": { \"deviceLabelFields\": [\"vendor\"] }}}"</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-boot</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">"/host-boot"</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-os-release</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">"/host-etc/os-release"</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-sys</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">"/host-sys"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source-d</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">"/etc/kubernetes/node-feature-discovery/source.d/"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">features-d</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">"/etc/kubernetes/node-feature-discovery/features.d/"</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-boot</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">"/boot"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-os-release</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">"/etc/os-release"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">host-sys</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">"/sys"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">source-d</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">"/etc/kubernetes/node-feature-discovery/source.d/"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">features-d</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">"/etc/kubernetes/node-feature-discovery/features.d/"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># From https://github.com/NVIDIA/gpu-feature-discovery/blob/main/deployments/static/gpu-feature-discovery-daemonset.yaml</span></span><br><span class="line"><span class="comment"># Modified to set `runtimeClassName: nvidia`, as k3s does not replace the default container runtime</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gpu-feature-discovery</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">node-feature-discovery</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">gpu-feature-discovery</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.6</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">nvidia-gpu</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">gpu-feature-discovery</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">nvidia-gpu</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">gpu-feature-discovery</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.6</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/part-of:</span> <span class="string">nvidia-gpu</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">runtimeClassName:</span> <span class="string">nvidia</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nvcr.io/nvidia/gpu-feature-discovery:v0.6.1</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">gpu-feature-discovery</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">output-dir</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">"/etc/kubernetes/node-feature-discovery/features.d"</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dmi-product-name</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">"/sys/class/dmi/id/product_name"</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MIG_STRATEGY</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">none</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">feature.node.kubernetes.io/pci-10de.present:</span> <span class="string">"true"</span> <span class="comment"># NVIDIA vendor ID</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">output-dir</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">"/etc/kubernetes/node-feature-discovery/features.d"</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dmi-product-name</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">"/sys/class/dmi/id/product_name"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># From https://github.com/NVIDIA/k8s-device-plugin/blob/master/nvidia-device-plugin.yml</span></span><br><span class="line"><span class="comment"># Modified to set `runtimeClassName: nvidia`, as k3s does not replace the default container runtime</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nvidia-device-plugin-daemonset</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nvidia-device-plugin-ds</span></span><br><span class="line">  <span class="attr">updateStrategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nvidia-device-plugin-ds</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">tolerations:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">nvidia.com/gpu</span></span><br><span class="line">        <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">        <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">      <span class="comment"># Mark this pod as a critical add-on; when enabled, the critical add-on</span></span><br><span class="line">      <span class="comment"># scheduler reserves resources for critical add-on pods so that they can</span></span><br><span class="line">      <span class="comment"># be rescheduled after a failure.</span></span><br><span class="line">      <span class="comment"># See https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">"system-node-critical"</span></span><br><span class="line">      <span class="attr">runtimeClassName:</span> <span class="string">"nvidia"</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="comment"># The below image from gitlab works on the wsl2 from 2023/7/26, see</span></span><br><span class="line">      <span class="comment">#     - https://github.com/NVIDIA/k8s-device-plugin/issues/332#issuecomment-1650894074</span></span><br><span class="line">      <span class="comment">#     - https://gitlab.com/nvidia/kubernetes/device-plugin/container_registry</span></span><br><span class="line">      <span class="comment"># - image: registry.gitlab.com/nvidia/kubernetes/device-plugin/staging/k8s-device-plugin:8b416016</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">nvcr.io/nvidia/k8s-device-plugin:v0.14.1</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nvidia-device-plugin-ctr</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FAIL_ON_INIT_ERROR</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">"false"</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">capabilities:</span></span><br><span class="line">            <span class="attr">drop:</span> [<span class="string">"ALL"</span>]</span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">device-plugin</span></span><br><span class="line">            <span class="attr">mountPath:</span> <span class="string">/var/lib/kubelet/device-plugins</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">device-plugin</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/var/lib/kubelet/device-plugins</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># https://catalog.ngc.nvidia.com/orgs/nvidia/teams/k8s/containers/cuda-sample</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cuda-sample-vectoradd</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">  <span class="attr">runtimeClassName:</span> <span class="string">nvidia</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cuda-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda10.2</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="attr">limits:</span></span><br><span class="line">        <span class="attr">nvidia.com/gpu:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NVIDIA_VISIBLE_DEVICES</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">all</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NVIDIA_DRIVER_CAPABILITIES</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">all</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="Enable-with-helm">Enable with helm</h4>
<p>根据上面两种方式，需设置 runtimeClassName, 在使用 helm 安装 k8s-device-plugin 步骤如下:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: node.k8s.io/v1</span></span><br><span class="line"><span class="string">kind: RuntimeClass</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: nvidia</span></span><br><span class="line"><span class="string">handler: nvidia # 创建基于 containerd 的RuntimeClass, 使用dockerd时改为docker</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">helm repo add nvdp https://nvidia.github.io/k8s-device-plugin</span><br><span class="line"><span class="comment"># 参考镜像:https://gitlab.com/nvidia/kubernetes/device-plugin/container_registry</span></span><br><span class="line">helm upgrade -i nvdp nvdp/nvidia-device-plugin \</span><br><span class="line">    --namespace nvdp \</span><br><span class="line">    --create-namespace \</span><br><span class="line">    --<span class="built_in">set</span>=runtimeClassName=nvidia \</span><br><span class="line">    --<span class="built_in">set</span>=image.repository=registry.gitlab.com/nvidia/kubernetes/device-plugin/staging/k8s-device-plugin \</span><br><span class="line">    --<span class="built_in">set</span>=image.tag=8b416016</span><br><span class="line"></span><br><span class="line">helm upgrade -i nvdp nvdp/nvidia-device-plugin \</span><br><span class="line">    --namespace nvdp \</span><br><span class="line">    --create-namespace \</span><br><span class="line">    --version v0.14.1 \</span><br><span class="line">    --<span class="built_in">set</span>=runtimeClassName=nvidia \</span><br><span class="line">    --<span class="built_in">set</span>=image.repository=nvcr.io/nvidia/k8s-device-plugin</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/k3s-io/k3s/issues/4391#issuecomment-1320992062">https://github.com/k3s-io/k3s/issues/4391#issuecomment-1320992062</a></p>
</li>
</ul>
<h4 id="Test">Test</h4>
<p>测试 cuda sample.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/NVIDIA/k8s-device-plugin/tree/master#running-gpu-jobs</span></span><br><span class="line"><span class="comment"># Add runtimeClassName to request gpu scheduled.</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Pod</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: gpu-pod</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  restartPolicy: Never</span></span><br><span class="line"><span class="string">  runtimeClassName: nvidia</span></span><br><span class="line"><span class="string">  containers:</span></span><br><span class="line"><span class="string">    - name: cuda-container</span></span><br><span class="line"><span class="string">      image: nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda10.2</span></span><br><span class="line"><span class="string">      resources:</span></span><br><span class="line"><span class="string">        limits:</span></span><br><span class="line"><span class="string">          nvidia.com/gpu: 1 # requesting 1 GPU</span></span><br><span class="line"><span class="string">  tolerations:</span></span><br><span class="line"><span class="string">  - key: nvidia.com/gpu</span></span><br><span class="line"><span class="string">    operator: Exists</span></span><br><span class="line"><span class="string">    effect: NoSchedule</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.k3s.io/advanced#nvidia-container-runtime-support">https://docs.k3s.io/advanced#nvidia-container-runtime-support</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/rancher/rke2/issues/3385#issuecomment-1640611574">https://github.com/rancher/rke2/issues/3385#issuecomment-1640611574</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/k3s-io/k3s/issues/4391#issuecomment-1233314825">https://github.com/k3s-io/k3s/issues/4391#issuecomment-1233314825</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/NVIDIA/k8s-device-plugin#enabling-gpu-support-in-kubernetes">https://github.com/NVIDIA/k8s-device-plugin#enabling-gpu-support-in-kubernetes</a></p>
</li>
</ul>
<h3 id="k3s-registry-mirror">k3s registry mirror</h3>
<p>如果从国内环境安装 K3s 可能会遇到安装速度特别缓慢或者 time out 的情况，从以上的安装过程可以分析出主要由以下几个原因导致：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>K3s 的安装脚本 <a href="https://get.k3s.io">https://get.k3s.io</a> 存储在国外的服务器，从国内环境访问可能出现无法访问的情况</p>
</li>
<li class="lvl-2">
<p>K3s 默认安装 stable 版本，stable 对应的具体 K3s 版本是通过 <a href="https://update.k3s.io/v1-release/channels">https://update.k3s.io/v1-release/channels</a> 解析来的，而这个地址也是运行在一个国外的服务器上</p>
</li>
<li class="lvl-2">
<p>当通过 channel 解析出对应 K3s 的版本为：v1.25.3+k3s1，此时需要到 github 上拉取对应的 K3s 二进制文件。虽然这个二进制文件才几十兆，但国内环境访问 github 经常会出现无法访问的情况。</p>
</li>
</ul>
<p>配置国内镜像</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/rancher/k3s/registries.yaml</span></span><br><span class="line"><span class="string">mirrors:</span></span><br><span class="line"><span class="string">  "docker.io":</span></span><br><span class="line"><span class="string">    endpoint:</span></span><br><span class="line"><span class="string">      - "https://docker.mirrors.ustc.edu.cn" # 可根据需求替换 mirror 站点</span></span><br><span class="line"><span class="string">      - "https://registry-1.docker.io"</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">systemctl restart k3s</span><br><span class="line"><span class="comment"># 核查registry字段验证是否生效</span></span><br><span class="line">crictl info</span><br></pre></td></tr></tbody></table></figure>
<p>经过以上配置后，通过 K3s 拉取的镜像如果在配置的 mirror 站点中存在，那么将会从该站点拉取镜像。如果不存在，将会从默认的 <a href="http://docker.io">docker.io</a> 中拉取镜像。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://forums.rancher.cn/t/k3s/1416#k3s-mirror-4">配置 k3s registry.yml</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.k3s.io/installation/private-registry">https://docs.k3s.io/installation/private-registry</a></p>
</li>
</ul>
<h3 id="traefik">traefik</h3>
<p>默认情况下，K3s 1.21 及更高版本默认安装 Traefik v2。出于安全考虑，默认不公开 Traefik Dashboard。<a href="https://forums.rancher.cn/t/k3s-traefik-dashborad/699#traefik-v2-dashborad-3">参考</a></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://forums.rancher.cn/t/k3s-traefik-dashborad/699">如何在 K3s 中启用 traefik dashborad</a></p>
</li>
</ul>
<h3 id="crictl">crictl</h3>
<p><code>crictl</code> 是一个用于与 Kubernetes 中的容器运行时接口 (CRI) 进行交互的命令行工具。它允许在 Kubernetes 集群中管理容器和 Pod。它提供了创建、列出、启动、停止和删除容器等功能。</p>
<h4 id="基本使用-4">基本使用</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 显示容器运行时信息</span></span><br><span class="line">crictl info</span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">crictl images</span><br><span class="line"><span class="comment"># 查看pods</span></span><br><span class="line">crictl pods</span><br></pre></td></tr></tbody></table></figure>
<h4 id="–runtime-endpoint">–runtime-endpoint</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 通过环境变量指定运行时终端</span></span><br><span class="line"><span class="built_in">export</span> CONTAINER_RUNTIME_ENDPOINT=unix:///run/containerd/containerd.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过配置文件指定</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'runtime-endpoint: unix:///run/containerd/containerd.sock'</span> &gt;&gt; /etc/crictl.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令参数指定</span></span><br><span class="line">crictl --runtime-endpoint unix:///run/containerd/containerd.sock info</span><br></pre></td></tr></tbody></table></figure>
<h2 id="rke2">rke2</h2>
<p><a href="https://docs.rke2.io/zh/">rke2</a>，也被称为 RKE Government，是 Rancher 的下一代 Kubernetes 发行版</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.rancher.cn/docs/rke2/_index/">https://docs.rancher.cn/docs/rke2/_index/</a></p>
</li>
</ul>
<h3 id="安装-8">安装</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.rancher.cn/docs/rke2/install/quickstart/_index">快速部署</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">curl -sfL https://get.rke2.io | sh -</span><br><span class="line"><span class="comment"># 国内加速</span></span><br><span class="line">curl -sfL https://rancher-mirror.rancher.cn/rke2/install.sh | INSTALL_RKE2_MIRROR=cn sh -</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://forums.rancher.cn/t/rke2-rancher-ha/689">RKE2 安装 Rancher HA 的国内加速器</a></p>
</li>
</ul>
<h2 id="istio">istio</h2>
<p>解析微服务实践中网络稳定的痛点，实践中通常使用服务网格 <a href="https://www.youtube.com/watch?v=VAKotZT8SMI&amp;list=PLo0iJFLQIBEaqom6wvP9qsSJQalc2TkaQ">Service Mesh</a>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=16fgzklcF7Y">15min 入门</a></p>
</li>
</ul>
<h3 id="Service-Mesh-演化">Service Mesh 演化</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>代码逻辑处理网络可靠，难维护</p>
</li>
<li class="lvl-2">
<p>公共库，解决耦合</p>
</li>
<li class="lvl-2">
<p>代理，功能简陋</p>
</li>
<li class="lvl-2">
<p>Sidecar</p>
</li>
<li class="lvl-2">
<p>Service Mesh</p>
</li>
<li class="lvl-2">
<p>Service Mesh V2（加了控制平面）</p>
</li>
</ul>
<h3 id="Service-Mesh">Service Mesh</h3>
<blockquote>
<p>[!NOTE]<br>
A service mesh is a dedicated <strong>infrastructure layer</strong> for handling service-to-service communication.  It’s responsible for the reliable <strong>delivery of requests</strong> through the complex topology of services that comprise a modern,cloud native application.  In practice,the service mesh is typically implemented as an array of lightweight <strong>network proxies</strong> that are deployed alongside application code,<strong>without the application needing to be aware</strong>.</p>
</blockquote>
<p>服务网格是用于处理服务到服务通信的专用基础设施层。它负责通过组成现代云原生应用程序的复杂服务拓扑可靠地交付请求。在实践中，服务网格通常被实现为一组轻量级网络代理，它们与应用程序代码一起部署，而不需要应用程序察觉。即，应用中服务会有额外的 Sidecar 服务代理请求并可靠的提供通信的网络拓扑。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>流量控制</p>
<ul class="lvl-2">
<li class="lvl-4">路由</li>
<li class="lvl-4">超时重试</li>
<li class="lvl-4">故障处理</li>
</ul>
</li>
<li class="lvl-2">
<p>策略</p>
<ul class="lvl-2">
<li class="lvl-4">流量限制</li>
<li class="lvl-4">黑白名单</li>
</ul>
</li>
<li class="lvl-2">
<p>网络安全</p>
<ul class="lvl-2">
<li class="lvl-4">授权</li>
<li class="lvl-4">身份验证</li>
</ul>
</li>
<li class="lvl-2">
<p>可观察性</p>
<ul class="lvl-2">
<li class="lvl-4">指标搜集展示</li>
<li class="lvl-4">日志收集</li>
<li class="lvl-4">分布式跟踪</li>
</ul>
</li>
</ul>
<p>Service Mesh 标准：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>UDPA，同一的数据平面 API，为不同数据平面提供 API 接入。</p>
</li>
<li class="lvl-2">
<p>SMI，为用户提供统一的控制平面。</p>
</li>
</ul>
<h3 id="istio-2">istio</h3>
<h4 id="istio-定义">istio 定义</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>服务网格产品</p>
</li>
<li class="lvl-2">
<p>对应用层透平</p>
</li>
<li class="lvl-2">
<p>为微服务架构设计</p>
</li>
<li class="lvl-2">
<p>可连接、保护、控制遥测系统</p>
</li>
</ul>
<h4 id="istio-核心资源-CRD">istio 核心资源 CRD</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>虚拟服务（Virtual Service）</p>
<ul class="lvl-2">
<li class="lvl-4">将流量路由给定目标规则</li>
<li class="lvl-4">请求地址和真实工作负载解耦</li>
<li class="lvl-4">包含一组路由规则</li>
<li class="lvl-4">丰富的路由匹配规则</li>
</ul>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230421/065015394.png" alt="虚拟服务"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>目标规则（Destination Rule）</p>
<ul class="lvl-2">
<li class="lvl-4">定义虚拟服务路由到目标真实地址，即子集</li>
<li class="lvl-4">负载均衡，随机、权重、最小请求数</li>
</ul>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230421/065604918.png" alt="目标规则"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>网关（Gateway）</p>
<ul class="lvl-2">
<li class="lvl-4">管理进出网格的流量</li>
<li class="lvl-4">处在网格边界</li>
</ul>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230421/065816653.png" alt="网关"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>服务入口（Service Entry）</p>
<ul class="lvl-2">
<li class="lvl-4">把外部服务注册到网格中
<ul class="lvl-4">
<li class="lvl-6">为外部目标转发请求</li>
<li class="lvl-6">添加超时重试等策略</li>
<li class="lvl-6">扩展网络</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230421/070100196.png" alt="服务入口"></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>Sidecar</p>
<ul class="lvl-2">
<li class="lvl-4">调整 Envoy 代理接管的端口和协议</li>
<li class="lvl-4">限制 Envoy 代理可访问的服务</li>
</ul>
</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20230421/070244993.png" alt="Sidecar"></p>
<h4 id="可观测性">可观测性</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>可观察性！= 监控</p>
</li>
<li class="lvl-2">
<p>组成：指标、日志、追踪</p>
</li>
</ul>
<p>指标（Metrics）</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>以聚合方式监控和理解系统行为</p>
</li>
<li class="lvl-2">
<p>istio 中指标的分类</p>
<ul class="lvl-2">
<li class="lvl-4">代理级别指标（Proxy-level）</li>
<li class="lvl-4">服务级别指标（Service-level）</li>
<li class="lvl-4">控制平面指标（Control plane）</li>
</ul>
</li>
</ul>
<p>日志（Logging）</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>系统产生事件了解系统</p>
</li>
<li class="lvl-2">
<p>包含完整的元数据信息（目标、源）</p>
</li>
<li class="lvl-2">
<p>生成位置可选（本地、远端，如 filebeat）</p>
</li>
<li class="lvl-2">
<p>日志内容</p>
<ul class="lvl-2">
<li class="lvl-4">应用日志</li>
<li class="lvl-4"> Envoy 日志 <code>kubectl logs -l app=demo -c istio-proxy</code></li>
</ul>
</li>
</ul>
<p>追踪（Tracing）</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过追踪请求，了解服务调用关系</p>
</li>
<li class="lvl-2">
<p>常用于调用链的问题排查、性能分析等</p>
</li>
<li class="lvl-2">
<p>支持多种追踪系统（Jeager、Zipkin、Datadog）</p>
</li>
</ul>
<h4 id="安全架构">安全架构</h4>
<p>认证</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对等认证（Peer authentication）</p>
<ul class="lvl-2">
<li class="lvl-4">服务间身份认证</li>
<li class="lvl-4"> Mutual TLS(mTLS)</li>
</ul>
</li>
<li class="lvl-2">
<p>请求认证（Request authentication）</p>
<ul class="lvl-2">
<li class="lvl-4">终端用户身份认证</li>
<li class="lvl-4"> JSON Web Token(JWT)</li>
</ul>
</li>
</ul>
<p>授权</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>授权级别</p>
</li>
<li class="lvl-2">
<p>策略分发</p>
</li>
<li class="lvl-2">
<p>授权引擎</p>
</li>
<li class="lvl-2">
<p>无需显示启用</p>
</li>
</ul>
<h4 id="安装-9">安装</h4>
<p>配置安装 <a href="https://istio.io/latest/docs/setup/getting-started/#download">istio</a>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=voAyroDb6xk">istio setup in k8s</a></p>
</li>
</ul>
<blockquote>
<p>[!NOTE]<br>
istio 需要匹配 k8s 环境。</p>
<p><code>curl -L https://istio.io/downloadIstio | sh -</code></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">istioctl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要测试环境demo的话可将 profile 从 default 到 demo</span></span><br><span class="line"><span class="comment"># default for production</span></span><br><span class="line">istioctl manifest apply</span><br><span class="line"><span class="comment"># demo mode for learning</span></span><br><span class="line">istioctl manifest apply --<span class="built_in">set</span> profile=demo</span><br><span class="line"><span class="comment"># custom 增加 default + grafana</span></span><br><span class="line">istioctl manifest apply --<span class="built_in">set</span> addonComponents.grafana.enable=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 istio pod</span></span><br><span class="line">kubectl get ns</span><br><span class="line">kubectl get pod -n istio-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 istio crd/api</span></span><br><span class="line">kubectl get crd | grep istio</span><br><span class="line">kubectl api-resources | grep istio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">istioctl dashboard kiali</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个名称空间标签，以指示 istio 在以后部署应用程序时自动注入特使边车代理</span></span><br><span class="line">kubectl label namespace default istio-injection=enabled</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!TIP]<br>
可以部署 Bookinfo 应用，验证 istio。</p>
<p>示例部署 Bookinfo，并使用默认的 gateway 配置 ingressgateway，然后导出 8099 给外部访问。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml</span><br><span class="line">kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml</span><br><span class="line">kubectl port-forward svc/istio-ingressgateway 8099:80 -n istio-system</span><br><span class="line">curl localhost:8099/productpage</span><br></pre></td></tr></tbody></table></figure>
</blockquote>
<h4 id="Virtucal-Service-和-Destination-Rule">Virtucal Service 和 Destination Rule</h4>
<p>可实现的功能：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>按服务版本路由</p>
<ul class="lvl-2">
<li class="lvl-4">将流量都路由到 v1，samples/bookinfo/networking/virtual-service-all-v1.yaml</li>
</ul>
</li>
<li class="lvl-2">
<p>按比例流量区分</p>
</li>
<li class="lvl-2">
<p>根据匹配规则进行路由</p>
<ul class="lvl-2">
<li class="lvl-4">根据请求 url 前缀匹配，samples/bookinfo/networking/bookinfo-gateway.yaml</li>
</ul>
</li>
<li class="lvl-2">
<p>定义各种策略（负载均衡、连接池等）</p>
</li>
</ul>
<h2 id="knative">knative</h2>
<blockquote>
<p>[!NOTE]<br>
knative is an Open-Source Enterprise-level solution to build Serverless and Event Driven Applications.</p>
</blockquote>
<p>Knative 是一个企业级的开源软件构建无服务器和事件驱动应用程序的解决方案。</p>
<h3 id="knative-文档">knative 文档</h3>
<p>要了解如何在 Kubernetes 上使用 Knative，需要重点关注以下文档：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://knative.dev/docs/">Knative 官方文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://kubernetes.io/docs/home/">Kubernetes 官方文档</a></p>
</li>
<li class="lvl-2">
<p><a href="http://docs.kubernetes.org.cn/">Kubernetes 中文文档</a></p>
</li>
</ul>
<p>Knative 官方文档中的以下章节对于了解 Knative 也非常重要：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://knative.dev/docs/serving/">knative Serving</a></p>
</li>
<li class="lvl-2">
<p><a href="https://knative.dev/docs/eventing/">knative Eventing</a></p>
</li>
<li class="lvl-2">
<p><a href="https://knative.dev/docs/build/">knative Build</a></p>
</li>
</ul>
<h2 id="traefik-2">traefik</h2>
<p>Traefik 是一种流行的反向代理和负载均衡器，可用于将流量路由到不同的后端服务。它支持多种后端服务，例如 Docker，Kubernetes 和 Consul 等。Traefik 还提供了许多有用的功能，例如自动发现和自动配置。</p>
<p>参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.smarthomebeginner.com/traefik-docker-compose-guide-2022/">https://www.smarthomebeginner.com/traefik-docker-compose-guide-2022/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/htpcBeginner/docker-traefik">https://github.com/htpcBeginner/docker-traefik</a></p>
</li>
</ul>
<h3 id="traefik-示例">traefik 示例</h3>
<h4 id="docker-compose-示例">docker-compose 示例</h4>
<p>如果正在使用 Docker，则可以使用 Traefik 作为反向代理和负载均衡器。Traefik 可以自动发现 Docker 容器，并将流量路由到正确的容器。以下是一个示例 docker-compose 文件，其中包含 Traefik 和一个 Web 服务：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">traefik:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">traefik:v2.4</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"--api.insecure=true"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"--providers.docker=true"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"--providers.docker.exposedbydefault=false"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"--entrypoints.web.address=:80"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"traefik.enable=true"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"traefik.http.routers.web.rule=Host(`web.example.com`)"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"traefik.http.services.web.loadbalancer.server.port=80"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the lines to hosts and open example.com in browser</span></span><br><span class="line"><span class="comment"># 127.0.0.1 web.example.com</span></span><br></pre></td></tr></tbody></table></figure>
<p>在此示例中，Traefik 将监听端口 80，并将流量路由到 Web 服务。Web 服务使用 Traefik 标签来指示 Traefik 应该将其作为后端服务使用。Traefik 还使用标签来指定路由规则。</p>
<h4 id="k8s-示例">k8s 示例</h4>
<p>在 Kubernetes 中，Traefik 可以使用 Kubernetes Ingress 对象来路由流量。</p>
<p>要在 Kubernetes 中使用 Traefik，请按照以下步骤操作：</p>
<p>安装 Traefik Operator，Traefik Operator 是一个 Kubernetes 控制器，用于管理 Traefik 实例。可以使用 Helm Chart 安装 Traefik Operator。以下是安装 Traefik Operator 的命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">helm repo add traefik https://helm.traefik.io/traefik</span><br><span class="line">helm repo update</span><br><span class="line">helm install traefik-operator traefik/traefik-operator</span><br></pre></td></tr></tbody></table></figure>
<p>创建 Traefik 实例，要在 Kubernetes 中使用 Traefik，需要创建一个 Traefik 实例。可以使用 Traefik CRD（Custom Resource Definition）来定义 Traefik 实例。以下是一个示例 Traefik CRD：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">TraefikService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">traefik</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">api:</span></span><br><span class="line">    <span class="attr">dashboard:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">":80"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">":443"</span></span><br></pre></td></tr></tbody></table></figure>
<p>在此示例中，Traefik 将监听端口 80 和 8080，并将流量路由到正确的后端服务。Traefik 还将启用 Traefik Dashboard，并监听端口 8080。</p>
<p>要创建 Traefik 实例，请使用以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f traefik-crd.yaml</span><br></pre></td></tr></tbody></table></figure>
<p>创建网关，网关可以使用 k8s 网关或 traefik IngressRoute。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建 Ingress 对象</p>
</li>
</ul>
<p>要在 Kubernetes 中使用 Traefik 路由流量，需要创建一个 Ingress 对象。以下是一个示例 Ingress 对象：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">traefik.ingress.kubernetes.io/router.rule:</span> <span class="string">"Host(`example.com`)"</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">example.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">service:</span></span><br><span class="line">                <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">                <span class="attr">port:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">http</span></span><br></pre></td></tr></tbody></table></figure>
<p>在此示例中，Ingress 对象将流量路由到名为 “web” 的 Kubernetes Service。Traefik 将使用标签 “<a href="http://traefik.ingress.kubernetes.io/router.rule%E2%80%9D%E6%9D%A5%E6%8C%87%E5%AE%9A%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99%E3%80%82">traefik.ingress.kubernetes.io/router.rule” 来指定路由规则。</a></p>
<p>要创建 Ingress 对象，请使用以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f ingress.yaml</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建 Traefik IngressRoute</p>
</li>
</ul>
<p>在 Kubernetes 上使用 Traefik 的信息，并且想要了解如何使用 Traefik IngressRoute。Traefik IngressRoute 是 Traefik 的一种扩展，它提供了更多的路由选项和更好的可读性。要在 Kubernetes 中使用 Traefik IngressRoute 路由流量，需要创建一个 IngressRoute 对象。以下是一个示例 IngressRoute 对象：</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">traefik.containo.us/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IngressRoute</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">entryPoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">web</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">match:</span> <span class="string">Host(`example.com`)</span> <span class="string">&amp;&amp;</span> <span class="string">PathPrefix(`/web`)</span></span><br><span class="line">      <span class="attr">kind:</span> <span class="string">Rule</span></span><br><span class="line">      <span class="attr">services:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">          <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure>
<p>在此示例中，IngressRoute 对象将流量路由到名为 “web” 的 Kubernetes Service。Traefik 将使用标签 “match” 来指定路由规则。</p>
<p>要创建 IngressRoute 对象，请使用以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">kubectl apply -f ingressroute.yaml</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!NOTE]<br>
Traefik 和 Istio 是两个不同的工具，它们都可以用于在 Kubernetes 中管理流量路由和负载均衡，但它们的设计目标和功能略有不同。</p>
<p>Traefik 是一个轻量级的反向代理和负载均衡器，它专注于将流量路由到正确的后端服务。Traefik 提供了许多路由选项和可插拔的中间件，例如 TLS 证书管理和 HTTP 重定向。Traefik 还提供了一个易于使用的 Web UI，用于监视和管理流量路由。</p>
<p>相比之下，Istio 是一个更全面的服务网格解决方案，它提供了更多的功能，例如流量管理、安全性和可观察性。Istio 使用 Envoy 作为其数据平面，Envoy 是一个高性能的代理，它可以在应用程序和服务之间进行流量路由和负载均衡。Istio 还提供了一些高级功能，例如流量控制、故障注入和跟踪。</p>
<p>因此，如果只需要一个简单的反向代理和负载均衡器，Traefik 可能是更好的选择。但是，如果需要更全面的服务网格功能，例如流量管理和安全性，那么 Istio 可能更适合需求。</p>
</blockquote>
<h2 id="opentelemetry">opentelemetry</h2>
<p><a href="https://opentelemetry.io/">opentelemetry</a> 是一个 api、sdk 和工具的集合。使用它来检测、生成、收集和导出遥测数据 (度量、日志和跟踪)，以帮助分析软件的性能和行为。</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>markdown 实践</title>
    <url>/posts/96be88e3/</url>
    <content><![CDATA[<h2 id="markdown">markdown</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.jianshu.com/p/c2b75ff24c33">支持的语言</a></p>
</li>
</ul>
<h3 id="sub-and-sup">sub and sup</h3>
<p>兼容 html 写法。使用 <code>&lt;sup&gt;上标、&lt;sub&gt;下标</code></p>
<figure class="highlight md"><table><tbody><tr><td class="code"><pre><span class="line">X<span class="language-xml"><span class="tag">&lt;<span class="name">sub</span>&gt;</span></span>i<span class="language-xml"><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span></span><br><span class="line">H<span class="language-xml"><span class="tag">&lt;<span class="name">sub</span>&gt;</span></span>2<span class="language-xml"><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span>O  CO<span class="language-xml"><span class="tag">&lt;<span class="name">sub</span>&gt;</span></span>2<span class="language-xml"><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span></span><br><span class="line">益达<span class="language-xml"><span class="tag">&lt;<span class="name">sup</span>&gt;</span></span>TM<span class="language-xml"><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="mermaid">mermaid</h2>
<p><img data-src="https://s2.loli.net/2022/08/04/1bi4XfmCcVRvO9H.png" alt="20220804203030."></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mermaid-js.github.io/mermaid/#/">https://mermaid-js.github.io/mermaid/#/</a></p>
</li>
</ul>
<span id="more"></span>
<p>简单的 mermaid 流程图示例</p>
<pre><code class="highlight mermaid">graph LR
    方形[方形] --&gt;圆角(圆角)
    圆角 --&gt; 条件a{条件a}
    条件a --&gt;|a=1| 结果1[结果1]
    条件a --&gt;|a=2| 结果2[结果2]

    横向流程图[横向流程图] --&gt;|条件a| 纵向流程图[纵向流程图]

    流程图示例[流程图示例]--&gt;示例1[示例1]
    流程图示例--&gt;示例2[示例2]
    示例1--&gt;|示例a| 示例a说明[示例a说明]
    示例1--&gt;|示例b| 示例b说明[示例b说明]</code></pre>
<p>其中，graph 表示您正在绘制一个图表，LR 表示从左到右的方向，A 和 B 是节点，–&gt; 表示从 A 到 B 的连接，C 是一个条件节点，|a=1 | 表示如果条件 a 等于 1，则连接到 D 节点，|a=2 | 表示如果条件 a 等于 2，则连接到 E 节点。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mermaid.js.org/syntax/mindmap.html">mindmap</a></p>
</li>
</ul>
<pre><code class="highlight mermaid">mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularisation
        British popular psychology author Tony Buzan
    Research
      On effectiveness&lt;br/&gt;and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
    Tools
      Pen and paper
      Mermaid</code></pre>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>minio 实践</title>
    <url>/posts/7c5648b6/</url>
    <content><![CDATA[<h2 id="minio">minio</h2>
<p>部署 minio 非常灵活，以下是常用配置参数:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>address: Minio API 调用的地址 + 端口，其中地址可以是 IP 或者 host</p>
</li>
<li class="lvl-2">
<p>console-address: MinIO web 管理页面的地址 + 端口，其中地址同上</p>
</li>
</ul>
<span id="more"></span>
<h3 id="binary-deploy">binary deploy</h3>
<p>使用二进制部署</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O /usr/local/bin/minio https://dl.min.io/server/minio/release/linux-amd64/minio</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/minio</span><br><span class="line">minio server /data</span><br></pre></td></tr></tbody></table></figure>
<h3 id="docker-deploy">docker deploy</h3>
<p>使用 docker 命令部署</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=minio</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=minio123</span><br><span class="line"><span class="built_in">export</span> MINIO_ADDRESS_PORT=9000</span><br><span class="line"><span class="built_in">export</span> MINIO_CONSOLE_PORT=9001</span><br><span class="line"><span class="built_in">export</span> MINIO_DOCKER_NAME=minio</span><br><span class="line"><span class="built_in">export</span> MINIO_BUCKET=bucket_name</span><br><span class="line">docker run -p <span class="variable">$MINIO_ADDRESS_PORT</span>:9000 -p <span class="variable">$MINIO_CONSOLE_PORT</span>:9001 --name <span class="variable">$MINIO_DOCKER_NAME</span> \</span><br><span class="line">    -d --restart=always \</span><br><span class="line">    -e MINIO_ROOT_USER=<span class="variable">$MINIO_ROOT_USER</span> \</span><br><span class="line">    -e MINIO_ROOT_PASSWORD=<span class="variable">$MINIO_ROOT_PASSWORD</span> \</span><br><span class="line">    -v .data:/data \</span><br><span class="line">    -v .minio:/root/.minio \</span><br><span class="line">    minio/minio server /data --address <span class="string">":9000"</span> --console-address <span class="string">":9001"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mc 通过 link 操作使用 `容器名:内部port` 对api port访问</span></span><br><span class="line">docker run --<span class="built_in">rm</span> --<span class="built_in">link</span> <span class="variable">$MINIO_DOCKER_NAME</span> -e MINIO_BUCKET=<span class="variable">$MINIO_BUCKET</span> --entrypoint sh minio/mc -c <span class="string">"\</span></span><br><span class="line"><span class="string">  while ! nc -z minio 9000; do echo 'Wait minio to startup...' &amp;&amp; sleep 0.1; done; \</span></span><br><span class="line"><span class="string">  sleep 5 &amp;&amp; \</span></span><br><span class="line"><span class="string">  mc config host add myminio http://minio:9000 <span class="variable">$MINIO_ROOT_USER</span> <span class="variable">$MINIO_ROOT_PASSWORD</span> &amp;&amp; \</span></span><br><span class="line"><span class="string">  if ! mc ls myminio | grep --quiet <span class="variable">$MINIO_BUCKET</span>; then mc mb myminio/<span class="variable">$MINIO_BUCKET</span>; else echo 'bucket <span class="variable">$MINIO_BUCKET</span> already exists'; fi &amp;&amp; \</span></span><br><span class="line"><span class="string">  mc mb myminio/<span class="variable">$MINIO_BUCKET</span> &amp;&amp; \</span></span><br><span class="line"><span class="string">  mc policy download myminio/<span class="variable">$MINIO_BUCKET</span> \</span></span><br><span class="line"><span class="string">"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="docker-compose-deploy">docker-compose deploy</h3>
<p>使用 docker-compose 部署，参考如下:</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose.yml</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">minio:</span></span><br><span class="line">    <span class="comment"># 该镜像默认创建匿名卷 /data 用于持久化 minio 数据</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/minio:RELEASE.2023-06-02T23-17-26Z</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">${MINIO_ADDRESS_PORT:-9000}:9000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">${MINIO_CONSOLE_PORT:-9001}:9001</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_USER:</span> <span class="string">${MINIO_ROOT_USER:-minio}</span></span><br><span class="line">      <span class="attr">MINIO_ROOT_PASSWORD:</span> <span class="string">${MINIO_ROOT_PASSWORD:-minio123}</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">server</span> <span class="string">/data</span> <span class="string">--address</span> <span class="string">":9000"</span> <span class="string">--console-address</span> <span class="string">":9001"</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span></span><br><span class="line">        [</span><br><span class="line">          <span class="string">"CMD"</span>,</span><br><span class="line">          <span class="string">"curl"</span>,</span><br><span class="line">          <span class="string">"-f"</span>,</span><br><span class="line">          <span class="comment"># 测试命令通过 localhost:external-port 访问</span></span><br><span class="line">          <span class="comment"># "http://localhost:${MINIO_ADDRESS_PORT:-9000}/minio/health/live"</span></span><br><span class="line">          <span class="comment"># 测试命令通过 service-name:internal-port 访问</span></span><br><span class="line">          <span class="string">"http://minio:9000/minio/health/live"</span></span><br><span class="line">        ]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">create_models_buckets:</span></span><br><span class="line">    <span class="comment"># 使用 mc 工具创建桶 models</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">minio/mc:RELEASE.2023-05-30T22-41-38Z</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="attr">minio:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">service_healthy</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c 'mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER:-minio} ${MINIO_ROOT_PASSWORD:-minio123};</span></span><br><span class="line"><span class="string">      if ! mc ls myminio | grep --quiet models; then</span></span><br><span class="line"><span class="string">        mc mb myminio/models;</span></span><br><span class="line"><span class="string">      else</span></span><br><span class="line"><span class="string">        echo "bucket models already exists in host myminio";</span></span><br><span class="line"><span class="string">      fi;</span></span><br><span class="line"><span class="string">      mc anonymous set public myminio/models;</span></span><br><span class="line"><span class="string">      exit 0;'</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用环境变量配置启动端口</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">MINIO_ADDRESS_PORT=9999 docker-compose up --remove-orphans -V</span><br></pre></td></tr></tbody></table></figure>
<h2 id="mc">mc</h2>
<p>1，连接服务（hellominio）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mc config host add hellominio http://minio:9001 minio minio123</span><br><span class="line"></span><br><span class="line"><span class="comment">#msg：Added `hellominio` successfully.</span></span><br></pre></td></tr></tbody></table></figure>
<p>2，创建策略 （readwrite）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mc admin policy add hellominio readwrite readwrite.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件如下(readwrite.json )</span></span><br><span class="line"><span class="comment"># Added policy `readwrite` successfully.</span></span><br></pre></td></tr></tbody></table></figure>
<p>3, 创建用户 密码必须为 8 位以上 （用户名 hello 密码 hello123123）</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mc admin user add hellominio hello hello123123</span><br><span class="line"></span><br><span class="line"><span class="comment"># Added user `hello` successfully.</span></span><br></pre></td></tr></tbody></table></figure>
<p>4，成功创建用户后， 为该用户应用策略（readwrite）。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mc admin policy <span class="built_in">set</span> hellominio readwrite user=hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># Policy readwrite is set on user `hello`</span></span><br><span class="line"><span class="comment"># 到此登录后就可以正常使用了，继续分组管理用户</span></span><br></pre></td></tr></tbody></table></figure>
<p>5， 创建分组 (hellominiogroup)</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mc admin group add hellominio hellominiogroup hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># Added members {hello} to group hellominiogroup successfully.</span></span><br></pre></td></tr></tbody></table></figure>
<p>6, 成功创建组后，对该组应用策略。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mc admin policy <span class="built_in">set</span> hellominio readwrite group=newgroup</span><br><span class="line"></span><br><span class="line"><span class="comment"># Policy readwrite is set on group `newgroup`</span></span><br></pre></td></tr></tbody></table></figure>
<p>7，更改权限后 需重新导入</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mc admin policy add hellominio readwrite readwrite.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># Added policy `readwrite` successfully.</span></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>各种镜像源及使用方式</title>
    <url>/posts/bb9a901f/</url>
    <content><![CDATA[<p>本文注重于记录各种软件开发领域中的源，包括 Debian/Ubuntu，Centos/Redhat 等。</p>
<h2 id="Debian-Ubuntu">Debian/Ubuntu</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.debian.org/mirror/list.zh-cn.html">全球镜像站</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">tuna.tsinghua.edu.cn</a></p>
</li>
<li class="lvl-2">
<p><a href="https://leeyr.com/105.html">博客总结</a></p>
</li>
</ul>
<span id="more"></span>
<h3 id="使用">使用</h3>
<p>1．使用说明</p>
<p>一般情况下，将 /etc/apt/sources.list 文件中 Debian 默认的软件仓库地址和安全更新仓库地址修改为国内的镜像地址即可，<a href="http://xn--deb-eo8e44itv6a.debian.xn--orgsecurity-904s.debian.xn--orgmirrors-0x2pt12t.xxx.com">比如将 deb.debian.org 和 security.debian.org 改为 mirrors.xxx.com</a>，并使用 https 访问，可使用如下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sed -i <span class="string">"s@http://\(deb\|security\).debian.org@https://mirrors.xxx.com@g"</span> /etc/apt/sources.list</span><br></pre></td></tr></tbody></table></figure>
<p>修改之后再运行 <code>apt update</code> 更新索引。</p>
<p>2．国内常见镜像站点</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>阿里云镜像站</p>
</li>
</ul>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">deb https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb https://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class="line">deb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class="line">deb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class="line">deb-src https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>腾讯云镜像站</p>
</li>
</ul>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">deb https://mirrors.tencent.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb-src https://mirrors.tencent.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb https://mirrors.tencent.com/debian-security/ bullseye-security main</span><br><span class="line">deb-src https://mirrors.tencent.com/debian-security/ bullseye-security main</span><br><span class="line">deb https://mirrors.tencent.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb-src https://mirrors.tencent.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb https://mirrors.tencent.com/debian/ bullseye-backports main non-free contrib</span><br><span class="line">deb-src https://mirrors.tencent.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>网易镜像站</p>
</li>
</ul>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">deb https://mirrors.163.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb-src https://mirrors.163.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb https://mirrors.163.com/debian-security/ bullseye-security main</span><br><span class="line">deb-src https://mirrors.163.com/debian-security/ bullseye-security main</span><br><span class="line">deb https://mirrors.163.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb-src https://mirrors.163.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb https://mirrors.163.com/debian/ bullseye-backports main non-free contrib</span><br><span class="line">deb-src https://mirrors.163.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>华为镜像站</p>
</li>
</ul>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">deb https://mirrors.huaweicloud.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bullseye main non-free contrib</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian-security/ bullseye-security main</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian-security/ bullseye-security main</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bullseye-updates main non-free contrib</span><br><span class="line">deb https://mirrors.huaweicloud.com/debian/ bullseye-backports main non-free contrib</span><br><span class="line">deb-src https://mirrors.huaweicloud.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>清华大学镜像站</p>
</li>
</ul>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>中科大镜像站</p>
</li>
</ul>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/debian/ bullseye main contrib non-free</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/debian-security/ bullseye-security main contrib non-free</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/debian-security/ bullseye-security main contrib non-free</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Centos-Redhat">Centos/Redhat</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos/">tuna.tsinghua.edu.cn</a></p>
</li>
</ul>
<h2 id="pip">pip</h2>
<p>更多参考 pip 源配置<a href="python/pip%20install.md#pip%E6%8D%A2%E6%BA%90">参考</a>。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">https://mirror.sjtu.edu.cn/pypi/web/simple</span><br></pre></td></tr></tbody></table></figure>
<h2 id="npm">npm</h2>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 切换阿里源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></tbody></table></figure>
<h2 id="通用源仓库">通用源仓库</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://developer.aliyun.com/mirror/?utm_content=g_1000303593">aliyun</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mirrors.huaweicloud.com/">huawei</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mirror.sjtu.edu.cn/">上海交通大学</a></p>
</li>
<li class="lvl-2">
<p><a href="https://unicom.mirrors.ustc.edu.cn/help/index.html">ustc</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>network</title>
    <url>/posts/996635634/</url>
    <content><![CDATA[<h2 id="resource">resource</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/bregman-arie/devops-exercises#network">devops-exercises</a></td>
<td>bregman-arie</td>
<td> 基础</td>
</tr>
</tbody>
</table>
<h2 id="ipv4">ipv4</h2>
<h3 id="格式表示">格式表示</h3>
<p>IPv4 地址是 Internet Protocol Version 4 的缩写，它是一种在互联网上使用的网络地址。IPv4 地址由四个数字组成，每个数字在 0 到 255 之间，数字之间用点（.）分隔。例如，192.168.1.1 就是一个 IPv4 地址。</p>
<p>IPv4 地址的二进制表示是将每个数字转换为 8 位二进制数。例如，192.168.1.1 的二进制表示为：<code>11000000.10101000.00000001.00000001</code></p>
<span id="more"></span>
<h3 id="子网掩码">子网掩码</h3>
<p>子网掩码是用来判断任意一个 IP 地址是否属于某个子网的。子网掩码同样是由四个数字组成，每个数字在 0 到 255 之间，数字之间用点（.）分隔。例如，255.255.255.0 就是一个子网掩码。</p>
<p>子网掩码的二进制表示是将每个数字转换为 8 位二进制数。例如，255.255.255.0 的二进制表示为：<code>11111111.11111111.11111111.00000000</code></p>
<p>当将一个 IP 地址和子网掩码进行 AND 运算时，如果结果和网络地址相同，那么这个 IP 地址就属于这个子网。</p>
<h3 id="内网地址">内网地址</h3>
<p>内网 IP 地址的范围主要包括以下三个：</p>
<ol>
<li class="lvl-3">
<p>A 类：10.0.0.0 - 10.255.255.255</p>
</li>
<li class="lvl-3">
<p>B 类：172.16.0.0 - 172.31.255.255</p>
</li>
<li class="lvl-3">
<p>C 类：192.168.0.0 - 192.168.255.255</p>
</li>
</ol>
<p>这些范围的 IP 地址被保留用于私有网络，不会在公共互联网上使用。</p>
<h2 id="169-254-0-0-16">169.254.0.0/16</h2>
<p>在 <a href="http://tools.ietf.org/html/rfc5735">rfc5735</a> 里面有对所有特殊网络地址说明</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">169.254.0.0/16 - This is the "link local" block.  As described in</span><br><span class="line">   [RFC3927], it is allocated for communication between hosts on a</span><br><span class="line">   single link.  Hosts obtain these addresses by auto-configuration,</span><br><span class="line">   such as when a DHCP server cannot be found.</span><br></pre></td></tr></tbody></table></figure>
<p>该部分指出 <code>169.254.0.0/16</code> 是一个本地链接地址段；定义在 <code>rfc3927</code> ,</p>
<p><code>3927</code> 指出，在 <code>IP</code> 网络里，每台主机都需要一个 <code>IP</code> 地址，通常情况下是通过 <code>DHCP</code> 服务器自动分配，但某些特殊情况下，<code>DHCP</code> 分配失败或者没有 <code>DHCP</code> 服务器时，机器可以自己分配一个 <code>IP</code> 来完成这个工作。</p>
<p>就好比定义一个指针，正常情况下这个指针会被赋予某个数据类型的地址信息，但如果赋值失败的时候，不能什么都不做，也得给它赋值，通常是赋为 <code>NULL</code>；这个 <code>NULL</code> 就好比 <code>169.254.0.0/16</code>；</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>nvs</title>
    <url>/posts/d61c1ce/</url>
    <content><![CDATA[<h2 id="NVS-简介">NVS 简介</h2>
<p>NVS (Node Version Switcher) 是一个跨平台的 Node.js 版本管理工具，支持 Windows、macOS 和 Linux 系统。主要功能包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>多版本 Node.js 安装和管理</p>
</li>
<li class="lvl-2">
<p>自动切换项目指定版本</p>
</li>
<li class="lvl-2">
<p>轻量级且无依赖</p>
</li>
<li class="lvl-2">
<p>支持所有主流 shell 环境</p>
</li>
</ul>
<h2 id="安装-NVS">安装 NVS</h2>
<h3 id="1-从-GitHub-下载-msi-安装包">1. 从 GitHub 下载 msi 安装包</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>访问 <a href="https://github.com/jasongin/nvs/releases">nvs 的 GitHub Releases 页面</a>，下载最新版本的 nvs.msi 文件。</p>
</li>
<li class="lvl-2">
<p>双击安装文件，按照安装向导完成安装。</p>
</li>
</ul>
<h3 id="2-通过-winget-安装">2. 通过 winget 安装</h3>
<p>在命令提示符或 PowerShell 中运行以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">winget install jasongin.nvs</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<h3 id="3-通过-Chocolatey-安装">3. 通过 Chocolatey 安装</h3>
<p>如果你已经安装了 Chocolatey 包管理器，可以运行以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">choco install nvs</span><br></pre></td></tr></tbody></table></figure>
<h2 id="配置环境变量">配置环境变量</h2>
<h3 id="1-Git-Bash">1. Git Bash</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>在 Git 安装目录下找到或新建 <code>.bash_profile</code> 文件，添加以下代码：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span> . ~/.bashrc; <span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
</li>
<li class="lvl-2">
<p>在 <code>.bashrc</code> 文件中添加：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVS_HOME=<span class="variable">$LOCALAPPDATA</span>/nvs</span><br><span class="line">. <span class="variable">$NVS_HOME</span>/nvs.sh</span><br></pre></td></tr></tbody></table></figure>
</li>
</ul>
<h3 id="2-CMD">2. CMD</h3>
<p>运行以下命令：</p>
<figure class="highlight cmd"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> NVS_HOME=<span class="variable">%LOCALAPPDATA%</span>\nvs</span><br><span class="line">"<span class="variable">%NVS_HOME%</span>\nvs.<span class="built_in">cmd</span>" install</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-PowerShell">3. PowerShell</h3>
<p>运行以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="variable">$env</span>:NVS_HOME=<span class="string">"<span class="variable">$env</span>:LOCALAPPDATA\nvs"</span></span><br><span class="line">. <span class="string">"<span class="variable">$env</span>:NVS_HOME\nvs.ps1"</span> install</span><br></pre></td></tr></tbody></table></figure>
<h2 id="使用-nvs-管理-Node-js-版本">使用 nvs 管理 Node.js 版本</h2>
<h3 id="1-安装特定版本的-Node-js">1. 安装特定版本的 Node.js</h3>
<p>在命令行中运行以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvs add &lt;version&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>例如，安装 Node.js 22.11.0 版本：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvs add 22.11.0</span><br></pre></td></tr></tbody></table></figure>
<h3 id="2-切换到特定版本的-Node-js">2. 切换到特定版本的 Node.js</h3>
<p>运行以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvs use &lt;version&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-查看已安装的-Node-js-版本">3. 查看已安装的 Node.js 版本</h3>
<p>运行以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvs <span class="built_in">ls</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="4-设置默认-Node-js-版本">4. 设置默认 Node.js 版本</h3>
<p>运行以下命令：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvs <span class="built_in">link</span> &lt;version&gt;</span><br></pre></td></tr></tbody></table></figure>
<p>每次打开终端时都会自动使用该版本。</p>
<h2 id="进阶配置">进阶配置</h2>
<h3 id="1-配置-npm-全局模块安装路径">1. 配置 npm 全局模块安装路径</h3>
<p>为避免切换 Node.js 版本后重新安装全局模块，可以配置统一的全局模块安装路径：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建全局模块目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.npm-global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置npm使用该目录</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix ~/.npm-global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将该目录添加到PATH环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export PATH=~/.npm-global/bin:<span class="variable">$PATH</span>"</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></tbody></table></figure>
<h2 id="实用技巧">实用技巧</h2>
<h3 id="1-自动切换项目Node版本">1. 自动切换项目 Node 版本</h3>
<p>在项目根目录创建 <code>.node-version</code> 文件，写入需要的版本号：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"16.14.0"</span> &gt; .node-version</span><br></pre></td></tr></tbody></table></figure>
<p>nvs 会自动检测并使用该版本。</p>
<h3 id="2-查看远程可用版本">2. 查看远程可用版本</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvs remote</span><br></pre></td></tr></tbody></table></figure>
<h3 id="3-删除指定版本">3. 删除指定版本</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">nvs <span class="built_in">rm</span> 14.17.0</span><br></pre></td></tr></tbody></table></figure>
<h2 id="常见问题">常见问题</h2>
<h3 id="1-安装失败怎么办？">1. 安装失败怎么办？</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>确保有管理员权限</p>
</li>
<li class="lvl-2">
<p>检查网络连接</p>
</li>
<li class="lvl-2">
<p>尝试使用 <code>--verbose</code> 参数查看详细日志</p>
</li>
</ul>
<h3 id="2-版本切换不生效？">2. 版本切换不生效？</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>检查当前 shell 类型</p>
</li>
<li class="lvl-2">
<p>确保已正确配置环境变量</p>
</li>
<li class="lvl-2">
<p>重启终端尝试</p>
</li>
</ul>
<h2 id="参考资源">参考资源</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/jasongin/nvs">NVS 官方文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://nodejs.org/en/download/releases/">Node.js 版本发布</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>openvpn</title>
    <url>/posts/b4d2b7f5/</url>
    <content><![CDATA[<h2 id="OPENVPN">OPENVPN</h2>
<p>这里介绍了使用 openvpn 在 linux 上的使用。</p>
<span id="more"></span>
<h2 id="client">client</h2>
<p>安装 openvpn</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># redhat/centos</span></span><br><span class="line">yum install openvpn</span><br><span class="line"><span class="comment"># ubuntu/debian</span></span><br><span class="line">apt install openvpn</span><br></pre></td></tr></tbody></table></figure>
<p>设置配置 /etc/openvpn，在 client 中设置服务端提供的认证文件，启动连接，输入认证账户。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">openvpn --config [path to file .ovpn]</span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!CAUTION]<br>
连接 openvpn 会给分配新 ip，故服务器远程连接时，推荐在服务器容器中连接，避免影响主机网络环境。</p>
</blockquote>
<h3 id="连接">连接</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>连接参数</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">openvpn \</span><br><span class="line">--daemon \</span><br><span class="line">--<span class="built_in">cd</span> /etc/openvpn \</span><br><span class="line">--config client.ovpn \</span><br><span class="line">--auth-user-pass /etc/openvpn/passwd \</span><br><span class="line">--log-append /var/log/openvpn.log</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>参数说明</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">--daemon           <span class="comment"># 后台运行</span></span><br><span class="line">--<span class="built_in">cd</span>               <span class="comment"># 配置文件目录路径</span></span><br><span class="line">--config           <span class="comment"># 配置文件名称</span></span><br><span class="line">--auth-user-pass   <span class="comment"># 指定账号密码文件</span></span><br><span class="line">--log-append       <span class="comment"># 日志文件</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="自动连接配置">自动连接配置</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建 user/pass 认证文件</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'user\npassword'</span> &gt; password</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>配置 expect 实现自动输入 Private Password: <code>apt/yum install -y expect</code></p>
</li>
<li class="lvl-2">
<p>配置脚本 <code>connect.sh</code>，并给到执行权限: <code>chmod +x connect.sh</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect</span></span><br><span class="line"><span class="comment"># connect.sh</span></span><br><span class="line">spawn openvpn --<span class="built_in">cd</span> /etc/openvpn/ --config client/client.ovpn --auth-user-pass path-to-password</span><br><span class="line">match_max 100000</span><br><span class="line">expect <span class="string">"*?assword:*"</span></span><br><span class="line">send -- <span class="string">"private password here"</span></span><br><span class="line">send -- <span class="string">"\r"</span></span><br><span class="line">expect eof</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#!/usr/bin/env bash</span></span><br><span class="line">apt install -y --no-install-recommends openvpn expect</span><br><span class="line"><span class="built_in">cp</span> -r . /etc/openvpn/</span><br><span class="line"><span class="built_in">cd</span> /etc/openvpn || <span class="built_in">exit</span></span><br><span class="line">./connect.sh</span><br></pre></td></tr></tbody></table></figure>
<h2 id="reference">reference</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://baike.baidu.com/item/OpenVPN/10718662?fr=aladdin">https://baike.baidu.com/item/OpenVPN/10718662?fr=aladdin</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/394220984">https://zhuanlan.zhihu.com/p/394220984</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.php.cn/linux-483734.html">https://www.php.cn/linux-483734.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://unix.stackexchange.com/questions/9055/establish-openvpn-tunnel-in-bash-script">https://unix.stackexchange.com/questions/9055/establish-openvpn-tunnel-in-bash-script</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/11240184/pass-private-key-password-to-openvpn-command-directly-in-ubuntu-10-10">https://stackoverflow.com/questions/11240184/pass-private-key-password-to-openvpn-command-directly-in-ubuntu-10-10</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>proxy</title>
    <url>/posts/3b768905/</url>
    <content><![CDATA[<h2 id="Proxy">Proxy</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://v2rayse.com/">v2rayse</a></td>
<td>changfeng</td>
<td> 工具 / 节点 </td>
</tr>
<tr>
<td><a href="https://www.youtube.com/watch?v=qmRkvKo-KbQ">youtube bulianglin live</a></td>
<td>bulianglin</td>
<td> 节点 </td>
</tr>
<tr>
<td><a href="https://www.youtube.com/watch?v=N1Qyg0scz7g">youtube changfeng live</a></td>
<td>changfeng</td>
<td> 节点 </td>
</tr>
<tr>
<td><a href="https://sub.v1.mk/">sub converter</a></td>
<td>youshandefeiyang</td>
<td> 订阅转换 </td>
</tr>
<tr>
<td><a href="https://github.com/yaney01/Yaney01">Yaney01</a></td>
<td>Yaney01</td>
<td> 节点 </td>
</tr>
<tr>
<td><a href="https://github.com/Fndroid/clash_for_windows_pkg"><s>CFW</s></a></td>
<td>Fndroid</td>
<td> 桌面客户端 </td>
</tr>
<tr>
<td><a href="https://github.com/clash-verge-rev/clash-verge-rev">clash-verge-rev</a></td>
<td>clash-verge-rev</td>
<td> 桌面客户端 </td>
</tr>
<tr>
<td><a href="https://github.com/LibNyanpasu/clash-nyanpasu">clash-nyanpasu</a></td>
<td>clash-nyanpasu</td>
<td> 桌面客户端 </td>
</tr>
<tr>
<td><a href="https://www.speedtest.net">speedtest</a></td>
<td>speedtest</td>
<td> 网速测试 </td>
</tr>
<tr>
<td><a href="https://www.torproject.org/">torbrowser</a></td>
<td>torproject</td>
<td>darknet 内置 vpn 浏览器 </td>
</tr>
<tr>
<td><a href="https://github.com/vernesong/OpenClash">Openclash</a></td>
<td>openclash</td>
<td>openwrt clash tool</td>
</tr>
<tr>
<td><a href="https://www.myip.com/">myip</a></td>
<td>myip</td>
<td> 显示 ip</td>
</tr>
<tr>
<td><a href="ip.cn">ip.cn</a></td>
<td><a href="http://ip.cn">ip.cn</a></td>
<td> 显示 ip</td>
</tr>
<tr>
<td><a href="https://www.cloudflare-cn.com/">cloudflare</a></td>
<td>cloudflare</td>
<td> 免费加速 </td>
</tr>
<tr>
<td><a href="1.1.1.1">cloudflare app</a></td>
<td>cloudflare</td>
<td> 免费加速 </td>
</tr>
<tr>
<td><a href="fast.com">fast</a></td>
<td>fast</td>
<td> 测速 </td>
</tr>
<tr>
<td><a href="https://similarsites.com">similarsites</a></td>
<td>similarsites</td>
<td> 相似网站</td>
</tr>
<tr>
<td><a href="https://truth5.github.io/">梯子</a></td>
<td> truth5</td>
<td> 梯子</td>
</tr>
</tbody>
</table>
<h2 id="VPN">VPN</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/620722802">VPN 常识</a></p>
</li>
<li class="lvl-2">
<p><a href="https://clashdingyue.tk/2022/06/%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AEClash-For-Windows/">代理模式</a></p>
</li>
</ul>
<span id="more"></span>
<h3 id="clash">clash</h3>
<p>基于 clash 订阅到代理服务器进行代理访问</p>
<h4 id="公司内网访问">公司内网访问</h4>
<p>通常对内网访问会和 clash 走代理冲突，需要单独配置 rule 规则，对公司地址过滤</p>
<p>方法一，编辑对应的订阅地址的 yaml</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 这里设置走 google.com 直连，只需要替换成公司内网即可</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xxx.company.com.cn,DIRECT</span></span><br></pre></td></tr></tbody></table></figure>
<p>方法二，增加添加订阅地址预处理 profiles</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">parsers:</span> <span class="comment"># array</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">reg:</span> <span class="string">^.*$</span> <span class="comment"># 正则匹配订阅</span></span><br><span class="line">    <span class="attr">yaml:</span></span><br><span class="line">      <span class="attr">prepend-rules:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,xxx.company.com.cn,DIRECT</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="稳定节点">稳定节点</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># encode url</span></span><br><span class="line">python3 -c <span class="string">"from urllib.parse import quote;print('encode:\n',quote(''))"</span></span><br><span class="line"><span class="comment"># decode url</span></span><br><span class="line">python3 -c <span class="string">"from urllib.parse import unquote;print('decode:\n\n',unquote('').replace('||','\n\n'))"</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'decode:\n\n'</span>, unquote(<span class="string">''</span>).replace(<span class="string">'||'</span>,<span class="string">'\n\n'</span>))</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">ss://YWVzLTEyOC1nY206YS13eW00b3ZZNFl3@8.218.82.85:443/?plugin=v2ray-plugin%3Bmode%3Dwebsocket%3Bmux%3D4%3Bmux%3Dmux%3D4%3B%3B#%E9%A6%99%E6%B8%AF-796.7KB%2Fs</span><br><span class="line">ss://YWVzLTEyOC1nY206YS13eW00b3ZZNFl3@42.2.115.231:443/?plugin=v2ray-plugin%3Bmode%3Dwebsocket%3Bmux%3D4%3Bmux%3Dmux%3D4%3B%3B#%E9%A6%99%E6%B8%AF-1.49MB%2Fs</span><br><span class="line">ss://YWVzLTI1Ni1jZmI6cXdlclJFV1FAQA@211.201.169.70:54345#%E9%9F%A9%E5%9B%BD-8.98MB%2Fs</span><br><span class="line">ss://Y2hhY2hhMjAtaWV0Zi1wb2x5MTMwNTo2ZjkzMjA1Ny1mZmQ5LTQ0MjYtOGNhNy1mMDY1NGJhYmY4NGY@ddns.olucloud.subapi.cc:20009#%E4%B8%AD%E8%BD%AC%E8%8A%82%E7%82%B9-7.29MB%2Fs</span><br><span class="line">ss://YWVzLTEyOC1nY206YS13eW00b3ZZNFl3@47.243.196.229:443/?plugin=v2ray-plugin%3Bmode%3Dwebsocket%3Bmux%3D4%3Bmux%3Dmux%3D4%3B%3B#%E9%A6%99%E6%B8%AF-1.56MB%2Fs</span><br></pre></td></tr></tbody></table></figure>
<h4 id="订阅转换">订阅转换</h4>
<p><a href="https://github.com/youshandefeiyang/sub-web-modify">sub web modify</a> 订阅转换工具，方便将订阅转换到 clash 支持解析的链接使用</p>
<p>可以简单通过本地 docker 安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart unless-stopped \</span><br><span class="line">    --privileged=<span class="literal">true</span> \</span><br><span class="line">    -p 8090:80 \</span><br><span class="line">    --name sub-web-modify \</span><br><span class="line">    youshandefeiyang/sub-web-modify</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/youshandefeiyang/sub-web-modify">https://github.com/youshandefeiyang/sub-web-modify</a></p>
</li>
</ul>
<h4 id="搜集-clash-订阅">搜集 clash 订阅</h4>
<p>从 GitHub 获取的免费订阅如下</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/Pawdroid/Free-servers">https://github.com/Pawdroid/Free-servers</a></p>
</li>
<li class="lvl-2">
<p><a href="https://raw.githubusercontent.com/ripaojiedian/freenode/main/clash">https://raw.githubusercontent.com/ripaojiedian/freenode/main/clash</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/peasoft/NoMoreWalls">https://github.com/peasoft/NoMoreWalls</a></p>
</li>
<li class="lvl-2">
<p><a href="https://duangks.com/archives/141/">https://duangks.com/archives/141/</a></p>
</li>
</ul>
<p>从博客或 github 收集的日更节点地址</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://v2rayshare.com/wp-content/uploads/2023/03/20230320.yaml">https://v2rayshare.com/wp-content/uploads/2023/03/20230320.yaml</a></p>
</li>
<li class="lvl-2">
<p><a href="https://nodefree.org/dy/2024/06/20240607.yaml">https://nodefree.org/dy/2024/06/20240607.yaml</a></p>
</li>
</ul>
<!-- https://github.com/OpenRunner/clash-freenode -->
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://freenode.openrunner.net/uploads/20240607-clash.yaml">https://freenode.openrunner.net/uploads/20240607-clash.yaml</a></p>
</li>
</ul>
<h4 id="订阅采集节点池">订阅采集节点池</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://proxypool.neocities.org/">https://proxypool.neocities.org/</a></p>
</li>
<li class="lvl-2">
<p><a href="http://klausvpn.posyao.com/">http://klausvpn.posyao.com/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://proxies.haisto.cn/">https://proxies.haisto.cn/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://proxypool.fly.dev/">https://proxypool.fly.dev/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://free.dsdog.tk">https://free.dsdog.tk</a></p>
</li>
<li class="lvl-2">
<p><a href="https://free.jingfu.cf/">https://free.jingfu.cf/</a></p>
</li>
</ul>
<h4 id="节点筛选">节点筛选</h4>
<p>浏览器搜索关键词，搜索节点池页面显示的文字</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>共有抓取源</code></p>
</li>
</ul>
<p>找到的节点池</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://proxies.haisto.cn/clash">https://proxies.haisto.cn/clash</a></p>
</li>
<li class="lvl-2">
<p><a href="https://free.jingfu.cf/">https://free.jingfu.cf/</a></p>
</li>
</ul>
<h4 id="原始节点列表">原始节点列表</h4>
<p>原始节点池需要经过采集，验证，过滤，转换等步骤，才能用于 clash 订阅使用</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.bestproxyreviews.com/free-proxy-list/">https://www.bestproxyreviews.com/free-proxy-list/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://scrapingant.com/free-proxies/">https://scrapingant.com/free-proxies/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://proxypool.neocities.org/">https://proxypool.neocities.org/</a></p>
</li>
<li class="lvl-2">
<p><a href="http://free-proxy.cz/en">http://free-proxy.cz/en</a></p>
</li>
<li class="lvl-2">
<p><a href="https://stock.hostmonit.com/CloudFlareYes">https://stock.hostmonit.com/CloudFlareYes</a></p>
</li>
</ul>
<h3 id="可用订阅">可用订阅</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://mirror.ghproxy.com/https://raw.githubusercontent.com/ripaojiedian/freenode/main/clash">https://mirror.ghproxy.com/https://raw.githubusercontent.com/ripaojiedian/freenode/main/clash</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mirror.ghproxy.com/https://raw.githubusercontent.com/peasoft/NoMoreWalls/master/list.yml">https://mirror.ghproxy.com/https://raw.githubusercontent.com/peasoft/NoMoreWalls/master/list.yml</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mirror.ghproxy.com/https://raw.githubusercontent.com/peasoft/NoMoreWalls/master/list.meta.yml">https://mirror.ghproxy.com/https://raw.githubusercontent.com/peasoft/NoMoreWalls/master/list.meta.yml</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mirror.ghproxy.com/https://raw.githubusercontent.com/chengaopan/AutoMergePublicNodes/master/list.yml">https://mirror.ghproxy.com/https://raw.githubusercontent.com/chengaopan/AutoMergePublicNodes/master/list.yml</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mirror.ghproxy.com/https://raw.githubusercontent.com/msclock/ftw/master/list.meta.yml">https://mirror.ghproxy.com/https://raw.githubusercontent.com/msclock/ftw/master/list.meta.yml</a></p>
</li>
<li class="lvl-2">
<p><a href="https://nodefree.org/dy/2024/06/20240609.yaml">https://nodefree.org/dy/2024/06/20240609.yaml</a></p>
</li>
</ul>
<h3 id="wireguard">wireguard</h3>
<p>wireguard 客户端： <a href="https://www.wireguard.com/install/">https://www.wireguard.com/install/</a></p>
<h4 id="lingdu配置">lingdu 配置</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.freedidi.com/12653.html">https://www.freedidi.com/12653.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.freedidi.com/12659.html">https://www.freedidi.com/12659.html</a></p>
</li>
</ul>
<h3 id="cloudflare">cloudflare</h3>
<p>使用 <a href="https://1.1.1.1/">cloudlare</a> 方案注册账号，并选择加速方案</p>
<p>连上后，可通过访问 <code>https://www.cloudflare.com/cdn-cgi/trace</code>, 查看加速信息.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cloud.tencent.com/developer/article/2298094">https://cloud.tencent.com/developer/article/2298094</a></p>
</li>
<li class="lvl-2">
<p><a href="https://mailberry.com.cn/2023/07/free-use-warp-plus-24pb-and-zero-trust-unlimitl/">https://mailberry.com.cn/2023/07/free-use-warp-plus-24pb-and-zero-trust-unlimitl/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://adamtheautomator.com/cloudflare-warp/">https://adamtheautomator.com/cloudflare-warp/</a></p>
</li>
</ul>
<h4 id="客户端">客户端</h4>
<p>下载客户端，选择加速方案，如下:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用免费的 zero trust 方案即可.</p>
</li>
<li class="lvl-2">
<p>使用基于 telegram 提供的 <code>warp+bot</code> 机器人，生产密钥，更新下载的 cloudflare 的密钥.</p>
</li>
</ul>
<h4 id="warp-proxy">warp proxy</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/645099977">https://zhuanlan.zhihu.com/p/645099977</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/hausa-han/Cloudflare-WARP-proxy">https://github.com/hausa-han/Cloudflare-WARP-proxy</a></p>
</li>
<li class="lvl-2">
<p><a href="https://p3terx.com/archives/cloudflare-warp-configuration-script.html">https://p3terx.com/archives/cloudflare-warp-configuration-script.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://forum.openwrt.org/t/is-there-any-way-to-implement-cloudflare-warp-free-vpn-in-openwrt-router/149839">https://forum.openwrt.org/t/is-there-any-way-to-implement-cloudflare-warp-free-vpn-in-openwrt-router/149839</a></p>
</li>
</ul>
<h4 id="run-in-docker">run in docker</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.caomingjun.com/run-cloudflare-warp-in-docker/">https://blog.caomingjun.com/run-cloudflare-warp-in-docker/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/baby9/warp-cli-docker">https://github.com/baby9/warp-cli-docker</a></p>
</li>
</ul>
<h2 id="安全">安全</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>禁用 WebRTC 绕过代理泄漏本机真实 IP：<a href="https://browserleaks.com/webrtc#howto-disable-webrtc">检测</a>。禁用安装插件 webrtc control</p>
</li>
<li class="lvl-2">
<p>避免代理 DNS 泄露：<a href="https://cf.buliang0.cf/clash-rules/nodnsleak.ini%EF%BC%8C%E8%BD%AC%E6%8D%A2%E5%9C%B0%E5%9D%80%E5%90%8E%E8%BF%BD%E5%8A%A0%E5%9C%A8%E5%9C%B0%E5%9D%80%E4%B8%AD">https://cf.buliang0.cf/clash-rules/nodnsleak.ini，转换地址后追加在地址中</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>clash</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>python</title>
    <url>/posts/afa93b42/</url>
    <content><![CDATA[<h2 id="资源">资源</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://learn.scientific-python.org/development/">scientific python development</a></td>
<td>python</td>
<td> 文档 </td>
</tr>
<tr>
<td><a href="https://peps.python.org/pep-0000/">Python Enhancement Proposals Index</a></td>
<td>python</td>
<td> 文档 </td>
</tr>
<tr>
<td><a href="https://www.geeksforgeeks.org/python-programming-language/">geeksforgeeks</a></td>
<td>python</td>
<td>docs </td>
</tr>
<tr>
<td><a href="https://kelepython.readthedocs.io/zh/latest/index.html">可乐 python</a></td>
<td>docs</td>
<td> 文档 </td>
</tr>
<tr>
<td><a href="https://pythonguidecn.readthedocs.io/zh/latest/">pythonguide</a></td>
<td>pythonguide</td>
<td>docs</td>
</tr>
<tr>
<td><a href="https://superfastpython.com/">superfastpython</a></td>
<td>superfastpython</td>
<td>blog</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="beginner">beginner</h2>
<h3 id="debug-in-vscode">debug in vscode</h3>
<h4 id="前置条件">前置条件</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://code.visualstudio.com/">vscode</a></p>
</li>
<li class="lvl-2">
<p>vscode plugins</p>
<ul class="lvl-2">
<li class="lvl-4">ms-vscode-remote.vscode-remote-extensionpack</li>
</ul>
</li>
<li class="lvl-2">
<p>运行中的服务开放 attach 条件 <a href="https://github.com/microsoft/debugpy">debugpy</a></p>
</li>
</ul>
<p>调试采用 python 插件提供的模板，常用模板基于文件 (file) 或基于模块 (module), 模板中字段说明参考插件及 vscode 预定义变量<a href="https://code.visualstudio.com/docs/editor/variables-reference">引用文档</a>.</p>
<p>基于文件模板样例:</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"0.2.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"configurations"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"Python: Current File"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"python"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"request"</span><span class="punctuation">:</span> <span class="string">"launch"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"program"</span><span class="punctuation">:</span> <span class="string">"${file}"</span><span class="punctuation">,</span> <span class="comment">// the current opened file</span></span><br><span class="line">            <span class="attr">"console"</span><span class="punctuation">:</span> <span class="string">"integratedTerminal"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"env"</span><span class="punctuation">:</span> <span class="punctuation">{</span><span class="punctuation">}</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"args"</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"cwd"</span><span class="punctuation">:</span> <span class="string">"${fileWorkspaceFolder}"</span><span class="punctuation">,</span> <span class="comment">// the current opened file's workspace folder</span></span><br><span class="line">            <span class="attr">"justMyCode"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="方法">方法</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>vscode-&gt;Remote Explorer-&gt;SSH Targets 通过配置连接进入要调试服务所在主机。如下示例：</p>
</li>
</ul>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">Host myhost</span><br><span class="line">    HostName 192.168.1.156</span><br><span class="line">    User root</span><br><span class="line">    Port 22</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>vscode-&gt;Remote Explorer-&gt;Containers 可以看到主机中运行的容器，右键 Attach to Container，vscode 自动进入容器内部：</p>
</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/08/04/MqPT1U4vnx78Aoa.png" alt="20220804202137."></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安装调试语言插件，ms-python.python</p>
</li>
<li class="lvl-2">
<p>进入调试配置左侧栏，创建基于 Python 调试配置模板，选择 Attach 模板 Attach using Process Id<br>
生成文件 .vscode/launch.json</p>
</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/08/04/UKzp3XCeilOEWdw.png" alt="20220804202048."></p>
<p><img data-src="https://s2.loli.net/2022/08/04/DonjgHkhtr4Wq7N.png" alt="20220804202016."></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>增加匹配调试服务的端口 port 到 launch.json 文件，port 可从服务路径 configs\default_settings.yaml 找到 attach_port: 12345 # 服务默认 attach 调试端口，或从环境变量 CONF_ATTACH_PORT 中获取最新 port ：</p>
</li>
</ul>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span><span class="punctuation">:</span> <span class="string">"0.2.0"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"configurations"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">{</span></span><br><span class="line">            <span class="attr">"name"</span><span class="punctuation">:</span> <span class="string">"Python: Attach using Process Id"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"type"</span><span class="punctuation">:</span> <span class="string">"python"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"request"</span><span class="punctuation">:</span> <span class="string">"attach"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"processId"</span><span class="punctuation">:</span> <span class="string">"${command:pickProcess}"</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"justMyCode"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">"port"</span><span class="punctuation">:</span> <span class="number">12345</span></span><br><span class="line">        <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>选择创建的调试模板，启动 attach 模板，选择要调试的服务进程 pid，注意每个进程调试都需要启动一次会话。</p>
</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/08/04/dh97nScKyQDXwut.png" alt="20220804201927."></p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://code.visualstudio.com/docs/remote/ssh">Remote Development using SSH</a></p>
</li>
<li class="lvl-2">
<p><a href="https://code.visualstudio.com/docs/remote/containers">Developing inside a Container</a></p>
</li>
<li class="lvl-2">
<p><a href="https://code.visualstudio.com/remote/advancedcontainers/overview">Advanced container configuration</a></p>
</li>
<li class="lvl-2">
<p><a href="https://code.visualstudio.com/remote/advancedcontainers/overview">Reference Implementation (containers.dev)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/microsoft/debugpy/wiki/Command-Line-Reference">Wiki debugpy</a></p>
</li>
<li class="lvl-2">
<p><a href="https://microsoft.github.io/debug-adapter-protocol/">Debug Adapter Protocol</a></p>
</li>
<li class="lvl-2">
<p><a href="https://code.visualstudio.com/docs/remote/troubleshooting#_resolving-git-line-ending-issues-in-containers-resulting-in-many-modified-files">Remote Development Tips and Tricks</a></p>
</li>
</ul>
<h3 id="debug-in-GDB">debug in GDB</h3>
<h4 id="前置条件-2">前置条件</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用附带自动加载对应 python 版本脚本的 gdb <a href="https://github.com/docker-library/python">环境</a>。</p>
</li>
</ul>
<h4 id="常用命令">常用命令</h4>
<p>Gdb 调试 Python 进程以 C 底层实现调试，看不到直接的 Python 源码，需要辅以一下命令：</p>
<blockquote>
<p>[!TIP]<br>
Debugging commands with Gdb</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>py-bt: 输出 Python 调用栈</p>
</li>
<li class="lvl-2">
<p>py-bt-full: 输出 Python 调用栈</p>
</li>
<li class="lvl-2">
<p>py-down: 在调用栈向下一级</p>
</li>
<li class="lvl-2">
<p>py-list: 显示代码</p>
</li>
<li class="lvl-2">
<p>py-locals: 输出 locals 变量</p>
</li>
<li class="lvl-2">
<p>py-print: 输出</p>
</li>
<li class="lvl-2">
<p>py-up: 在调用栈向上一级</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/7412708/debugging-stepping-through-python-script-using-gdb">https://stackoverflow.com/questions/7412708/debugging-stepping-through-python-script-using-gdb</a></p>
</li>
<li class="lvl-2">
<p><a href="https://getdocs.org/Gdb/docs/latest/gdb/Breakpoints-In-Python">Breakpoints in Python (Debugging with GDB)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://wiki.python.org/moin/DebuggingWithGdb">DebugginWithGdb</a></p>
</li>
<li class="lvl-2">
<p><a href="http://ponder.work/2020/12/29/debug-python-with-gdb/">http://ponder.work/2020/12/29/debug-python-with-gdb/</a></p>
</li>
<li class="lvl-2">
<p><a href="http://jasonblog.github.io/note/gdb/li_yong_gdb_jin_xing_shared_library_de_chu_cuo.html">http://jasonblog.github.io/note/gdb/li_yong_gdb_jin_xing_shared_library_de_chu_cuo.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://meteorix.github.io/2019/02/13/gdbpython/">https://meteorix.github.io/2019/02/13/gdbpython/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.xiexianbin.cn/linux/basic/linux-gdb/index.html">https://www.xiexianbin.cn/linux/basic/linux-gdb/index.html</a></p>
</li>
</ul>
<h3 id="debug-in-vs">debug in vs</h3>
<p>Windows 上用 VS 进行混合调试 Python/C++。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.microsoft.com/zh-cn/visualstudio/python/quickstart-01-python-in-visual-studio-project-from-existing-code?view=vs-2022">https://docs.microsoft.com/zh-cn/visualstudio/python/quickstart-01-python-in-visual-studio-project-from-existing-code?view=vs-2022</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2017/python/debugging-mixed-mode-c-cpp-python-in-visual-studio?view=vs-2017#enable-mixed-mode-debugging-in-a-python-project">https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2017/python/debugging-mixed-mode-c-cpp-python-in-visual-studio?view=vs-2017#enable-mixed-mode-debugging-in-a-python-project</a></p>
</li>
</ul>
<h3 id="Tricks">Tricks</h3>
<h4 id="数据格式化">数据格式化</h4>
<p>保留两位小数</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 使用字符串格式化</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">float_to_str</span>(<span class="params">f: <span class="built_in">float</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f"<span class="subst">{f:<span class="number">.2</span>f}</span>"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用round函数</span></span><br><span class="line">num = <span class="number">3.1415926</span></span><br><span class="line">result = <span class="built_in">round</span>(num, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Decimal类</span></span><br><span class="line">num = Decimal(<span class="string">"3.1415926"</span>)</span><br><span class="line">result = <span class="built_in">str</span>(num.quantize(Decimal(<span class="string">"0.00"</span>)))</span><br></pre></td></tr></tbody></table></figure>
<h4 id="prefer-dataclass">prefer dataclass</h4>
<p>创建数据类通常使用 python 内置的 dataclass.</p>
<p>它在 Python 3.7 版本中引入。它旨在简化创建和操作数据类的过程。数据类是一种用于存储数据的类，通常只包含属性而不包含方法。</p>
<p>使用 dataclass 装饰器可以自动为类生成一些常见的方法，例如 <strong>init</strong> 、 <strong>repr</strong> 、 <strong>eq</strong> 等。这样，您无需手动编写这些方法，可以更快速地创建和使用数据类。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=vBH6GRJ1REM">https://www.youtube.com/watch?v=vBH6GRJ1REM</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/lidatong/dataclasses-json">dataclass 通常和 dataclass-json 一起使用</a></p>
</li>
</ul>
<p>下面是一个使用 dataclass 的示例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    profession: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Person对象</span></span><br><span class="line">person = Person(<span class="string">"John Doe"</span>, <span class="number">30</span>, <span class="string">"Engineer"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印对象的字符串表示</span></span><br><span class="line"><span class="built_in">print</span>(person)  <span class="comment"># 输出: Person(name='John Doe', age=30, profession='Engineer')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较两个对象是否相等</span></span><br><span class="line">person2 = Person(<span class="string">"John Doe"</span>, <span class="number">30</span>, <span class="string">"Engineer"</span>)</span><br><span class="line"><span class="built_in">print</span>(person == person2)  <span class="comment"># 输出: True</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上述示例中，使用 dataclass 装饰器来创建一个名为 Person 的数据类。它有三个属性： name 、 age 和 profession 。 dataclass 装饰器自动为该类生成了 <strong>init</strong> 、 <strong>repr</strong> 和 <strong>eq</strong> 方法，使能够更方便地创建和比较对象。</p>
<p>除了自动生成的方法， dataclass 还提供了其他参数来自定义类的行为。例如，您可以使用 frozen=True 参数使生成的类成为不可变类，即对象创建后不能修改。</p>
<p>总之， dataclass 是 Python 中一个非常有用的工具，它简化了创建和操作数据类的过程。通过使用 dataclass 装饰器，您可以更高效地编写代码，并减少样板代码的数量。</p>
<h4 id="WorkingDirContext">WorkingDirContext</h4>
<p>实现保留工作目录上下文</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> TracebackType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkingDirContext</span>:</span><br><span class="line">    <span class="string">"""Working directory context definition"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path: <span class="built_in">str</span> | os.PathLike[<span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>._prev_working_dir = os.getcwd()</span><br><span class="line">        os.chdir(path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>) -&gt; WorkingDirContext:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        exc_type: <span class="built_in">type</span>[BaseException] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        exc_value: BaseException | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        traceback: TracebackType | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">"""Switch the previous directory"""</span></span><br><span class="line">        os.chdir(<span class="variable language_">self</span>._prev_working_dir)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="cmd-直接执行">cmd 直接执行</h4>
<p>脚本可以直接通过 python 执行，只需要指定 <code>-c</code> 参数即可。需要注意地是:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>命令将使用；隔开</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">python -c <span class="string">"import os;print(os.environ)"</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="动态添加属性或方法">动态添加属性或方法</h4>
<p>作为动态语言，<code>python</code> 能动态运行时添加动态属性和方法。在不修改源码的情况下，可以通过在运行期间，动态添加属性。参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/phyger/p/13639291.html">phyger 博客参考 1</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.bilibili.com/read/cv17118182/">python 术语</a></p>
</li>
</ul>
<h4 id="获取目录">获取目录</h4>
<p>获取当前文件的绝对路径</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">root = Path(__file__).resolve().parent</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">root = os.path.dirname(os.path.abspath(__file__))</span><br></pre></td></tr></tbody></table></figure>
<h4 id="判断是否在调试模式">判断是否在调试模式</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_debugging</span>():</span><br><span class="line">    <span class="keyword">return</span> sys.gettrace() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="超时退出">超时退出</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>基于 signal 实现</p>
</li>
</ul>
<p>python signal 负责处理内存信号处理，超时可以通过 <code>SIGALRM</code> 信号触发超时操作。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeoutError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="string">"""自定义超时异常"""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, msg, frame</span>):</span><br><span class="line">        <span class="built_in">super</span>(TimeoutError, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.msg = msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">time_out</span>(<span class="params">interval: <span class="built_in">int</span>, callback=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">"""interval秒后向进程发送SIGALRM信号，函数在规定时间执行完后关闭alarm闹钟</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        interval (int): 超时秒数</span></span><br><span class="line"><span class="string">        callback (function, optional): 超时回调. Defaults to None.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">signum, frame</span>):</span><br><span class="line">            <span class="built_in">print</span>(frame)</span><br><span class="line">            <span class="keyword">raise</span> TimeoutError(<span class="string">f"run func <span class="subst">{func.__name__}</span> timeout <span class="subst">{interval}</span>s"</span>, frame)</span><br><span class="line"></span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                signal.signal(signal.SIGALRM, handler)</span><br><span class="line">                signal.alarm(interval)</span><br><span class="line">                result = func(*args, **kwargs)</span><br><span class="line">                signal.alarm(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            <span class="keyword">except</span> TimeoutError <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">if</span> callback:</span><br><span class="line">                    callback(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">timeout_callback</span>(<span class="params">e</span>):</span><br><span class="line">    <span class="built_in">print</span>(e.msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_out(<span class="params"><span class="number">2</span>, timeout_callback</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"task1 start"</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)  <span class="comment">#! 超时</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"task1 end"</span>)  <span class="comment"># tak 1 end 不会输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@time_out(<span class="params"><span class="number">2</span>, timeout_callback</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"task2 start"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"task2 end"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    task1()</span><br><span class="line">    task2()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>基于 threading 或协程实现</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">threading_time_out</span>(<span class="params">interval, callback=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            t = threading.Thread(target=func, args=args, kwargs=kwargs)</span><br><span class="line">            t.setDaemon(<span class="literal">True</span>)  <span class="comment"># 设置主线程结束后子线程立刻结束</span></span><br><span class="line">            t.start()</span><br><span class="line">            t.join(interval)  <span class="comment"># 主线程阻塞等待interval秒</span></span><br><span class="line">            <span class="keyword">if</span> t.is_alive() <span class="keyword">and</span> callback:</span><br><span class="line">                <span class="keyword">return</span> threading.Timer(<span class="number">0</span>, callback).start()  <span class="comment"># 立即执行回调函数</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gevent_time_out</span>(<span class="params">interval, callback=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="comment"># 该部分必选在requests之前导入</span></span><br><span class="line">            <span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line">            <span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line"></span><br><span class="line">            monkey.patch_all()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                gevent.with_timeout(interval, func, *args, **kwargs)</span><br><span class="line">            <span class="keyword">except</span> gevent.timeout.Timeout <span class="keyword">as</span> e:</span><br><span class="line">                callback() <span class="keyword">if</span> callback <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br></pre></td></tr></tbody></table></figure>
<h4 id="常量">常量</h4>
<p>python 中常量定义是比较困难的，这里给出几种常用的方法。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>覆盖 cls.<strong>setattr</strong></p>
</li>
</ul>
<p>自定义 <strong>setattr</strong>, 检测加入的属性重复性，通过类修饰方式实现。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">as_const</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="string">"""成为常量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        from constant import as_const</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @as_const</span></span><br><span class="line"><span class="string">        class _Platform:</span></span><br><span class="line"><span class="string">            linux = "linux"</span></span><br><span class="line"><span class="string">            windows = "windows"</span></span><br><span class="line"><span class="string">            macosx = "macosx"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @as_const</span></span><br><span class="line"><span class="string">        class _Const:</span></span><br><span class="line"><span class="string">            plat = _Platform()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        ct = _Const()</span></span><br><span class="line"><span class="string">        pt = _Platform()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        print(ct.plat.linux)</span></span><br><span class="line"><span class="string">        print(pt.linux)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ConstError</span>(<span class="title class_ inherited__">TypeError</span>):</span><br><span class="line">        <span class="string">"""常量不可改错误定义"""</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ConstCaseError</span>(<span class="title class_ inherited__">ConstError</span>):</span><br><span class="line">        <span class="string">"""常量大小写错误定义"""</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @wraps(<span class="params">cls</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">const_setter</span>(<span class="params">self, key, value</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> <span class="variable language_">self</span>.__dict__.keys():</span><br><span class="line">            <span class="keyword">raise</span> ConstError(<span class="string">f"Can't change a const variable with name <span class="subst">{key}</span>"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> key.isupper():</span><br><span class="line">            <span class="keyword">raise</span> ConstCaseError(</span><br><span class="line">                <span class="string">f"Const variable must be combined with upper letters:<span class="subst">{key}</span>"</span></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.__dict__[key] = value</span><br><span class="line"></span><br><span class="line">    cls.__setattr__ = const_setter</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cls</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过 dataclass</p>
</li>
</ul>
<p>dataclass 修饰实现，通过 frozen 参数固定。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@dataclass(<span class="params">frozen=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ErrorName</span>:</span><br><span class="line">    service = <span class="string">"ServiceError"</span></span><br><span class="line">    drawing = <span class="string">"DrawingError"</span></span><br><span class="line">    subblock = <span class="string">"SubBlockError"</span></span><br><span class="line">    file = <span class="string">"FileError"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ErrorName.service)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="从环境变量读取配置">从环境变量读取配置</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/milvus-io/pymilvus/blob/master/pymilvus/settings.py">https://github.com/milvus-io/pymilvus/blob/master/pymilvus/settings.py</a></p>
</li>
</ul>
<h4 id="扩展log配置">扩展 log 配置</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/milvus-io/pymilvus/blob/master/pymilvus/settings.py">https://github.com/milvus-io/pymilvus/blob/master/pymilvus/settings.py</a></p>
</li>
</ul>
<h4 id="设置input默认参数">设置 input 默认参数</h4>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">input_with_default</span>(<span class="params">prompt, default=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    如果default不为None，会在提示中包含默认值。然后，使用`input()`函数接收用户的输入。如果用户输入为空（即直接按下回车），返回默认值。否则，返回用户的输入。</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> default <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        prompt = <span class="string">f"<span class="subst">{prompt}</span> [<span class="subst">{default}</span>] "</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">input</span>(prompt) <span class="keyword">or</span> default</span><br><span class="line"></span><br><span class="line">name = input_with_default(<span class="string">"Please enter your name"</span>, <span class="string">"John"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"Hello, <span class="subst">{name}</span>!"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h4 id="static-and-class-method">static and class method</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.geeksforgeeks.org/class-method-vs-static-method-python">https://www.geeksforgeeks.org/class-method-vs-static-method-python</a></p>
</li>
</ul>
<h4 id="metaclass">metaclass</h4>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.geeksforgeeks.org/metaprogramming-metaclasses-python">https://www.geeksforgeeks.org/metaprogramming-metaclasses-python</a></p>
</li>
</ul>
<h3 id="duck-typing">duck typing</h3>
<p>是 Python 中的一种编程风格和理念。它强调在判断一个对象的类型时，关注的是对象具有的方法和属性，而不是对象的具体类型。</p>
<p>根据鸭子类型的理念，如果一个对象走起路来像鸭子、叫起来像鸭子，那么它就可以被看作是一只鸭子。换句话说，只要对象具备了特定的方法和属性，就可以在代码中使用它，而不需要关心它的具体类型。</p>
<p>在 Python 中，通常不会显式地检查对象的类型，而是直接调用对象的方法或访问属性。如果对象具备所需的方法和属性，那么代码就能正常运行。这种灵活性使得 Python 成为一种支持动态类型和鸭子类型的语言。</p>
<p>以下是一个简单的示例，展示了 Duck Typing 的概念：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Duck is walking"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Duck is quacking"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Robot</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Robot is walking"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Robot cannot quack"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_object_walk</span>(<span class="params">obj</span>):</span><br><span class="line">    obj.walk()</span><br><span class="line"></span><br><span class="line">duck = Duck()</span><br><span class="line">robot = Robot()</span><br><span class="line"></span><br><span class="line">make_object_walk(duck)  <span class="comment"># 输出：Duck is walking</span></span><br><span class="line">make_object_walk(robot)  <span class="comment"># 输出：Robot is walking</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上述示例中，定义了一个 Duck 类和一个 Robot 类，它们都具备了 walk 方法。然后，定义了一个 make_object_walk 函数，该函数接受一个对象作为参数，并调用对象的 walk 方法。无论传入的是 Duck 对象还是 Robot 对象，只要它们具备 walk 方法，函数就能正常运行。</p>
<p>这就是 Duck Typing 的概念，它允许在编写代码时更加关注对象的行为和能力，而不是对象的具体类型。</p>
<h2 id="cpython-开发">cpython 开发</h2>
<p>cpython 是 Python 发行最流行的版本，以 C/C++ 为基础的开发分布版本。</p>
<h3 id="参考">参考</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://devguide.python.org/">Python Developer’s Guide</a></p>
</li>
</ul>
<h3 id="调试">调试</h3>
<p>cpython 调试，需要 GDB 这个工具。而 GDB 需要对应 Python 的脚本的命令加载，通常在 Python3.7 后，在源码目录的 <code>Tools/gdb/*</code> 包含用 GDB 需要的脚本。</p>
<p>按照上面的目录规则 cp 到 gdb 的 auto-load，保证调试 python3.7 进程的时候能找到。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /usr/share/gdb/auto-load/usr/local/bin/</span><br></pre></td></tr></tbody></table></figure>
<h3 id="reference">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://meteorix.github.io/2019/02/13/gdbpython/">https://meteorix.github.io/2019/02/13/gdbpython/</a></p>
</li>
</ul>
<h2 id="pip">pip</h2>
<h3 id="pip-tool">pip tool</h3>
<p>pip 工具单独安装。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py</span><br><span class="line">python get-pip.py</span><br><span class="line"><span class="built_in">rm</span> -rf get-pip.py ~/.cache/pip</span><br></pre></td></tr></tbody></table></figure>
<h3 id="pip-常用命令">pip 常用命令</h3>
<p>这节列出了常用的 pip 命令，参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pip.pypa.io/en/stable/user_guide/">https://pip.pypa.io/en/stable/user_guide/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://pip.pypa.io/en/stable/cli/">https://pip.pypa.io/en/stable/cli/</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">pip install yolov5-utils[==version]</span><br><span class="line"><span class="comment"># 卸载包</span></span><br><span class="line">pip uninstall yolov5-utils</span><br><span class="line"><span class="comment"># 查看包</span></span><br><span class="line">pip show yolov5-utils</span><br><span class="line"><span class="comment"># 导出环境包至 requirements.txt</span></span><br><span class="line">pip freeze &gt; requirements.txt</span><br><span class="line"><span class="comment"># 更新 pip</span></span><br><span class="line">pip install --upgrade pip</span><br></pre></td></tr></tbody></table></figure>
<h3 id="pip-install-e"><code>pip install -e</code></h3>
<p>使用 <code>pip install -e</code> 命令可以将本地的一个 Python 包安装到系统中，同时在安装后，该包的源代码仍然可以在本地进行修改，修改后的代码会立即生效，无需重新安装。这种安装方式被称为 “开发模式”。</p>
<p>在开发模式下，可以在本地修改源代码，而不需要每次修改后都重新安装包。这对于开发过程中的调试和测试非常有用。同时，也可以在本地使用版本控制工具来管理源代码，方便代码的维护和协作。</p>
<p>使用命令安装包时，需要在包的根目录下包含一个 <a href="http://setup.py">setup.py</a> 文件，该文件包含了包的元数据和依赖关系等信息。在安装时，pip 会读取该文件并根据其中的信息进行安装。</p>
<h3 id="install-pkg-with-pip">install pkg with pip</h3>
<h4 id="cmake-skbuild-install">cmake skbuild install</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>cmake project integration with <a href="https://github.com/scikit-build/scikit-build">skbuild</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install git+https://**.git --build-type Debug</span><br></pre></td></tr></tbody></table></figure>
<h4 id="install-from-git">install from git</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Hash</span></span><br><span class="line">❯ pip install git+git://github.com/aladagemre/django-notification.git@2927346f4c513a217ac8ad076e494dd1adbf70e1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Branch</span></span><br><span class="line">❯ pip install git+git://github.com/aladagemre/django-notification.git@cool-feature-branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tag</span></span><br><span class="line">❯ pip install git+git://github.com/aladagemre/django-notification.git@v2.1.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="reference-2">reference</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pip-cn.readthedocs.io/en/latest/reference/pip_install.html#git">pip docs 1</a></p>
</li>
<li class="lvl-2">
<p><a href="https://pip.pypa.io/en/stable/topics/vcs-support/">pip docs 2</a></p>
</li>
</ul>
<h3 id="pip换源">pip 换源</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>cmd pip 全局配置</p>
</li>
</ul>
<p>源生效优先级，<strong>sjtu &gt; ngc.nvidia &gt; tsinghua</strong></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip3 config <span class="built_in">set</span> global.index-url <span class="string">"https://pypi.tuna.tsinghua.edu.cn/simple/ https://pypi.ngc.nvidia.com"</span></span><br><span class="line">pip3 config <span class="built_in">set</span> global.extra-index-url <span class="string">"https://pypi.tuna.tsinghua.edu.cn/simple/ https://pypi.ngc.nvidia.com https://mirror.sjtu.edu.cn/pypi/web/simple"</span></span><br><span class="line">pip3 config <span class="built_in">set</span> global.timeout 20</span><br><span class="line">pip3 config <span class="built_in">set</span> global.trusted-host <span class="string">"pypi.tuna.tsinghua.edu.cn pypi.ngc.nvidia.com mirror.sjtu.edu.cn/pypi/web/simple"</span></span><br></pre></td></tr></tbody></table></figure>
<p>执行后会生成配置文件，windows: <code>C:\Users\user\AppData\Roaming\pip</code>, linux: <code>/home/user/.pip/</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建文件使用软件包的安装用户，执行如下命令：</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.pip</span><br></pre></td></tr></tbody></table></figure>
<p>如果提示目录不存在，则执行如下命令创建：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.pip</span><br><span class="line"><span class="built_in">cd</span> ~/.pip</span><br></pre></td></tr></tbody></table></figure>
<p>编辑 pip.conf 文件。使用 vi pip.conf 命令打开 pip.conf 文件，写入如下内容：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">#以华为源为例，请根据实际情况进行替换。</span><br><span class="line">index-url = https://mirrors.huaweicloud.com/repository/pypi/simple</span><br><span class="line">trusted-host = mirrors.huaweicloud.com</span><br><span class="line">timeout = 120</span><br></pre></td></tr></tbody></table></figure>
<h4 id="reference-3">reference</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/jianjiacangcang/p/15195529.html">个人博客参考 1</a></p>
</li>
</ul>
<h3 id="pip-环境配置">pip 环境配置</h3>
<p>pip 包管理器在安装 python 包时，会在本地目录创建缓存，当下次再下载相同的包时，自动读取缓存，不再从三方源下载以节省时间。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过命令行配置</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.cache-dir &lt;your-cache-dir&gt;</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过环境变量配置</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PIP_CACHE_DIR=&lt;your-cache-dir&gt;</span><br></pre></td></tr></tbody></table></figure>
<h3 id="requirements-txt">requirements.txt</h3>
<p>python 安装包可通过 requirements.txt 配置安装依赖，只需通过 pip 命令 -r 即可指定安装。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install -r ./requirements.txt -r /requirements.gpu.txt</span><br></pre></td></tr></tbody></table></figure>
<p>可通过直接在文件种配置源，灵活拆分配置依赖包。如下，配置了 gpu 的依赖包及相应的搜索源。</p>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">--find-links https://download.pytorch.org/whl/torch_stable.html</span><br><span class="line">--extra-index-url https://pypi.ngc.nvidia.com</span><br><span class="line">nvidia-pyindex==1.0.9</span><br><span class="line">nvidia-tensorflow==1.15.5+nv22.7</span><br><span class="line">nvidia-tensorboard==1.15.0+nv21.4</span><br><span class="line">torch==1.8.0+cu111</span><br><span class="line">torchvision==0.9.0+cu111</span><br><span class="line">torchaudio==0.8.0</span><br></pre></td></tr></tbody></table></figure>
<h4 id="reference-4">reference</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/64180511/pip-change-directory-of-pip-cache-on-linux">https://stackoverflow.com/questions/64180511/pip-change-directory-of-pip-cache-on-linux</a></p>
</li>
<li class="lvl-2">
<p><a href="https://pip.pypa.io/en/stable/topics/configuration/#environment-variables">https://pip.pypa.io/en/stable/topics/configuration/#environment-variables</a></p>
</li>
</ul>
<h3 id="pip-offline-package">pip offline package</h3>
<p>pip 实现容器启动时加载离线包安装</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># requirements.gpu.txt</span></span><br><span class="line">--extra-index-url https://pypi.ngc.nvidia.com</span><br><span class="line">--find-links https://download.pytorch.org/whl/torch_stable.html</span><br><span class="line">nvidia-pyindex==1.0.9</span><br><span class="line">nvidia-tensorboard==1.15</span><br><span class="line">nvidia-tensorflow[horovod]==1.15.5+nv22.11</span><br><span class="line">torch==1.8.0+cu111</span><br><span class="line">torchaudio==0.8.0</span><br><span class="line">torchvision==0.9.0+cu111</span><br><span class="line"><span class="comment"># requirements.txt</span></span><br><span class="line">numpy==1.23.5</span><br><span class="line">requests==2.28.1</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight dockerfile"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># syntax=docker/dockerfile:1.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-bullseye as python_base</span><br><span class="line"></span><br><span class="line"><span class="comment"># config env remote source</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="language-bash">    <span class="comment"># add multiple pip sources</span></span></span><br><span class="line">    &amp;&amp; pip3 config set global.index-url <span class="string">"https://pypi.tuna.tsinghua.edu.cn/simple/"</span> \</span><br><span class="line">    &amp;&amp; pip3 config set global.extra-index-url <span class="string">"https://pypi.tuna.tsinghua.edu.cn/simple/ https://mirrors.cloud.tencent.com/pypi/simple"</span> \</span><br><span class="line">    &amp;&amp; pip3 config set global.timeout <span class="number">10</span> \</span><br><span class="line">    &amp;&amp; pip3 config set global.trusted-host <span class="string">"pypi.tuna.tsinghua.edu.cn mirrors.cloud.tencent.com"</span> \</span><br><span class="line">    <span class="comment"># add new apt source</span></span><br><span class="line">    &amp;&amp; cp /etc/apt/sources.list /etc/apt/sources.list.bak \</span><br><span class="line">    &amp;&amp; sed -i <span class="string">'/^# deb / d;s|http://deb.debian.org/debian|http://mirrors.tencent.com/debian|g;/^deb http/s/$/ contrib non-free/;/-updates/h;s/-updates/-backports/;$G'</span> /etc/apt/sources.list \</span><br><span class="line">    &amp;&amp; apt-get update &amp;&amp; apt-get install -y apt-transport-https ca-certificates  \</span><br><span class="line">    &amp;&amp; ln -s /lib/x86_64-linux-gnu/libtinfo.so.<span class="number">6</span> /lib/x86_64-linux-gnu/libtinfo.so.<span class="number">5</span> \</span><br><span class="line">    <span class="comment"># dumb-init is used to optimize start the service, see https://github.com/Yelp/dumb-init</span></span><br><span class="line">    &amp;&amp; pip3 install dumb-init \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* /var/cache/* /var/log/* /tmp/* ~/.cache -rf</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python_base as python_pack_pkg</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PIP_CACHE_DIR /opt/deploy/.pip_cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./requirements.* /opt/deploy/requirements/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker buildx cache</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> --mount=<span class="built_in">type</span>=cache,target=/opt/deploy/.pip_cache,<span class="built_in">id</span>=pip_cache,sharing=locked \</span></span><br><span class="line"><span class="language-bash">    pip3 wheel --wheel-dir /opt/deploy/packages -r /opt/deploy/requirements/requirements.txt -r /opt/deploy/requirements/requirements.gpu.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">set</span> -ex \</span></span><br><span class="line"><span class="language-bash">    <span class="comment"># prevent download pkgs online again</span></span></span><br><span class="line">    &amp;&amp; sed -i <span class="string">'/extra-index-url/,+d'</span> /opt/deploy/requirements/requirements.txt \</span><br><span class="line">    &amp;&amp; sed -i <span class="string">'/extra-index-url/,+1d'</span> /opt/deploy/requirements/requirements.gpu.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python_base as python_env</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=python_pack_pkg /opt/deploy/requirements/* /opt/deploy/requirements/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=python_pack_pkg /opt/deploy/packages/* /opt/deploy/packages/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">"pip3"</span>, <span class="string">"install"</span>, <span class="string">"--no-index"</span>, <span class="string">"--find-links=/opt/deploy/packages"</span> ,<span class="string">"-r"</span> ,<span class="string">"/opt/deploy/requirements/requirements.txt"</span> ,<span class="string">"-r"</span>, <span class="string">"/opt/deploy/requirements/requirements.gpu.txt"</span>]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python_env as production</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /opt/deploy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> scripts/docker/pre_start /usr/local/bin/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=python_pack_pkg /opt/deploy/requirements/* /opt/deploy/requirements/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=python_pack_pkg /opt/deploy/packages/* /opt/deploy/packages/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> . /opt/deploy/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">"/usr/local/bin/dumb-init"</span>, <span class="string">"--"</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">"bash"</span>, <span class="string">"-c"</span>,<span class="string">"pre_start &amp;&amp; exec python3 app.py"</span>]</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># pre_start</span></span><br><span class="line"><span class="built_in">set</span> -ex</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---------------- Env echo ----------------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"current path: "</span><span class="string">"<span class="variable">$PWD</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"who is this: "</span><span class="string">"<span class="subst">$(whoami)</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pip3 version: "</span><span class="string">"<span class="subst">$(pip3 --version)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"----------- packages info ----------------"</span></span><br><span class="line"><span class="built_in">ls</span> -la /opt/deploy/packages</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---------- requirements info -------------"</span></span><br><span class="line"><span class="built_in">cat</span> /opt/deploy/requirements/requirements.txt</span><br><span class="line"><span class="built_in">cat</span> /opt/deploy/requirements/requirements.gpu.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"-------- install pre-cached pkgs ---------"</span></span><br><span class="line"><span class="comment"># install pkgs from cached path</span></span><br><span class="line">pip3 install --no-index --find-links=/opt/deploy/packages -r /opt/deploy/requirements/requirements.txt -r /opt/deploy/requirements/requirements.gpu.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"---------- output active envs ------------"</span></span><br><span class="line">dynaconf -i config.settings list</span><br></pre></td></tr></tbody></table></figure>
<h2 id="virtualenv">virtualenv</h2>
<p>虚拟环境用于环境隔离，进行多环境开发或配置。</p>
<p>安装虚拟环境配置工具 virtualenv, 参考使用教程:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://techinscribed.com/python-virtual-environment-in-vscode/">https://techinscribed.com/python-virtual-environment-in-vscode/</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">virtualenv --version</span><br></pre></td></tr></tbody></table></figure>
<h2 id="pipx">pipx</h2>
<p>常用的管理的 python 命令行 工具</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">mamba install pipx</span><br><span class="line"></span><br><span class="line">pipx list</span><br><span class="line">pipx install poetry</span><br><span class="line">pipx install copier</span><br><span class="line">pipx install nox</span><br></pre></td></tr></tbody></table></figure>
<h2 id="python-project">python project</h2>
<p>python 工程表述提供了完整的标准文档，参考官方打包标准 <a href="https://peps.python.org/pep-0621/">PEP 621</a></p>
<p>符合官方标准 pyproject.tmol 示例如下:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/carlosperate/awesome-pyproject">https://github.com/carlosperate/awesome-pyproject</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/triton-inference-server/model_navigator/blob/main/pyproject.toml">https://github.com/triton-inference-server/model_navigator/blob/main/pyproject.toml</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/playlist?list=PLR-r0edywujdxFSPtTILD8HPbEzt6MJy-">developing complete python project</a></p>
</li>
</ul>
<h3 id="project-scaffold">project scaffold</h3>
<p>使用项目模板可以快速生成一个符合 python 规范的项目.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/serious-scaffold/serious-scaffold-python">serious scaffold python project</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/scientific-python/cookie">scientific python cookie</a></p>
</li>
</ul>
<h3 id="pyproject-tmol">pyproject.tmol</h3>
<p>项目 project 配置参考 <a href="https://packaging.python.org/en/latest/specifications/declaring-project-metadata/">declaring-project-meta</a>.</p>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"xxx"</span></span><br><span class="line"><span class="comment"># version, 配置版本信息,可通过setuptools-scm等工具动态管理版本</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">"0.0.1"</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">"The description of the project xxx"</span></span><br><span class="line"><span class="attr">readme</span> = <span class="string">"README.md"</span></span><br><span class="line"><span class="attr">classifiers</span> = [</span><br><span class="line">    <span class="comment"># https://pypi.org/classifiers/</span></span><br><span class="line">    <span class="comment"># Development Status</span></span><br><span class="line">    <span class="string">"Development Status :: 3 - Alpha"</span>,</span><br><span class="line">    <span class="string">"Development Status :: 4 - Beta"</span>,</span><br><span class="line">    <span class="string">"Development Status :: 5 - Production/Stable"</span>,</span><br><span class="line">    <span class="comment"># Framework</span></span><br><span class="line">    <span class="string">"Framework :: Django"</span>,</span><br><span class="line">    <span class="string">"Framework :: Flask"</span>,</span><br><span class="line">    <span class="comment"># License</span></span><br><span class="line">    <span class="string">"License :: OSI Approved :: GNU General Public License (GPL)"</span>,</span><br><span class="line">    <span class="string">"License :: OSI Approved :: MIT License"</span>,</span><br><span class="line">    <span class="string">"License :: OSI Approved :: Apache Software License"</span>,</span><br><span class="line">    <span class="string">"License :: OSI Approved :: BSD License"</span>,</span><br><span class="line">    <span class="comment"># Operating System</span></span><br><span class="line">    <span class="string">"Operating System :: OS Independent"</span>,</span><br><span class="line">    <span class="string">"Operating System :: Microsoft :: Windows"</span>,</span><br><span class="line">    <span class="string">"Operating System :: POSIX"</span>,</span><br><span class="line">    <span class="string">"Operating System :: Unix"</span>,</span><br><span class="line">    <span class="string">"Operating System :: MacOS"</span>,</span><br><span class="line">    <span class="comment"># Intended Audience</span></span><br><span class="line">    <span class="string">"Intended Audience :: Developers"</span>,</span><br><span class="line">    <span class="string">"Intended Audience :: Education"</span>,</span><br><span class="line">    <span class="string">"Intended Audience :: Science/Research"</span>,</span><br><span class="line">    <span class="comment"># Programming Language</span></span><br><span class="line">    <span class="string">"Programming Language :: Python :: 3 :: Only"</span>,</span><br><span class="line">    <span class="string">"Programming Language :: Python :: 3.7"</span>,</span><br><span class="line">    <span class="string">"Programming Language :: Python :: 3.8"</span>,</span><br><span class="line">    <span class="string">"Programming Language :: Python :: 3.9"</span>,</span><br><span class="line">    <span class="string">"Programming Language :: Python :: 3.10"</span>,</span><br><span class="line">    <span class="string">"Programming Language :: Python :: 3.11"</span>,</span><br><span class="line">    <span class="comment"># Topic</span></span><br><span class="line">    <span class="string">"Topic :: Software Development"</span>,</span><br><span class="line">    <span class="string">"Topic :: Software Development :: Libraries"</span>,</span><br><span class="line">    <span class="string">"Topic :: Software Development :: Libraries :: Python Modules"</span>,</span><br><span class="line">    <span class="string">"Topic :: Education"</span>,</span><br><span class="line">    <span class="string">"Topic :: Scientific/Engineering"</span>,</span><br><span class="line">    <span class="string">"Topic :: Scientific/Engineering :: Artificial Intelligence"</span>,</span><br><span class="line">    <span class="string">"Topic :: Scientific/Engineering :: Image Recognition"</span>,</span><br><span class="line">]</span><br><span class="line"><span class="attr">authors</span> = []</span><br><span class="line"><span class="attr">maintainers</span> = []</span><br><span class="line"><span class="attr">keywords</span> = [</span><br><span class="line">    <span class="string">"machine-learning"</span>,</span><br><span class="line">    <span class="string">"deep-learning"</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># license: A SPDX license identifier</span></span><br><span class="line"><span class="attr">license</span> = { text = <span class="string">"GPL"</span> }</span><br><span class="line"><span class="attr">license</span> = { text = <span class="string">"Apache 2.0"</span> }</span><br><span class="line"><span class="attr">license</span> = { text = <span class="string">"BSD"</span> }</span><br><span class="line"><span class="attr">requires-python</span> = <span class="string">"&gt;=3.7"</span></span><br><span class="line"><span class="comment"># 项目必要的依赖</span></span><br><span class="line"><span class="attr">dependencies</span> = [</span><br><span class="line">    <span class="string">"fire"</span>,</span><br><span class="line">    <span class="string">"gitpython&gt;=3.1.30"</span>,</span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目可生成的脚本 https://setuptools.pypa.io/en/latest/userguide/entry_point.html</span></span><br><span class="line"><span class="section">[project.scripts]</span></span><br><span class="line"><span class="comment"># xxx.python-file:entry-function 指定了脚本在xxx包python-file文件中entry-function入口函数</span></span><br><span class="line"><span class="attr">cli_name</span> = <span class="string">"xxx.python-file:entry-function"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目相关的链接</span></span><br><span class="line"><span class="section">[project.urls]</span></span><br><span class="line"><span class="attr">"Documentation"</span> = <span class="string">"https://github.com/msclock/xxx"</span></span><br><span class="line"><span class="attr">"Source"</span> = <span class="string">"https://github.com/msclock/xxx"</span></span><br><span class="line"><span class="attr">"Tracker"</span> = <span class="string">"https://github.com/msclock/xxx/issues"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目可选依赖, 可通过 pip install .[test]安装对应集合依赖</span></span><br><span class="line"><span class="section">[project.optional-dependencies]</span></span><br><span class="line"><span class="comment"># 常用的测试依赖如下</span></span><br><span class="line"><span class="attr">test</span> = [</span><br><span class="line">    <span class="string">"GitPython &gt;= 3.1.30"</span>,</span><br><span class="line">    <span class="string">"pytest &gt;= 5.2"</span>,</span><br><span class="line">    <span class="string">"pytest-mock &gt;= 3.8.2"</span>,</span><br><span class="line">    <span class="string">"pytype!=2021.11.18,!=2022.2.17"</span>,</span><br><span class="line">    <span class="string">"pre-commit &gt;= 2.20.0"</span>,</span><br><span class="line">    <span class="string">"pytest-unordered ~= 0.5"</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 常用到的开发依赖如下</span></span><br><span class="line"><span class="attr">dev</span> = [</span><br><span class="line">    <span class="comment"># 可以使用分类链接的方式传递依赖组</span></span><br><span class="line">    <span class="string">"xxx[test]"</span>, <span class="comment"># 加入上面的 test 依赖</span></span><br><span class="line">    <span class="string">"black &gt;= 22.8"</span>,</span><br><span class="line">    <span class="string">"build &gt;= 0.8"</span>,</span><br><span class="line">    <span class="string">"ipython &gt;= 7.16"</span>,</span><br><span class="line">    <span class="string">"isort &gt;= 5.10"</span>,</span><br><span class="line">    <span class="string">"pdbpp &gt;= 0.10"</span>,</span><br><span class="line">    <span class="string">"pip &gt;= 21.1"</span>,</span><br><span class="line">    <span class="string">"pre-commit &gt;= 2.20.0"</span>,</span><br><span class="line">    <span class="string">"psutil ~= 5.1"</span>,</span><br><span class="line">    <span class="string">"twine &gt;= 4.0"</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="build-system">build-system</h3>
<p>使用 setuptools 后端构建系统</p>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">"setuptools"</span>, <span class="string">"setuptools-scm"</span>, <span class="string">"wheel"</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">"setuptools.build_meta"</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!NOTE]<br>
一般使用 setuptools 构建工具，不需要指定版本</p>
</blockquote>
<h3 id="distutils">distutils</h3>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置生成 wheel 打包文件命名遵循 `pkgname-version-python_tag-xxx-xxx.whl`</span></span><br><span class="line"><span class="section">[tool.distutils.bdist_wheel]</span></span><br><span class="line"><span class="attr">python_tag</span> = <span class="string">"py37.py38.py39.py310"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="setuptools">setuptools</h3>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 需要包含的数据文件</span></span><br><span class="line"><span class="section">[tool.setuptools]</span></span><br><span class="line"><span class="attr">include-package-data</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">license-files</span> = [<span class="string">"LICENSE"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包使用 find 接口 https://setuptools.pypa.io/en/latest/userguide/package_discovery.html#</span></span><br><span class="line"><span class="section">[tool.setuptools.packages.find]</span></span><br><span class="line"><span class="attr">namespaces</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">include</span> = []</span><br><span class="line"><span class="comment"># 排除pkg包及自包和模块</span></span><br><span class="line"><span class="attr">exclude</span> = [<span class="string">"pkg*"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据文件</span></span><br><span class="line"><span class="section">[tool.setuptools.package-data]</span></span><br><span class="line"><span class="comment"># xxx 为指定的包名</span></span><br><span class="line"><span class="attr">xxx</span> = [<span class="string">"**/*"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用文件中变量动态生成版本信息</span></span><br><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="attr">dynamic</span> = [<span class="string">"version"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.setuptools.dynamic]</span></span><br><span class="line"><span class="comment"># attr 指向xxx包中__version__文件中 __version__变量</span></span><br><span class="line"><span class="attr">version</span> = { attr = <span class="string">"xxx.__version__.__version__"</span> }</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/serious-scaffold/serious-scaffold-python/blob/main/pyproject.toml">https://github.com/serious-scaffold/serious-scaffold-python/blob/main/pyproject.toml</a></p>
</li>
</ul>
<h3 id="setuptools-scm">setuptools-scm</h3>
<p><a href="https://github.com/pypa/setuptools_scm">setuptools-scm</a> 从 git 或 hg 元数据中提取 Python 包版本，而不是将它们声明为版本参数或在 SCM 托管文件中。</p>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># in pyproject.toml</span></span><br><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">"xxx"</span></span><br><span class="line"><span class="comment"># version = "0.0.1"  # Remove any existing version parameter.</span></span><br><span class="line"><span class="attr">dynamic</span> = [<span class="string">"version"</span>]</span><br><span class="line"><span class="section">[tool.setuptools_scm]</span></span><br><span class="line"><span class="attr">write_to</span> = <span class="string">"xxx/_version.py"</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.check-sdist]</span></span><br><span class="line"><span class="attr">sdist-only</span> = [<span class="string">"xxx/_version.py"</span>]</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/pylicense">https://github.com/msclock/pylicense</a></p>
</li>
</ul>
<h3 id="ruff">ruff</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://beta.ruff.rs/docs/">https://beta.ruff.rs/docs/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://beta.ruff.rs/docs/settings/">https://beta.ruff.rs/docs/settings/</a></p>
</li>
</ul>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># in pyproject.toml</span></span><br><span class="line"><span class="section">[tool.ruff]</span></span><br><span class="line"><span class="attr">select</span> = [</span><br><span class="line">  <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"W"</span>, <span class="comment"># flake8</span></span><br><span class="line">  <span class="string">"B"</span>,           <span class="comment"># flake8-bugbear</span></span><br><span class="line">  <span class="string">"I"</span>,           <span class="comment"># isort</span></span><br><span class="line">  <span class="string">"N"</span>,           <span class="comment"># pep8-naming</span></span><br><span class="line">  <span class="string">"ARG"</span>,         <span class="comment"># flake8-unused-arguments</span></span><br><span class="line">  <span class="string">"C4"</span>,          <span class="comment"># flake8-comprehensions</span></span><br><span class="line">  <span class="string">"EM"</span>,          <span class="comment"># flake8-errmsg</span></span><br><span class="line">  <span class="string">"ICN"</span>,         <span class="comment"># flake8-import-conventions</span></span><br><span class="line">  <span class="string">"ISC"</span>,         <span class="comment"># flake8-implicit-str-concat</span></span><br><span class="line">  <span class="string">"PGH"</span>,         <span class="comment"># pygrep-hooks</span></span><br><span class="line">  <span class="string">"PIE"</span>,         <span class="comment"># flake8-pie</span></span><br><span class="line">  <span class="string">"PL"</span>,          <span class="comment"># pylint</span></span><br><span class="line">  <span class="string">"PT"</span>,          <span class="comment"># flake8-pytest-style</span></span><br><span class="line">  <span class="string">"RET"</span>,         <span class="comment"># flake8-return</span></span><br><span class="line">  <span class="string">"RUF100"</span>,      <span class="comment"># Ruff-specific</span></span><br><span class="line">  <span class="string">"SIM"</span>,         <span class="comment"># flake8-simplify</span></span><br><span class="line">  <span class="string">"UP"</span>,          <span class="comment"># pyupgrade</span></span><br><span class="line">  <span class="string">"YTT"</span>,         <span class="comment"># flake8-2020</span></span><br><span class="line">]</span><br><span class="line"><span class="attr">ignore</span> = [</span><br><span class="line">  <span class="string">"PLR"</span>,     <span class="comment"># Design related pylint</span></span><br><span class="line">  <span class="string">"E501"</span>,    <span class="comment"># Line too long (Black is enough)</span></span><br><span class="line">  <span class="string">"PT011"</span>,   <span class="comment"># Too broad with raises in pytest</span></span><br><span class="line">  <span class="string">"PT004"</span>,   <span class="comment"># Fixture that doesn't return needs underscore (no, it is fine)</span></span><br><span class="line">  <span class="string">"SIM118"</span>,  <span class="comment"># iter(x) is not always the same as iter(x.keys())</span></span><br><span class="line">  <span class="string">"ARG001"</span>,  <span class="comment"># Ignore unused arguments</span></span><br><span class="line">  <span class="string">"PLW0603"</span>, <span class="comment"># We're fine with global vars</span></span><br><span class="line">]</span><br><span class="line"><span class="attr">target-version</span> = <span class="string">"py37"</span></span><br><span class="line"><span class="attr">src</span> = [<span class="string">"src"</span>]</span><br><span class="line"><span class="attr">unfixable</span> = [<span class="string">"T20"</span>]</span><br><span class="line"><span class="attr">exclude</span> = []</span><br><span class="line"><span class="comment"># Allow lines to be as long as 120 characters.</span></span><br><span class="line"><span class="attr">line-length</span> = <span class="number">120</span></span><br><span class="line"><span class="attr">isort.known-first-party</span> = [<span class="string">"env"</span>, <span class="string">"pybind11_cross_module_tests"</span>, <span class="string">"pybind11_tests"</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.ruff.per-file-ignores]</span> <span class="comment"># rules on the per file basis include common ignore rules</span></span><br><span class="line"><span class="attr">"tests/**"</span> = [<span class="string">"EM"</span>, <span class="string">"N"</span>]</span><br><span class="line"><span class="attr">"tests/test_call_policies.py"</span> = [<span class="string">"PLC1901"</span>]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="black">black</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>black: 标准化项目格式化</p>
</li>
</ul>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 每行不超过 120</span></span><br><span class="line"><span class="section">[tool.black]</span></span><br><span class="line"><span class="attr">line-length</span> = <span class="number">120</span></span><br><span class="line"><span class="attr">target-version</span> = [<span class="string">'py38'</span>]</span><br><span class="line"><span class="attr">include</span> = <span class="string">'\.pyi?$'</span></span><br><span class="line"><span class="attr">exclude</span> = <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(</span></span><br><span class="line"><span class="string">  /(</span></span><br><span class="line"><span class="string">      \.eggs         # exclude a few common directories in the</span></span><br><span class="line"><span class="string">    | \.git          # root of the project</span></span><br><span class="line"><span class="string">    | \.mypy_cache</span></span><br><span class="line"><span class="string">    | \.venv</span></span><br><span class="line"><span class="string">    | _build</span></span><br><span class="line"><span class="string">    | build</span></span><br><span class="line"><span class="string">    | dist</span></span><br><span class="line"><span class="string">  )/</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用说明</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只检查错误</span></span><br><span class="line">docker run --<span class="built_in">rm</span>  -v <span class="variable">$PWD</span>:/src -w /src \</span><br><span class="line">    pyfound/black:latest_release \</span><br><span class="line">    bash -c <span class="string">"black --check ."</span></span><br><span class="line"><span class="comment"># 自动更正</span></span><br><span class="line">docker run --<span class="built_in">rm</span>  -v <span class="variable">$PWD</span>:/src -w /src \</span><br><span class="line">    pyfound/black:latest_release \</span><br><span class="line">    bash -c <span class="string">"block --quiet ."</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="isort">isort</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>isort: 标注化项目 import 语句</p>
</li>
</ul>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># import导入遵循 black 工具</span></span><br><span class="line"><span class="section">[tool.isort]</span></span><br><span class="line"><span class="attr">profile</span> = <span class="string">"black"</span></span><br><span class="line"><span class="attr">line_length</span> = <span class="number">120</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用说明</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 只检查错误</span></span><br><span class="line">docker run --<span class="built_in">rm</span>  -v <span class="variable">$PWD</span>:/src -w /src \</span><br><span class="line">    xcgd/isort \</span><br><span class="line">    sh -c <span class="string">"isort --check ."</span></span><br><span class="line"><span class="comment"># 自动更正</span></span><br><span class="line">docker run --<span class="built_in">rm</span>  -v <span class="variable">$PWD</span>:/src -w /src \</span><br><span class="line">    xcgd/isort \</span><br><span class="line">    sh -c <span class="string">"isort ."</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="vulture">vulture</h3>
<p>Vulture 是一个 Python 代码分析工具，用于查找未使用的代码。</p>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[tool.vulture]</span></span><br><span class="line"><span class="comment"># 排除不需要分析的文件或目录。</span></span><br><span class="line"><span class="attr">exclude</span> = []</span><br><span class="line"><span class="attr">ignore_decorators</span> = []</span><br><span class="line"><span class="attr">ignore_names</span> = []</span><br><span class="line"><span class="comment"># 生成一个白名单，其中包含已经被使用的标识符。</span></span><br><span class="line"><span class="attr">make_whitelist</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置最小置信度，即 Vulture 认为代码未使用的最低置信度。</span></span><br><span class="line"><span class="attr">min_confidence</span> = <span class="number">80</span></span><br><span class="line"><span class="comment"># 指定要分析的路径。</span></span><br><span class="line"><span class="attr">paths</span> = [<span class="string">"xxx"</span>]</span><br><span class="line"><span class="comment"># 按文件大小排序。</span></span><br><span class="line"><span class="attr">sort_by_size</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 是否显示详细的输出信息。</span></span><br><span class="line"><span class="attr">verbose</span> = <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="pylint">pylint</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>pylint: 代码 lint</p>
</li>
</ul>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[tool.pylint]</span></span><br><span class="line"><span class="attr">py-version</span> = <span class="string">"3.7"</span> <span class="comment"># 基于 python3.7 lint</span></span><br><span class="line"><span class="attr">reports</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">persistent</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">output-format</span> = [ <span class="comment"># lint 输出格式</span></span><br><span class="line">    <span class="comment"># "json:.report.pylint.json",</span></span><br><span class="line">    <span class="string">"colorized"</span>,</span><br><span class="line">]</span><br><span class="line"><span class="attr">messages_control.disable</span> = [ <span class="comment"># lint时静默错误选项</span></span><br><span class="line">    <span class="string">"design"</span>,</span><br><span class="line">    <span class="string">"fixme"</span>,</span><br><span class="line">    <span class="string">"imports"</span>,</span><br><span class="line">    <span class="string">"line-too-long"</span>,</span><br><span class="line">    <span class="string">"imports"</span>,</span><br><span class="line">    <span class="string">"invalid-name"</span>,</span><br><span class="line">    <span class="string">"protected-access"</span>,</span><br><span class="line">    <span class="string">"missing-module-docstring"</span>,</span><br><span class="line">    <span class="string">"consider-using-f-string"</span>,</span><br><span class="line">    <span class="string">"unspecified-encoding"</span>,</span><br><span class="line">]</span><br><span class="line"><span class="attr">ignored-modules</span> = [<span class="string">"xxx"</span>] <span class="comment"># 忽视某些模块错误</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="mypy">mypy</h3>
<p>集成 mypy 代码检查，配置示例如下:</p>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[tool.mypy]</span></span><br><span class="line"><span class="attr">explicit_package_bases</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">mypy_path</span> = <span class="string">"."</span></span><br><span class="line"><span class="attr">namespace_packages</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ignore_missing_imports</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">ignore_missing_imports_per_module</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment"># disallow_untyped_defs = true</span></span><br><span class="line"><span class="comment"># no_implicit_optional = true</span></span><br><span class="line"><span class="comment"># strict_optional = true</span></span><br><span class="line"><span class="comment"># warn_redundant_casts = true</span></span><br><span class="line"><span class="attr">check_untyped_defs</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">exclude</span> = <span class="string">'''(?x)(</span></span><br><span class="line"><span class="string">    directory-to-exclude</span></span><br><span class="line"><span class="string">)'''</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[tool.mypy.overrides]]</span></span><br><span class="line"><span class="attr">module</span> = [<span class="string">"skbuild.*"</span>, <span class="string">"setuptools.*"</span>, <span class="string">"another-module-name.*"</span>]</span><br><span class="line"><span class="attr">ignore_missing_imports</span> = <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="pytest">pytest</h3>
<p>使用集成 pytest 单元测试，配置示例如下:</p>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="section">[tool.pytest.ini_options]</span></span><br><span class="line"><span class="attr">testpaths</span> = [<span class="string">"test"</span>]</span><br><span class="line"><span class="attr">python_files</span> = [<span class="string">"test_*.py"</span>, <span class="string">"*_test.py"</span>, <span class="string">"testing/python/*.py"</span>]</span><br><span class="line"><span class="attr">python_classes</span> = [<span class="string">"Test"</span>, <span class="string">"Acceptance"</span>]</span><br><span class="line"><span class="attr">python_functions</span> = [<span class="string">"test"</span>]</span><br><span class="line"><span class="attr">filterwarnings</span> = [<span class="string">"error"</span>]</span><br><span class="line"><span class="attr">xfail_strict</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">addopts</span> = [</span><br><span class="line">    <span class="string">"-ra"</span>,</span><br><span class="line">    <span class="string">"--showlocals"</span>,</span><br><span class="line">    <span class="string">"--strict-markers"</span>,</span><br><span class="line">    <span class="string">"--strict-config"</span>,</span><br><span class="line">    <span class="comment"># 导入模块时使用importlib模块</span></span><br><span class="line">    <span class="string">"--import-mode=importlib"</span></span><br><span class="line">]</span><br><span class="line"><span class="attr">minversion</span> = <span class="string">"6.0"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="codespell">codespell</h3>
<p>使用 codespell 检测拼写错误，配置示例如下:</p>
<figure class="highlight toml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># pyproject.toml</span></span><br><span class="line"><span class="section">[tool.codespell]</span></span><br><span class="line"><span class="comment"># <span class="doctag">note:</span> pre-commit passes explicit lists of files here, which this skip file list doesn't override -</span></span><br><span class="line"><span class="comment"># this is only to allow you to run codespell interactively</span></span><br><span class="line"><span class="attr">skip</span> = <span class="string">"./.git,./.github"</span></span><br><span class="line"><span class="comment"># ignore short words, and typename parameters like offset</span></span><br><span class="line"><span class="attr">ignore-regex</span> = <span class="string">"\\b(.{1,4}|[A-Z]\\w*T)\\b"</span></span><br><span class="line"><span class="comment"># ignore allowed words</span></span><br><span class="line"><span class="attr">ignore-words-list</span> = <span class="string">"passing"</span></span><br><span class="line"><span class="comment"># use the 'clear' dictionary for unambiguous spelling mistakes</span></span><br><span class="line"><span class="attr">builtin</span> = <span class="string">"clear"</span></span><br><span class="line"><span class="comment"># disable warnings about binary files and wrong encoding</span></span><br><span class="line"><span class="attr">quiet-level</span> = <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure>
<p>以上需要在配合 .pre-commit-config.yaml 使用</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/codespell-project/codespell</span></span><br><span class="line">  <span class="attr">rev:</span> <span class="string">v2.2.4</span></span><br><span class="line">  <span class="attr">hooks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">codespell</span></span><br><span class="line">    <span class="attr">additional_dependencies:</span> [<span class="string">tomli</span>]</span><br><span class="line">    <span class="attr">args:</span> [<span class="string">"--toml"</span>, <span class="string">"pyproject.toml"</span>]</span><br></pre></td></tr></tbody></table></figure>
<h3 id="py-typed">py.typed</h3>
<p><code>py.typed</code> 文件是用来标识 Python 包是类型注解的支持者。当一个包中存在 <code>py.typed</code> 文件时，它表示该包是类型注解的友好包，即使用了类型注解来增强代码可读性和可维护性。</p>
<p><code>py.typed</code> 文件的存在告诉类型检查工具（如 mypy）和 IDE（如 PyCharm）等，该包中包含了类型注解，并且可以进行静态类型检查和自动补全等操作。</p>
<blockquote>
<p>[!NOTE]<br>
需要注意的是，<code>py.typed</code> 文件本身不包含任何代码或内容，它只是一个标识文件。</p>
</blockquote>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://typing.readthedocs.io/en/latest/source/libraries.html#marking-a-package-as-providing-type-information">https://typing.readthedocs.io/en/latest/source/libraries.html#marking-a-package-as-providing-type-information</a></p>
</li>
<li class="lvl-2">
<p><a href="https://devblogs.microsoft.com/python/pylance-introduces-five-new-features-that-enable-type-magic-for-python-developers/">https://devblogs.microsoft.com/python/pylance-introduces-five-new-features-that-enable-type-magic-for-python-developers/</a></p>
</li>
</ul>
<h3 id="Packing">Packing</h3>
<p>配置完 pyproject.toml 后，打包可以使用以下命令:</p>
<p>使用 build</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install build</span><br><span class="line">python -m build</span><br></pre></td></tr></tbody></table></figure>
<p>使用 pip</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip wheel .</span><br></pre></td></tr></tbody></table></figure>
<h3 id="upload-to-pypi">upload to pypi</h3>
<p>打包完后，如果需要上传到 pypi 上，参考 <a href="https://pypi.org/project/GitHub-Action-Python-Example/">Github-Action-Python-Example</a>.</p>
<h4 id="twine">twine</h4>
<p>上传工具一般选择 twine, 使用方式如下:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install twine</span><br><span class="line"><span class="comment"># Packing locally</span></span><br><span class="line">python -m build</span><br><span class="line"><span class="comment"># Upload package in the generated folder dist</span></span><br><span class="line"><span class="built_in">export</span> TWINE_USERNAME=__token__</span><br><span class="line"><span class="comment"># api key generated by pypi</span></span><br><span class="line"><span class="built_in">export</span> TWINE_PASSWORD=[key]</span><br><span class="line">twine upload --verbose --skip-existing dist/*</span><br></pre></td></tr></tbody></table></figure>
<!--
pypi-key is on the edge
-->
<h4 id="集成到-GitHub">集成到 GitHub</h4>
<p>使用 GitHub <a href="https://github.com/pypa/gh-action-pypi-publish">Python pypi upload</a> 模板，使用示例参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/yolov5-utils/blob/main/.github/workflows/python-publish.yml">https://github.com/msclock/yolov5-utils/blob/main/.github/workflows/python-publish.yml</a></p>
</li>
</ul>
<h4 id="集成到-GitLab">集成到 GitLab</h4>
<p>参考 <a href="#twine">twine</a> 配置 GitLab CI 脚本即可.</p>
<h2 id="docs-generator">docs generator</h2>
<p>python 流行的文档生成器，包括 sphinx.</p>
<h3 id="sphinx">sphinx</h3>
<p><a href="https://docs.readthedocs.io/en/stable/index.html">sphinx</a> 是一个非常流行的 python 文档生成工具.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install sphinx</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://sphinx-themes.org/">sphinx-themes</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/264647009">zhihu 简单入门</a></p>
</li>
</ul>
<h4 id="Quickstart">Quickstart</h4>
<p>使用 sphinx-quickstart 工具快速配置</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sphinx-quickstart</span><br><span class="line"><span class="comment"># 后续根据提示设置项目信息</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="api-generation">api generation</h4>
<blockquote>
<p>[!NOTE]<br>
生成完整的 api 依赖于包包含<code>__init__.py</code></p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">aphinx-apidoc -o docs path-to-packages</span><br></pre></td></tr></tbody></table></figure>
<p>接下来将生成的 package 文档指定显示在 index 中.</p>
<h4 id="conf-py"><a href="http://conf.py">conf.py</a></h4>
<h4 id="Add-jupter-support">Add jupter support</h4>
<p><a href="https://docs.readthedocs.io/en/stable/guides/jupyter.html">在 sphinx 文档中集成 jupyter</a></p>
<p>配置集成 jupyter 插件 <a href="https://myst-nb.readthedocs.io/">myst-bn</a>.</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># conf.py</span></span><br><span class="line">extensions = [</span><br><span class="line">    <span class="string">"myst_nb"</span>,</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure>
<p>在 index 中添加 jupyter 链接</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">---</span><br><span class="line">maxdepth: 2</span><br><span class="line">caption: Contents:</span><br><span class="line">---</span><br><span class="line">notebooks/Example 1</span><br></pre></td></tr></tbody></table></figure>
<h3 id="readthedocs">readthedocs</h3>
<p>在 Read the Docs 网站 <a href="https://readthedocs.org/">https://readthedocs.org/</a> 注册，并绑定 GitHub 账户。点击 “Import a Project” 导入项目，输入项目名称和仓库地址，可免费在线托管项目文档。</p>
<h2 id="scikit-build-core">scikit-build-core</h2>
<p><a href="https://github.com/scikit-build/scikit-build-core">scikit-build-core</a> 用于适配基于 cmake 的 python 构建工具.</p>
<p>参考文档:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://scikit-build-core.readthedocs.io/en/latest/index.html">官方文档</a></p>
</li>
</ul>
<p>参考 demo 示例:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/pybind/scikit_build_example">官方示例 scikit_build_example (with pybind11)</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/scikit-build/scikit-build-sample-projects">官方示例 scikit-build-sample-projects</a></p>
</li>
</ul>
<h2 id="multiprocessing">multiprocessing</h2>
<p>主要总结 <code>multiprocessing</code> 的常用方法及问题解决方法。</p>
<!-- more -->
<h3 id="Queue">Queue</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://runebook.dev/zh-CN/docs/python/library/multiprocessing?page=4#multiprocessing.Queue">参考文档 runebook</a></p>
</li>
</ul>
<h3 id="Manager">Manager</h3>
<p>管理器提供了一种创建可以在不同进程之间共享的数据的方法，包括通过网络在不同机器上运行的进程之间共享。管理器对象控制管理共享对象的服务器进程。其他进程可以使用代理访问共享对象。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>multiprocessing.Manager()</p>
</li>
</ul>
<p>返回一个已启动的 SyncManager 对象，该对象可用于在进程之间共享对象。返回的管理器对象对应于一个衍生的子进程，并具有创建共享对象和返回相应代理的方法。</p>
<h4 id="SyncManager">SyncManager</h4>
<p>BaseManager 的子类，可用于进程同步。这种类型的对象由 multiprocessing.Manager () 返回。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://runebook.dev/zh-CN/docs/python/library/multiprocessing?page=7#multiprocessing.managers.SyncManager">参考文档 runebook</a></p>
</li>
</ul>
<h3 id="QA">QA</h3>
<h4 id="RuntimeError-Queue-objects-should-only-be-shared-between-processes-through-inheritance">RuntimeError: Queue objects should only be shared between processes through inheritance</h4>
<p>使用 multiprocessing.Queue 通常会报以上错误。因为 multiprocessing.Queue 只能在父子进程间进行队列同步通信。对于使用进程池，需要使用 multiprocessing.Manager.Queue 创建共享的通信队列。示例:</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue, Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">q, lock</span>):</span><br><span class="line">    lock.acquire()  <span class="comment"># 加上锁</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f"Put <span class="subst">{value}</span> to queue..."</span>)</span><br><span class="line">        q.put(value)</span><br><span class="line">    lock.release()  <span class="comment"># 释放锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">q</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            value = q.get(<span class="literal">False</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f"Get <span class="subst">{value}</span> from queue."</span>)</span><br><span class="line">            time.sleep(random.random())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    manager = multiprocessing.Manager()</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = manager.Queue()</span><br><span class="line">    lock = manager.Lock()  <span class="comment"># 初始化一把锁</span></span><br><span class="line">    p = Pool()</span><br><span class="line">    pw = p.apply_async(write, args=(q, lock))</span><br><span class="line">    pr = p.apply_async(read, args=(q,))</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br></pre></td></tr></tbody></table></figure>
<h3 id="concurrency">concurrency</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://superfastpython.com/learning-paths/">https://superfastpython.com/learning-paths/</a></p>
</li>
</ul>
<h3 id="paths">paths</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>threading in python: <a href="https://superfastpython.com/threading-in-python/">https://superfastpython.com/threading-in-python/</a></p>
</li>
<li class="lvl-2">
<p>threadpoolexecutor: <a href="https://superfastpython.com/threadpoolexecutor-in-python/">https://superfastpython.com/threadpoolexecutor-in-python/</a></p>
</li>
</ul>
<h2 id="加密和解密">加密和解密</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/yyds/p/7072492.html">python 加密解密相关介绍</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/144316610">知乎 - 常见的加密算法实现</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/387705013">知乎 - pyarmor</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/54296517">保护 python 源码</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/stpeace/article/details/41598665">基本 license 原理</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/sobolevn/awesome-cryptography#python">awesome-encryption in python</a></p>
</li>
</ul>
<h3 id="cryptography">cryptography</h3>
<p>cryptography 是一个设计用于向 Python 开发人员公开加密原语和配方的包。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/pyca/cryptography">https://github.com/pyca/cryptography</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.geeksforgeeks.org/multifernet-module-in-python/">multifernet 介绍</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.ssh.com/academy/secrets-management/password-key-rotation">ssh key rotation</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/msclock/pyauthorizer">pyauthorizer 基于 cryptography 的 token 授权工具</a></p>
</li>
</ul>
<h3 id="nuitka">nuitka</h3>
<p>出于安全原因，有时需要将源代码转换为可执行文件，以防止它们被篡改或泄露。有几种工具可以做到这一点，最受欢迎的是 pyinstaller 和 nuitka。这里用的是 nuitka。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/Nuitka/Nuitka">https://github.com/Nuitka/Nuitka</a></p>
</li>
<li class="lvl-2">
<p><a href="https://nuitka.net/doc/user-manual.html#use-cases">https://nuitka.net/doc/user-manual.html#use-cases</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/msclock/pytools">https://gitlab.com/msclock/pytools</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/qq_45752541/article/details/127683219">fastapi 及 nuitka 打包</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/463597594">pyinstaller 及 nuitka 打包</a></p>
</li>
</ul>
<h4 id="plugins">plugins</h4>
<p>在打包某些包时做一些 patch 或者 hacking 操作的插件，方便适配社区发布的包及自定义加密操作.</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/Nuitka/Nuitka/tree/develop/nuitka/plugins">nuitka plugin</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Nuitka/Nuitka/blob/develop/UserPlugin-Creation.rst">create a user plugin</a></p>
</li>
</ul>
<h4 id="configuration">configuration</h4>
<p>若转换后缺少某些依赖 (dll/data)，可以在配置文件中添加。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://nuitka.net/doc/nuitka-package-config.html">https://nuitka.net/doc/nuitka-package-config.html</a></p>
</li>
</ul>
<p>在确定包的依赖时，可以使用以下命令查看是否是缺少依赖关系:</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 列出numpy依赖</span></span><br><span class="line">python -m nuitka --list-package-dlls=numpy</span><br><span class="line">Nuitka-Tools:INFO: Checking package directory <span class="string">'C:\tools\mambaforge\envs\3.8\lib\site-packages\numpy'</span> ..</span><br><span class="line">C:\tools\mambaforge\envs\3.8\lib\site-packages\numpy\.libs</span><br><span class="line">  libopenblas.EL2C6PLE4ZYW3ECEVIV3OXXGRN2NRFM2.gfortran-win_amd64.dll</span><br><span class="line">Nuitka-Tools:INFO: Found 1 DLLs.</span><br><span class="line"></span><br><span class="line"><span class="comment"># !!! shapely 1.8.0以下打包库链接存在bug,尽量用1.8.0以上的版本</span></span><br><span class="line">python -m nuitka  --list-package-dlls=shapely</span><br><span class="line">Nuitka-Tools:INFO: Checking package directory <span class="string">'C:\tools\mambaforge\envs\3.8\lib\site-packages\shapely'</span> ..</span><br><span class="line">C:\tools\mambaforge\envs\3.8\lib\site-packages\shapely\DLLs</span><br><span class="line">  geos.dll</span><br><span class="line">  geos_c.dll</span><br><span class="line">Nuitka-Tools:INFO: Found 2 DLLs.</span><br></pre></td></tr></tbody></table></figure>
<p>更详细的使用自定义配置文件参考<a href="https://gitlab.com/msclock/pytools/-/tree/master/nuitka?ref_type=heads">示例</a></p>
<h3 id="pyarmor">pyarmor</h3>
<p>Pyarmor 是一个用于加密和保护 Python 脚本的工具。它能够在运行时刻保护 Python 脚本代码不被泄露，设置加密后脚本的使用期限，绑定加密脚本到硬盘、网卡等硬件设备。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pyarmor.readthedocs.io/zh/latest/">https://pyarmor.readthedocs.io/zh/latest/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/Svenskithesource/PyArmor-Unpacker">PyArmor-Unpacker (pyarmor 破解器)</a></p>
</li>
</ul>
<h2 id="plugin-mechanisms">plugin mechanisms</h2>
<p>python 中的插件机制主要依赖于包分发或模块加载机制。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pypi.org/project/entrypoints/">entrypoints</a></p>
</li>
<li class="lvl-2">
<p><a href="https://docs.python.org/3/library/importlib.metadata.html#entry-points">importlib.metadata#entry-points</a></p>
</li>
</ul>
<h3 id="Example-of-entrypoints">Example of entrypoints</h3>
<p>基于 entrypoints 的插件机制的使用示例</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/pyauthorizer">https://github.com/msclock/pyauthorizer</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/jimporter/mike">https://github.com/jimporter/mike</a></p>
</li>
</ul>
<h2 id="marshmallow">marshmallow</h2>
<p>适用于各个场景的序列化包 marshmallow</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>验证</strong>: 输入数据。</p>
</li>
<li class="lvl-2">
<p><strong>反序列化</strong>: 输入数据为应用程序级对象。</p>
</li>
<li class="lvl-2">
<p><strong>序列化</strong>: 应用程序级对象为原始 Python 类型。然后，可以将序列化对象呈现为标准格式，例如 JSON ，以便在 HTTP API 中使用。</p>
</li>
</ul>
<h3 id="序列化-反序列化">序列化 &amp; 反序列化</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Item</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    price: Decimal</span><br><span class="line">    date: datetime.date</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于其他的所有类型 fields, 可以参考文档</span></span><br><span class="line"><span class="comment"># https://marshmallow.readthedocs.io/en/stable/marshmallow.fields.html#api-fields</span></span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItemSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    price = fields.Decimal()</span><br><span class="line">    date = fields.Date()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">item = Item(<span class="string">"abc"</span>, Decimal(<span class="string">"1.23456"</span>), datetime.date(<span class="number">2021</span>, <span class="number">6</span>, <span class="number">26</span>))</span><br><span class="line">schema = ItemSchema()</span><br><span class="line">result_obj = schema.dump(item)</span><br><span class="line"><span class="built_in">print</span>(result_obj)</span><br><span class="line"><span class="comment"># 会输出 {'price': Decimal('1.23456'), 'name': 'abc', 'date': '2021-06-26'}</span></span><br><span class="line"></span><br><span class="line">input_data = {<span class="string">"name"</span>: <span class="string">"abc"</span>, <span class="string">"price"</span>: Decimal(<span class="string">"1.23456"</span>), <span class="string">"date"</span>: <span class="string">"2021-06-26"</span>}</span><br><span class="line">load_result = schema.load(input_data)</span><br><span class="line"><span class="built_in">print</span>(load_result)  <span class="comment"># dict</span></span><br><span class="line"><span class="comment"># 输出 {'name': 'abc', 'date': datetime.date(2021, 6, 26), 'price': Decimal('1.23456')}</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="post-load">post_load</h3>
<p>控制反序列化，构造对象</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, post_load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItemSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    price = fields.Decimal()</span><br><span class="line">    date = fields.Date()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_item</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Item(**data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result_obj = schema.dump(item)</span><br><span class="line"><span class="built_in">print</span>(result_obj)</span><br><span class="line"><span class="comment"># 返回 Item(name='abc', price=Decimal('1.23456'), date=datetime.date(2021, 6, 26))</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="fields-Method">fields.Method</h3>
<p>自定义字段序列化需求</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fields, post_load</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItemSchema</span>(<span class="title class_ inherited__">Schema</span>):</span><br><span class="line">    <span class="string">"""Define serialization protocol for class Item</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        name: str to be registered by the schema</span></span><br><span class="line"><span class="string">        price: custom way to be registered</span></span><br><span class="line"><span class="string">        date: date to be registered</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    name = fields.String()</span><br><span class="line">    price = fields.Method(<span class="string">"price_decimal_2_float"</span>, deserialize=<span class="string">"float_2_decimal"</span>)</span><br><span class="line">    date = fields.Date()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @post_load  </span><span class="comment"># post_load to make the schema deserialized as object-like</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_item</span>(<span class="params">self, data, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> Item(**data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price_decimal_2_float</span>(<span class="params">self, item: Item</span>):</span><br><span class="line">        <span class="string">"""price attr to save"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">float</span>(item.price)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">float_2_decimal</span>(<span class="params">self, <span class="built_in">float</span></span>):</span><br><span class="line">        <span class="string">"""price attr to load"""</span></span><br><span class="line">        <span class="keyword">return</span> decimal.Decimal(<span class="built_in">str</span>(<span class="built_in">float</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">item = Item(<span class="string">"abc"</span>, Decimal(<span class="string">"1.23456"</span>), datetime.date(<span class="number">2021</span>, <span class="number">6</span>, <span class="number">26</span>))</span><br><span class="line">schema = ItemSchema()</span><br><span class="line">result_str = schema.dumps(item)</span><br><span class="line"><span class="built_in">print</span>(result_str)</span><br><span class="line"><span class="comment"># {"date": "2021-06-26", "name": "abc", "price": 1.23456}</span></span><br><span class="line">input_str = <span class="string">'{"date": "2021-06-26", "name": "abc", "price": 1.23456}'</span></span><br><span class="line">load_result = schema.loads(input_str)</span><br><span class="line"><span class="built_in">print</span>(load_result)</span><br><span class="line"><span class="comment"># Item(name='abc', price=Decimal('1.23456'), date=datetime.date(2021, 6, 26))</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://marshmallow.readthedocs.io/en/stable/">https://marshmallow.readthedocs.io/en/stable/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.7forz.com/3694/">https://www.7forz.com/3694/</a></p>
</li>
</ul>
<h2 id="pytest-2">pytest</h2>
<p><code>pytest</code> 是一个非常成熟的全功能的 <code>Python</code> 测试框架，主要特点有以下几点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>简单灵活，容易上手，文档丰富；</p>
</li>
<li class="lvl-2">
<p>支持参数化，可以细粒度地控制要测试的测试用例；</p>
</li>
<li class="lvl-2">
<p>能够支持简单的单元测试和复杂的功能测试，还可以用来做 <code>selenium/appnium</code> 等自动化测试、接口自动化测试（<code>pytest</code>+<code>requests</code>）;</p>
</li>
<li class="lvl-2">
<p><code>pytest</code> 具有很多第三方插件，并且可以自定义扩展，比较好用的如 <code>pytest-selenium</code>（集成 <code>selenium</code>）、<code>pytest-html</code>（完美 <code>html</code> 测试报告生成）、<code>pytest-rerunfailures</code>（失败 case 重复执行）、<code>pytest-xdist</code>（多 CPU 分发）等；</p>
</li>
<li class="lvl-2">
<p>测试用例的 <code>skip</code> 和 <code>xfail</code> 处理；</p>
</li>
</ul>
<!-- more -->
<h3 id="退出码">退出码</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>查看退出码</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Python 3.7.8 (tags/v3.7.8:4b47a5b6ba, Jun 28 2020, 08:53:46) [MSC v.1916 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; from pytest import ExitCode</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">help</span>(ExitCode)</span><br><span class="line">Help on class ExitCode <span class="keyword">in</span> module _pytest.config:</span><br><span class="line"></span><br><span class="line">class ExitCode(enum.IntEnum)</span><br><span class="line"> |  ExitCode(value, names=None, *, module=None, qualname=None, <span class="built_in">type</span>=None, start=1)</span><br><span class="line"> |</span><br><span class="line"> |  Encodes the valid <span class="built_in">exit</span> codes by pytest.</span><br><span class="line"> |</span><br><span class="line"> |  Currently <span class="built_in">users</span> and plugins may supply other <span class="built_in">exit</span> codes as well.</span><br><span class="line"> |</span><br><span class="line"> |  .. versionadded:: 5.0</span><br><span class="line"> |</span><br><span class="line"> |  Method resolution order:</span><br><span class="line"> |      ExitCode</span><br><span class="line"> |      enum.IntEnum</span><br><span class="line"> |      builtins.int</span><br><span class="line"> |      enum.Enum</span><br><span class="line"> |      builtins.object</span><br><span class="line"> |</span><br><span class="line"> |  Data and other attributes defined here:</span><br><span class="line"> |</span><br><span class="line"> |  INTERNAL_ERROR = &lt;ExitCode.INTERNAL_ERROR: 3&gt; <span class="comment"># 内部发生错误</span></span><br><span class="line"> |</span><br><span class="line"> |  INTERRUPTED = &lt;ExitCode.INTERRUPTED: 2&gt; <span class="comment"># 测试过程被用户中断</span></span><br><span class="line"> |</span><br><span class="line"> |  NO_TESTS_COLLECTED = &lt;ExitCode.NO_TESTS_COLLECTED: 5&gt; <span class="comment"># 没有实际的运行case</span></span><br><span class="line"> |</span><br><span class="line"> |  OK = &lt;ExitCode.OK: 0&gt;  <span class="comment"># 全部测试case运行成功</span></span><br><span class="line"> |</span><br><span class="line"> |  TESTS_FAILED = &lt;ExitCode.TESTS_FAILED: 1&gt; <span class="comment"># 存在测试case失败</span></span><br><span class="line"> |</span><br><span class="line"> |  USAGE_ERROR = &lt;ExitCode.USAGE_ERROR: 4&gt; <span class="comment"># pytest命令行使用错误</span></span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors inherited from enum.Enum:</span><br><span class="line"> |</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-3">
<p>和 shell 第二次封装调用检测退出码使用 <code>echo $?</code></p>
</li>
<li class="lvl-2">
<p>扩展退出码，通过插件 <code>pytest-custom_exit_code</code> 扩展。</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://docs.pytest.org">pytest 官方文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://learning-pytest.readthedocs.io/">pytest 中文文档</a></p>
</li>
</ul>
<h2 id="Flask">Flask</h2>
<h3 id="Explore-Flask">Explore Flask</h3>
<p><a href="https://github.com/rpicard/explore-flask">Flask Practice</a> 是 github 上社区总结的实践参考.</p>
<h3 id="Flasky">Flasky</h3>
<p><a href="https://github.com/miguelgrinberg/flasky">flasky</a> 是 O’Reilly 的书 Flask Web Development 的第二版的源代码示例</p>
<h3 id="wsgi">wsgi</h3>
<p>Flask 的默认运行模式是单进程单线程，这意味着它在处理请求时是阻塞的。也就是说，当一个请求正在被处理时，其他的请求必须等待。这对于开发和测试来说通常是可以接受的，但在生产环境中，可能需要一个能够同时处理多个请求的服务器。</p>
<p>要使 Flask 非阻塞，可以使用一个能够处理并发请求的 WSGI 服务器，如 Gunicorn 或 uWSGI。这些服务器可以配置为多进程或多线程模式，从而能够同时处理多个请求。</p>
<p>例如，可以使用 Gunicorn 来运行 Flask 应用，并设置工作进程的数量：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gunicorn -w 4 -b 0.0.0.0:5000 <span class="string">'module:app'</span></span><br></pre></td></tr></tbody></table></figure>
<p>在这个命令中，-w 4 设置了 4 个工作进程，这意味着 Gunicorn 可以同时处理 4 个请求。</p>
<p>请注意，虽然这可以提高并发处理能力，但并不能真正实现非阻塞。如果需要非阻塞或异步处理，可能需要考虑使用像 gevent 这样的库，或者使用基于 ASGI 的框架，如 FastAPI 或 Starlette1。</p>
<h3 id="gunicorn">gunicorn</h3>
<p>匹配 flask 的 wsgi 为 gunicorn</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gunicorn -w 4 -b 0.0.0.0:5000 <span class="string">'module:app'</span></span><br></pre></td></tr></tbody></table></figure>
<p>在这个命令中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-w 4 表示启动 4 个工作进程</p>
</li>
<li class="lvl-2">
<p>-b 0.0.0.0:5000 表示绑定到所有 IP 地址的 5000 端口</p>
</li>
<li class="lvl-2">
<p>‘module:app’ 是 flask 应用的导入路径和应用变量。例如，如果应用在 app.py 文件中，应该使用’app:app’</p>
</li>
</ul>
<h3 id="gevent">gevent</h3>
<p>gevent 作为 flask 的 wsgi.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install gevent</span><br></pre></td></tr></tbody></table></figure>
<p>参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/Xin_101/article/details/86663627">gevent 及 flask 阻塞评测</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.csdn.net/lcylln/article/details/33731183">flask 及 tornado, gevent 性能评测</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/131364462">gevent 知乎参考</a></p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gevent.pywsgi <span class="keyword">import</span> WSGIServer</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"></span><br><span class="line">http_server = WSGIServer((<span class="string">"0.0.0.0"</span>, <span class="number">8000</span>), flask.Flask(__file__))</span><br><span class="line">http_server.serve_forever()</span><br></pre></td></tr></tbody></table></figure>
<h2 id="FastAPI">FastAPI</h2>
<p>参考链接:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/157999491">https://zhuanlan.zhihu.com/p/157999491</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/tiangolo/full-stack-fastapi-postgresql">https://github.com/tiangolo/full-stack-fastapi-postgresql</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=iWS9ogMPOI0">https://www.youtube.com/watch?v=iWS9ogMPOI0</a></p>
</li>
</ul>
<h3 id="uvicorn">uvicorn</h3>
<p>fastapi 通常配合 uvicorn 在生成环境中使用.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">uvicorn main:app --reload</span><br></pre></td></tr></tbody></table></figure>
<h2 id="subprocess">subprocess</h2>
<h3 id="subprocess运行子进程">subprocess 运行子进程</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">args = [<span class="string">"python"</span>, <span class="string">"-c"</span>, <span class="string">'"print(hello)"'</span>]</span><br><span class="line">subprocess.run(args=args, capture_output=<span class="literal">True</span>).stdout.decode().strip(<span class="string">"\n"</span>)</span><br></pre></td></tr></tbody></table></figure>
<h2 id="argparse">argparse</h2>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># tt.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>():</span><br><span class="line">    <span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">    root_parser = argparse.ArgumentParser()</span><br><span class="line">    subs = root_parser.add_subparsers(dest=<span class="string">"action"</span>)</span><br><span class="line">    subs.required = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    sub1_parser = subs.add_parser(<span class="string">"sub1"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># positional argument</span></span><br><span class="line">    sub1_parser.add_argument(<span class="string">"p1"</span>)</span><br><span class="line">    <span class="comment"># optional</span></span><br><span class="line">    sub1_parser.add_argument(<span class="string">"--batch_size"</span>, <span class="string">"-b"</span>, default=<span class="number">8</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line">    <span class="keyword">return</span> root_parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    FLAGS = parse_args()</span><br><span class="line">    <span class="built_in">print</span>(**<span class="built_in">vars</span>(FLAGS))  <span class="comment"># print as dict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python tt.py</span></span><br><span class="line"><span class="comment"># usage: tt.py [-h] {sub1} ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># positional arguments:</span></span><br><span class="line"><span class="comment">#   {sub1}</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># optional arguments:</span></span><br><span class="line"><span class="comment">#   -h, --help  show this help message and exit</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="gradio">gradio</h2>
<p><a href="https://www.gradio.app/">gradio</a> 是一个快速构建 AI demo app 的 web 应用框架。安装 <code>pip install gradio</code>.</p>
<p>教程参考:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.gradio.app/docs/">gradio docs</a></p>
</li>
<li class="lvl-2">
<p><a href="https://blog.51cto.com/u_15485092/6223566">51cto blog Gradio 入门到进阶全网最详细教程</a></p>
</li>
</ul>
<h3 id="Quickstart-2">Quickstart</h3>
<p>官方示例，完整文档<a href="https://www.gradio.app/quickstart/">参考</a>.</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gradio <span class="keyword">as</span> gr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">"!"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iface = gr.Interface(fn=greet, inputs=<span class="string">"text"</span>, outputs=<span class="string">"text"</span>)</span><br><span class="line">iface.test_launch()</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Share-app">Share app</h3>
<p>共享 app <a href="https://www.gradio.app/sharing-your-app/">参考</a></p>
<p>以下是一个 fast api</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">from fastapi import FastAPI</span><br><span class="line">import gradio as gr</span><br><span class="line"></span><br><span class="line">CUSTOM_PATH = <span class="string">"/gradio"</span></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.get(<span class="string">"/"</span>)</span><br><span class="line">def read_main():</span><br><span class="line">    <span class="built_in">return</span> {<span class="string">"message"</span>: <span class="string">"This is your main app"</span>}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io = gr.Interface(lambda x: <span class="string">"Hello, "</span> + x + <span class="string">"!"</span>, <span class="string">"textbox"</span>, <span class="string">"textbox"</span>)</span><br><span class="line">app = gr.mount_gradio_app(app, io, path=CUSTOM_PATH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run this from the terminal as you would normally start a FastAPI app: `uvicorn run:app`</span></span><br><span class="line"><span class="comment"># and navigate to http://localhost:8000/gradio in your browser.</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="streamlit">streamlit</h2>
<p><a href="https://www.gradio.app/">streamlit</a> 是一个相比于 gradio 更基础的 web app  构建框架.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>docs: <a href="https://docs.streamlit.io/">https://docs.streamlit.io/</a></p>
</li>
</ul>
<h2 id="Fire">Fire</h2>
<p><a href="https://github.com/google/python-fire">Fire</a> 将转换任何 Python 模块、类、对象、函数等 (任何 Python 组件都可以工作！) 变成了 CLI。它被称为 Fire 是因为当调用 Fire () 时，它会激活命令。</p>
<h3 id="Using-function">Using function</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name=<span class="string">"World"</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello {name}!"</span>.<span class="built_in">format</span>(name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fire.Fire(hello)  <span class="comment"># 当不显示指定时,默认全部导出</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python hello.py --<span class="built_in">help</span></span><br><span class="line">INFO: Showing <span class="built_in">help</span> with the <span class="built_in">command</span> <span class="string">'hello.py -- --help'</span>.</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">    hello.py</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">    hello.py &lt;flags&gt;</span><br><span class="line"></span><br><span class="line">FLAGS</span><br><span class="line">    --name=NAME</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Using-class">Using class</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">"""A simple calculator class."""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">double</span>(<span class="params">self, number</span>):</span><br><span class="line">        <span class="string">"""subcommand 1"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * number</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">triple</span>(<span class="params">self, number</span>):</span><br><span class="line">        <span class="string">"""subcommand 2"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> * number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fire.Fire(Calculator)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Using-object">Using object</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    calculator = Calculator()</span><br><span class="line">    fire.Fire(calculator)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Define-subcommand">Define subcommand</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用函数</p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fire.Fire()</span><br><span class="line"><span class="comment"># 显示指定暴露方法</span></span><br><span class="line"><span class="comment"># fire.Fire({</span></span><br><span class="line"><span class="comment">#   'add': add,</span></span><br><span class="line"><span class="comment">#   'mul': multiply,</span></span><br><span class="line"><span class="comment"># })</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="#using-class">使用类</a></p>
</li>
</ul>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># example.py</span></span><br><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BrokenCalculator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, offset=<span class="number">1</span></span>):</span><br><span class="line">        <span class="string">"""构造函数中定义了参数，那么这些参数(offset)都会作为整个命令行程序的选项参数。"""</span></span><br><span class="line">        <span class="variable language_">self</span>._offset = offset</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y + <span class="variable language_">self</span>._offset</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">self, x, y</span>):</span><br><span class="line">        <span class="keyword">return</span> x * y + <span class="variable language_">self</span>._offset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fire.Fire(BrokenCalculator)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python example.py --<span class="built_in">help</span></span><br><span class="line">INFO: Showing <span class="built_in">help</span> with the <span class="built_in">command</span> <span class="string">'example.py -- --help'</span>.</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">    example.py</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">    example.py &lt;flags&gt;</span><br><span class="line"></span><br><span class="line">FLAGS</span><br><span class="line">    --offset=OFFSET</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Embedded-command">Embedded command</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IngestionStage</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Ingesting! Nom nom nom..."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigestionStage</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self, volume=<span class="number">1</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">" "</span>.join([<span class="string">"Burp!"</span>] * volume)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">status</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Satiated."</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.ingestion = IngestionStage()</span><br><span class="line">        <span class="variable language_">self</span>.digestion = DigestionStage()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.ingestion.run()  <span class="comment">#</span></span><br><span class="line">        <span class="variable language_">self</span>.digestion.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fire.Fire(Pipeline)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Using-attr-access">Using attr access</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line">cities = {</span><br><span class="line">    <span class="string">"hz"</span>: (<span class="number">310000</span>, <span class="string">"杭州"</span>),</span><br><span class="line">    <span class="string">"bj"</span>: (<span class="number">100000</span>, <span class="string">"北京"</span>),</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">City</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, code</span>):</span><br><span class="line">        info = cities.get(code)</span><br><span class="line">        <span class="variable language_">self</span>.zipcode = info[<span class="number">0</span>] <span class="keyword">if</span> info <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.city = info[<span class="number">1</span>] <span class="keyword">if</span> info <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fire.Fire(City)</span><br></pre></td></tr></tbody></table></figure>
<p>这里直接指定属性访问即可</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python example.py --code bj zipcode</span><br><span class="line">100000</span><br><span class="line">$ python example.py --code hz city</span><br><span class="line">杭州</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Using-command-chain">Using command chain</h3>
<p>实现命令链式调用，需要在实例方法中返回 self.</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.result = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.express = <span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f"<span class="subst">{self.express}</span> = <span class="subst">{self.result}</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="variable language_">self</span>.result += x</span><br><span class="line">        <span class="variable language_">self</span>.express = <span class="string">f"<span class="subst">{self.express}</span>+<span class="subst">{x}</span>"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sub</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="variable language_">self</span>.result -= x</span><br><span class="line">        <span class="variable language_">self</span>.express = <span class="string">f"<span class="subst">{self.express}</span>-<span class="subst">{x}</span>"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="variable language_">self</span>.result *= x</span><br><span class="line">        <span class="variable language_">self</span>.express = <span class="string">f"(<span class="subst">{self.express}</span>)*<span class="subst">{x}</span>"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">div</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="variable language_">self</span>.result /= x</span><br><span class="line">        <span class="variable language_">self</span>.express = <span class="string">f"(<span class="subst">{self.express}</span>)/<span class="subst">{x}</span>"</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fire.Fire(Calculator)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python calculator.py add 1 sub 2 mul 3 div 4</span><br><span class="line">((+<span class="number">1</span>-<span class="number">2</span>)*<span class="number">3</span>)/<span class="number">4</span> = -<span class="number">0.75</span></span><br><span class="line"></span><br><span class="line">$ python calculator.py add <span class="number">1</span> sub <span class="number">2</span> mul <span class="number">3</span> div <span class="number">4</span> add <span class="number">4</span> sub <span class="number">3</span> mul <span class="number">2</span> div <span class="number">1</span></span><br><span class="line">((((<span class="number">0</span>+<span class="number">1</span>-<span class="number">2</span>)*<span class="number">3</span>)/<span class="number">4</span>+<span class="number">4</span>-<span class="number">3</span>)*<span class="number">2</span>)/<span class="number">1</span> = <span class="number">0.5</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Using-args-and-kwargs">Using *args and **kwargs</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># example.py</span></span><br><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fargs</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="string">"""位置参数调用:python example.py fargs a b c"""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fkwargs</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="string">"""选项参数调用:python example.py fargs --a a1 --b b1 --c c1"""</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    fire.Fire()</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 没有使用分隔符，upper 被作为位置参数</span></span><br><span class="line">$ python example.py fargs a b c upper</span><br><span class="line">(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'upper'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用了分隔符，upper(内置方法) 被作为子命令</span></span><br><span class="line">$ python example.py fargs a b c - upper</span><br><span class="line">(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Parameter-type-in-fire">Parameter type in fire</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># example.py</span></span><br><span class="line"><span class="keyword">import</span> fire</span><br><span class="line"></span><br><span class="line">fire.Fire(<span class="keyword">lambda</span> obj: <span class="built_in">type</span>(obj).__name__)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ python example.py 10</span><br><span class="line">int</span><br><span class="line">$ python example.py 10.0</span><br><span class="line"><span class="built_in">float</span></span><br><span class="line">$ python example.py hello</span><br><span class="line">str</span><br><span class="line">$ python example.py <span class="string">'(1,2)'</span></span><br><span class="line">tuple</span><br><span class="line">$ python example.py [1,2]</span><br><span class="line">list</span><br><span class="line">$ python example.py True</span><br><span class="line">bool</span><br><span class="line">$ python example.py {name: David}</span><br><span class="line">dict</span><br><span class="line">$ python example.py <span class="string">'{"name": "David Bieber"}'</span></span><br><span class="line">dict</span><br></pre></td></tr></tbody></table></figure>
<h2 id="click">click</h2>
<!-- https://zhuanlan.zhihu.com/p/90307978 -->
<h3 id="Define-subcommand-2">Define subcommand</h3>
<p>click 创建子命令，需要 click.group 创建一个命令组</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@click.group()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cli</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@cli.command(<span class="params"><span class="string">'publish'</span></span>) </span><span class="comment"># 或 @cli.command()</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">"--model_name"</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="built_in">help</span>=<span class="string">"Model name"</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="meta">@click.option(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">"--model_directory"</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="built_in">type</span>=click.Path(<span class="params">exists=<span class="literal">True</span>, readable=<span class="literal">True</span></span>),</span></span></span><br><span class="line"><span class="params"><span class="meta">    required=<span class="literal">True</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="built_in">help</span>=<span class="string">"Model filepath"</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">publish</span>(<span class="params">model_name, model_directory, flavor</span>):</span><br><span class="line">    <span class="comment"># ... existing code ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    cli()</span><br></pre></td></tr></tbody></table></figure>
<h2 id="pre-commit">pre-commit</h2>
<p><a href="https://github.com/pre-commit/pre-commit">pre-commit</a> 用于管理和维护多语言预提交挂钩的框架的使用经验。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pre-commit.com/">https://pre-commit.com/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/pre-commit/pre-commit">https://github.com/pre-commit/pre-commit</a></p>
</li>
</ul>
<h3 id="Install">Install</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 该工具可通过 pip 直接安装。</span></span><br><span class="line">pip3 install pre-commit</span><br><span class="line"><span class="comment"># 集成到当前的项目当中</span></span><br><span class="line">pre-commit install</span><br></pre></td></tr></tbody></table></figure>
<h3 id="pre-commit-config-yaml">.pre-commit-config.yaml</h3>
<p><code>pre-commit</code> 工具通过配置文件 <code>.pre-commit-config.yaml</code> 控制代码提交等操作。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建文件该配置文件，放于根目录，或者使用 <code>pre-commit sample-config</code> 生成模板，相关模板字段含义参考 <a href="https://pre-commit.com/#pre-commit-configyaml---top-level">官方文档</a>。</p>
</li>
<li class="lvl-2">
<p>根据需要自定义配置<a href="https://pre-commit.com/hooks.html">插件 plugin</a>，这里以配置格式化工具 <a href="https://github.com/psf/black">black</a> 工具为例。</p>
</li>
</ul>
<blockquote>
<p>[!TIP]<br>
配置好后，可使用 black 的徽章 <a href="https://github.com/psf/black"><img data-src="https://img.shields.io/badge/code%20style-black-000000.svg" alt="Code style: black."></a>，表示该项目通过该工具检查。</p>
<p>同样，也可附上，pre-commit 的徽章 <a href="https://github.com/pre-commit/pre-commit"><img data-src="https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&amp;logoColor=white" alt="pre-commit."></a>。</p>
</blockquote>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">repos:</span></span><br><span class="line">  <span class="comment"># Black, the code formatter, natively supports pre-commit</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/psf/black</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">"22.6.0"</span> <span class="comment"># Keep in sync with blacken-docs</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">black</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Also code format the docs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/asottile/blacken-docs</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">"v1.12.1"</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">blacken-docs</span></span><br><span class="line">        <span class="attr">additional_dependencies:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">black==22.6.0</span> <span class="comment"># keep in sync with black hook</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="pre-commit-cli">pre-commit cli</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 所有仓库代码都运行</span></span><br><span class="line">pre-commit run -a</span><br><span class="line"><span class="comment"># 注册提交阶段执行钩子</span></span><br><span class="line">pre-commit install --hook-type commit-msg</span><br><span class="line"><span class="comment"># 卸载相应钩子</span></span><br><span class="line">pre-commit uninstall --hook-type commit-msg --hook-type pre-commit</span><br><span class="line"><span class="comment"># 卸载 pre-commit 钩子</span></span><br><span class="line">pre-commit uninstall</span><br><span class="line"><span class="comment"># 执行对应配置钩子 black 格式化代码</span></span><br><span class="line">pre-commit run black</span><br></pre></td></tr></tbody></table></figure>
<h3 id="常用配置插件">常用配置插件</h3>
<p>这里给出实际项目中使用示例 <code>.pre-commit-config.yaml</code> ，并对某些字段附上了相应的说明。</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># .pre-commit-config.yaml</span></span><br><span class="line"><span class="comment"># To use:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     pre-commit run -a</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Or:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     pre-commit install  # (runs every time you commit in git)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To update this file:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     pre-commit autoupdate</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See https://github.com/pre-commit/pre-commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (optional: default false) set to true to have pre-commit stop running hooks after the first failure</span></span><br><span class="line"><span class="attr">fail_fast:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (optional: default ^$) global file exclude pattern.The below ignores sub/dir1, sub/dir2, *.drawio.</span></span><br><span class="line"><span class="attr">exclude:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  (?x)(</span></span><br><span class="line"><span class="string">    ^(sub/dir1) |</span></span><br><span class="line"><span class="string">    ^(sub/dir2) |</span></span><br><span class="line"><span class="string">    ^.*\.drawio</span></span><br><span class="line"><span class="string">  )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="comment"># (optional: default '') global file include pattern.</span></span><br><span class="line"><span class="attr">files:</span> <span class="string">''</span> <span class="comment"># set '' as default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A list of repository mappings.</span></span><br><span class="line"><span class="attr">repos:</span></span><br><span class="line">  <span class="comment"># Standard hooks</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/pre-commit/pre-commit-hooks</span> <span class="comment"># the repository url to git clone from</span></span><br><span class="line">    <span class="comment"># the revision or tag to clone at</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v4.3.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="comment"># which hook from the repository to use.</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-added-large-files</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-case-conflict</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-docstring-first</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-merge-conflict</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-toml</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">debug-statements</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">end-of-file-fixer</span></span><br><span class="line">        <span class="attr">types_or:</span> [<span class="string">c</span>, <span class="string">c++</span>, <span class="string">cuda</span>, <span class="string">proto</span>, <span class="string">textproto</span>, <span class="string">java</span>, <span class="string">python</span>]</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">mixed-line-ending</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">requirements-txt-fixer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">trailing-whitespace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-yaml</span></span><br><span class="line">        <span class="attr">exclude:</span> <span class="string">^deploy(\/[^\/]+)*\/templates\/.*$</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-shebang-scripts-are-executable</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check yaml</span></span><br><span class="line">  <span class="comment"># - support gitlab reference syntax</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/macisamuele/language-formatters-pre-commit-hooks</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v2.10.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pretty-format-yaml</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--autofix</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--offset=2</span></span><br><span class="line">        <span class="comment"># - --preserve-quotes</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check yaml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/lyz-code/yamlfix</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="number">1.13</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">yamlfix</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">-c</span> <span class="string">.yamlfix.toml</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Upgrade old Python syntax</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/asottile/pyupgrade</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v2.37.3</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pyupgrade</span></span><br><span class="line">        <span class="comment"># (optional) list of additional parameters to pass to the hook.</span></span><br><span class="line">        <span class="attr">args:</span> [<span class="string">--py37-plus</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Ruff, the Python auto-correcting linter written in Rust, Ruff can be used to</span></span><br><span class="line">  <span class="comment"># replace Flake8 (plus dozens of plugins), isort, pydocstyle, yesqa, eradicate,</span></span><br><span class="line">  <span class="comment"># pyupgrade, and autoflake</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/astral-sh/ruff-pre-commit</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v0.0.281</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">ruff</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="comment"># this should be placed after black, isort, and similar</span></span><br><span class="line">          <span class="comment"># tools when opoen fixing</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--fix</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--show-fixes</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Nicely sort includes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/pycqa/isort</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="number">5.12</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">isort</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">isort</span> <span class="string">(python)</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--profile=black</span></span><br><span class="line">          <span class="comment"># - --line-length=88</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Another nicely sort includes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/timothycrosley/isort</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="number">5.12</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">isort</span></span><br><span class="line">        <span class="attr">additional_dependencies:</span> [<span class="string">toml</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Black, the code formatter, natively supports pre-commit</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/psf/black</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="number">22.6</span><span class="number">.0</span> <span class="comment"># Keep in sync with blacken-docs</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">black</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--line-length=88</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Also code format the docs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/asottile/blacken-docs</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v1.12.1</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">blacken-docs</span></span><br><span class="line">        <span class="comment"># (optional) a list of dependencies that will be installed in the environment where this</span></span><br><span class="line">        <span class="comment"># hook gets run. One useful application is to install plugins for hooks such as eslint.</span></span><br><span class="line">        <span class="attr">additional_dependencies:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">black==22.6.0</span> <span class="comment"># keep in sync with black hook</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Black mirror, 2x faster black mirror</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/psf/black-pre-commit-mirror</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="number">23.7</span><span class="number">.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">black</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--line-length=88</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Changes tabs to spaces</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/Lucas-C/pre-commit-hooks</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v1.3.1</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">remove-tabs</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Autoremoves unused imports</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/hadialqattan/pycln</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v2.1.1</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pycln</span></span><br><span class="line">        <span class="comment"># (optional) confines the hook to the commit, merge-commit, push, prepare-commit-msg,</span></span><br><span class="line">        <span class="comment"># commit-msg, post-checkout, post-commit, post-merge, post-rewrite, or manual stage.</span></span><br><span class="line">        <span class="comment"># See https://pre-commit.com/#confining-hooks-to-run-at-certain-stages</span></span><br><span class="line">        <span class="attr">stages:</span> [<span class="string">manual</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Checking for common mistakes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/pre-commit/pygrep-hooks</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v1.9.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">python-check-blanket-noqa</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">python-check-blanket-type-ignore</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">python-no-log-warn</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">python-use-type-annotations</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Automatically remove noqa that are not used</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/asottile/yesqa</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v1.4.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">yesqa</span></span><br><span class="line">        <span class="attr">additional_dependencies:</span> <span class="meta">&amp;flake8_dependencies</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">flake8-bugbear</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">pep8-naming</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Flake8 also supports pre-commit natively (same author)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/PyCQA/flake8</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="number">5.0</span><span class="number">.4</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">flake8</span></span><br><span class="line">        <span class="comment"># (optional) file exclude pattern.</span></span><br><span class="line">        <span class="attr">exclude:</span> <span class="string">^(docs/.*|tools/.*)$</span></span><br><span class="line">        <span class="attr">additional_dependencies:</span> <span class="meta">*flake8_dependencies</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--max-line-length=120</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--show-source</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--exclude=.git,</span> <span class="string">__pycache__,</span> <span class="string">build,</span> <span class="string">dist,</span> <span class="string">docs,</span> <span class="string">tools,</span> <span class="string">venv,</span> <span class="string">.venv</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--extend-ignore=E203,</span> <span class="string">E722,</span> <span class="string">B950</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--extend-select=B9</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># PyLint has native support - very slow</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/PyCQA/pylint</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v2.14.5</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">pylint</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># CMake formatting</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/cheshirekow/cmake-format-precommit</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v0.6.13</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cmake-format</span></span><br><span class="line">        <span class="attr">additional_dependencies:</span> [<span class="string">pyyaml</span>]</span><br><span class="line">        <span class="comment"># (optional) override the default file types to run on (AND).</span></span><br><span class="line">        <span class="comment"># See https://pre-commit.com/#filtering-files-with-types</span></span><br><span class="line">        <span class="attr">types:</span> [<span class="string">file</span>]</span><br><span class="line">        <span class="attr">files:</span> <span class="string">(\.cmake|CMakeLists.txt)(.in)?$</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check static types with mypy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/pre-commit/mirrors-mypy</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v0.971</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">mypy</span></span><br><span class="line">        <span class="attr">args:</span> []</span><br><span class="line">        <span class="attr">exclude:</span> <span class="string">^(tests|docs|setup.py)/</span></span><br><span class="line">        <span class="attr">additional_dependencies:</span> [<span class="string">nox</span>, <span class="string">rich</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Checks the manifest for missing files (native support)</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/mgedmin/check-manifest</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="number">0.48</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-manifest</span></span><br><span class="line">        <span class="comment"># This is a slow hook, so only run this if --hook-stage manual is passed</span></span><br><span class="line">        <span class="attr">stages:</span> [<span class="string">manual</span>]</span><br><span class="line">        <span class="attr">additional_dependencies:</span> [<span class="string">cmake</span>, <span class="string">ninja</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check json with comments</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://gitlab.com/bmares/check-json5</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">check-json5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check for spelling</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/codespell-project/codespell</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v2.2.1</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">codespell</span></span><br><span class="line">        <span class="attr">exclude:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          (?x)(</span></span><br><span class="line"><span class="string">            ^(package-lock.json)</span></span><br><span class="line"><span class="string">          )</span></span><br><span class="line"><span class="string"></span>        <span class="attr">args:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--skip=".vscode/"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--ignore-words-list="Transer,transer"</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--check-filenames</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">--write-changes</span> <span class="comment"># auto fix in place</span></span><br><span class="line">        <span class="comment"># using the pyproject.toml as the config file</span></span><br><span class="line">        <span class="attr">additional_dependencies:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">tomli</span></span><br><span class="line">    <span class="comment"># stages: [manual]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check for spelling</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/crate-ci/typos</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v1.16.2</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">typos</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check for common shell mistakes</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/shellcheck-py/shellcheck-py</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v0.8.0.4</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">shellcheck</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Clang format the codebase automatically</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/pre-commit/mirrors-clang-format</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v14.0.6</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">clang-format</span></span><br><span class="line">        <span class="comment"># (optional: default []) list of file types to run on (OR). See Filtering files with types.</span></span><br><span class="line">        <span class="attr">types_or:</span> [<span class="string">c++</span>, <span class="string">c</span>, <span class="string">cuda</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Commitizen is a tool designed that obeys a standard way of committing rules.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/commitizen-tools/commitizen</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v2.32.1</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">commitizen</span></span><br><span class="line">        <span class="comment"># (optional: default (all stages)) confines the hook to the commit, merge-commit,</span></span><br><span class="line">        <span class="comment"># push, prepare-commit-msg, commit-msg, post-checkout, post-commit, post-merge,</span></span><br><span class="line">        <span class="comment"># post-rewrite, or manual stage. See Confining hooks to run at certain stages.</span></span><br><span class="line">        <span class="attr">stages:</span> [<span class="string">commit-msg</span>]</span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">commitizen-branch</span></span><br><span class="line">        <span class="attr">stages:</span> [<span class="string">push</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Check for markdown</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">repo:</span> <span class="string">https://github.com/igorshubovych/markdownlint-cli</span></span><br><span class="line">    <span class="attr">rev:</span> <span class="string">v0.35.0</span></span><br><span class="line">    <span class="attr">hooks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">markdownlint-fix</span></span><br><span class="line">  <span class="comment"># need rc config, such as https://github.com/msclock/blog_hexo/blob/master</span></span><br><span class="line">  <span class="comment"># related options for rc config, see https://github.com/DavidAnson/markdownlint#optionsconfig</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3 id="Integrate-with-CI">Integrate with CI</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://lyz-code.github.io/blue-book/devops/ci/#configuring-pre-commit">https://lyz-code.github.io/blue-book/devops/ci/#configuring-pre-commit</a></p>
</li>
</ul>
<h4 id="gitlab-ci">gitlab ci</h4>
<p>赛选出需要使用的插件，并结合 <a href="https://gitlab.com/msclock/gitlab-ci-templates">gitlab ci templates</a> 进行配置.</p>
<h4 id="github-action">github action</h4>
<p>在 github 上配置 pre-commit 直接使用对应的 action 即可.</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Make commits from pre-commit</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pre-commit</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pre-commit:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">${{</span> <span class="string">secrets.PERSONAL_TOKEN</span> <span class="string">}}</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># Avoid checking out the repository in a detached state.</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">${{</span> <span class="string">github.head_ref</span> <span class="string">}}</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">pre-commit</span> <span class="string">on</span> <span class="string">codebase</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">pre-commit/action@v3.0.0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Auto</span> <span class="string">fixes</span> <span class="string">from</span> <span class="string">pre-commit</span> <span class="string">on</span> <span class="string">failure</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">stefanzweifel/git-auto-commit-action@v4</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">failure()</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">commit_message:</span> <span class="string">"ci: auto fixes from pre-commit"</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Make pr from pre-commit</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">pre-commit</span> <span class="string">update</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># every day at midnight</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">"0 0 * * *"</span></span><br><span class="line">  <span class="comment"># on demand</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pre-commit-auto-update:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Python</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-python@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Update</span> <span class="string">pre-commit</span> <span class="string">hooks</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">browniebroke/pre-commit-autoupdate-action@main</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">pull</span> <span class="string">request</span> <span class="string">on</span> <span class="string">pre-commit</span> <span class="string">updates</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peter-evans/create-pull-request@v3</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">${{</span> <span class="string">always()</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">update/pre-commit-hooks</span></span><br><span class="line">          <span class="attr">title:</span> <span class="string">Update</span> <span class="string">pre-commit</span> <span class="string">hooks</span></span><br><span class="line">          <span class="attr">commit-message:</span> <span class="string">"ci: update pre-commit hooks"</span></span><br><span class="line">          <span class="attr">body:</span> <span class="string">Update</span> <span class="string">available</span> <span class="string">versions</span> <span class="string">of</span> <span class="string">pre-commit</span> <span class="string">hooks</span> <span class="string">to</span> <span class="string">latest</span> <span class="string">version.</span></span><br><span class="line">          <span class="attr">delete-branch:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="dynaconf">dynaconf</h2>
<p><a href="https://pypi.org/project/dynaconf/">dynaconf</a> 专用于工程配置管理包，符合 <a href="https://12factor.net/config">12factor config</a></p>
<h3 id="配置实例">配置实例</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 配置布局</span></span><br><span class="line">tree server/configs/</span><br><span class="line">server/configs/</span><br><span class="line">├── __init__.py</span><br><span class="line">├── config.py</span><br><span class="line">├── default_settings.yaml</span><br><span class="line">└── settings.yaml</span><br><span class="line"></span><br><span class="line">0 directories, 4 files</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># default_settings.yaml</span></span><br><span class="line"><span class="comment"># 以下配置第一次加载的默认配置</span></span><br><span class="line"><span class="comment"># 然后读取 "configs/settings.yaml" 配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认配置的环境配置</span></span><br><span class="line"><span class="attr">default:</span></span><br><span class="line">  <span class="attr">base:</span> <span class="string">"@jinja <span class="template-variable">{{this.current_env | lower}}</span>"</span></span><br><span class="line">  <span class="attr">logging:</span> <span class="string">"debug"</span> <span class="comment"># 默认debug级，python日志等级 debug &lt; info &lt; warning &lt; error &lt; critical;若设置的level&gt;调用的函数，则不会输出</span></span><br><span class="line">  <span class="attr">open_gpu_mode:</span> <span class="literal">true</span> <span class="comment"># 是否以 gpu 模式调度AI模型。</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">true</span> <span class="comment"># 是否以 hot reload 模式启动服务</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5000</span> <span class="comment"># http 暴露服务端口</span></span><br><span class="line">  <span class="attr">protocol:</span> <span class="string">"application/x-protobuf-json"</span> <span class="comment"># http 协议</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 默认全局数据缓存目录环境配置</span></span><br><span class="line">  <span class="attr">global_dir:</span></span><br><span class="line">    <span class="comment"># 全局数据的文件夹名称</span></span><br><span class="line">    <span class="attr">cache_data:</span> <span class="string">"cache_data"</span></span><br><span class="line">    <span class="comment"># 全局数据路径下的 dwg 文件缓存文件夹名称，默认为 cache_data/dwg_file_cache</span></span><br><span class="line">    <span class="attr">dwg_file_cache:</span> <span class="string">"dwg_file_cache"</span></span><br><span class="line">    <span class="comment"># 全局数据路径下中间结果数据缓存文件夹名称，默认为 cache_data/mid_data_cache</span></span><br><span class="line">    <span class="attr">mid_data_cache:</span> <span class="string">"mid_data_cache"</span></span><br><span class="line">    <span class="comment"># 全局数据路径下结果数据缓存文件夹名称，默认为 cache_data/result_data_cache</span></span><br><span class="line">    <span class="attr">result_data_cache:</span> <span class="string">"result_data_cache"</span></span><br><span class="line">    <span class="comment"># 全局数据路径下目标检测数据缓存文件夹名称，默认为 cache_data/detection_data_cache</span></span><br><span class="line">    <span class="attr">detection_data_cache:</span> <span class="string">"detection_data_cache"</span></span><br><span class="line">    <span class="comment"># 全局数据路径下消息数据缓存文件夹名称，默认为 cache_data/message_data_cache</span></span><br><span class="line">    <span class="attr">message_data_cache:</span> <span class="string">"message_data_cache"</span></span><br><span class="line">    <span class="comment"># 全局数据路径下消息数据缓存文件夹名称，默认为 cache_data/origin_data_cache</span></span><br><span class="line">    <span class="attr">origin_data_cache:</span> <span class="string">"origin_data_cache"</span></span><br><span class="line">    <span class="comment"># 全局数据路径下日志所在路径，默认为 .log</span></span><br><span class="line">    <span class="attr">log_dir:</span> <span class="string">".log"</span></span><br><span class="line">    <span class="comment"># 全局日志名称，默认为 .log/service.log</span></span><br><span class="line">    <span class="attr">log_name:</span> <span class="string">"service"</span></span><br><span class="line">    <span class="comment"># 工程日志路径，默认：cache_data/log_data_cache</span></span><br><span class="line">    <span class="attr">log_data_cache:</span> <span class="string">"log_data_cache"</span></span><br><span class="line">    <span class="comment"># 工程日志路径，默认：cache_data/cpp_parameters_cache</span></span><br><span class="line">    <span class="attr">cpp_parameters_cache:</span> <span class="string">"cpp_parameters_cache"</span></span><br><span class="line">    <span class="comment"># 工程日志路径，默认：cache_data/backup_dara_cache</span></span><br><span class="line">    <span class="attr">backup_dara_cache:</span> <span class="string">"backup_dara_cache"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># settings.yaml</span></span><br><span class="line"><span class="comment"># 以下配置会默认覆盖从 "configs/default_settings.yaml" 中加载的值</span></span><br><span class="line"></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">dynaconf_merge:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">base:</span> <span class="string">"production"</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># config.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> dynaconf <span class="keyword">import</span> Dynaconf, Validator</span><br><span class="line"></span><br><span class="line">CONFIG_PATH = pathlib.Path(__file__).resolve().parent</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a Dynaconf instance to manage settings</span></span><br><span class="line">settings = Dynaconf(</span><br><span class="line">    <span class="comment"># Switch between environments using the "LAUNCH_ENV" environment variable</span></span><br><span class="line">    env_switcher=<span class="string">"LAUNCH_ENV"</span>,</span><br><span class="line">    <span class="comment"># List of configuration files to load</span></span><br><span class="line">    settings_files=[</span><br><span class="line">        CONFIG_PATH / <span class="string">"default_settings.yaml"</span>,  <span class="comment"># Default configuration</span></span><br><span class="line">        CONFIG_PATH / <span class="string">"settings.yaml"</span>,  <span class="comment"># Main configuration</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># Enable layered environments (development, production, default)</span></span><br><span class="line">    environments=<span class="literal">True</span>,</span><br><span class="line">    <span class="comment"># Prefix for environment variables (e.g., "CONF_FOO=bar" becomes "settings.foo == "bar"")</span></span><br><span class="line">    envvar_prefix=<span class="string">"CONF"</span>,</span><br><span class="line">    lowercase_read=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the environment to "config"</span></span><br><span class="line">settings.setenv(<span class="string">"config"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register validators to ensure required settings exist</span></span><br><span class="line">settings.validators.register(</span><br><span class="line">    Validator(<span class="string">"base"</span>, must_exist=<span class="literal">True</span>),</span><br><span class="line">    Validator(<span class="string">"logging"</span>, must_exist=<span class="literal">True</span>),</span><br><span class="line">    Validator(<span class="string">"open_gpu_mode"</span>, must_exist=<span class="literal">True</span>),</span><br><span class="line">    Validator(<span class="string">"port"</span>, must_exist=<span class="literal">True</span>),</span><br><span class="line">    Validator(<span class="string">"protocol"</span>, must_exist=<span class="literal">True</span>),</span><br><span class="line">    Validator(<span class="string">"global_dir"</span>, must_exist=<span class="literal">True</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert settings to a JSON string with custom formatting options</span></span><br><span class="line">final_settings = json.dumps(</span><br><span class="line">    settings.to_dict(),</span><br><span class="line">    indent=<span class="number">4</span>,</span><br><span class="line">    ensure_ascii=<span class="literal">False</span>,</span><br><span class="line">    sort_keys=<span class="literal">False</span>,</span><br><span class="line">    separators=(<span class="string">","</span>, <span class="string">":"</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write the final settings to a JSON file named ".settings.json"</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">".settings.json"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(final_settings)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable debug mode when running in a debugger</span></span><br><span class="line"><span class="keyword">if</span> sys.gettrace() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    settings.debug = <span class="literal">False</span></span><br></pre></td></tr></tbody></table></figure>
<p>配置好后，可使用命令查看配置环境生效的环境结果</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看生效 settings 环境</span></span><br><span class="line">dynaconf -i server.configs.config.settings list</span><br><span class="line">Working <span class="keyword">in</span> config environment</span><br><span class="line">BASE&lt;str&gt; <span class="string">'production'</span></span><br><span class="line">LOGGING&lt;str&gt; <span class="string">'debug'</span></span><br><span class="line">OPEN_GPU_MODE&lt;bool&gt; True</span><br><span class="line">DEBUG&lt;bool&gt; True</span><br><span class="line">PORT&lt;int&gt; 5000</span><br><span class="line">PROTOCOL&lt;str&gt; <span class="string">'application/x-protobuf-json'</span></span><br><span class="line">GLOBAL_DIR&lt;dict&gt; {<span class="string">'backup_dara_cache'</span>: <span class="string">'backup_dara_cache'</span>,</span><br><span class="line"> <span class="string">'cache_data'</span>: <span class="string">'cache_data'</span>,</span><br><span class="line"> <span class="string">'cpp_parameters_cache'</span>: <span class="string">'cpp_parameters_cache'</span>,</span><br><span class="line"> <span class="string">'detection_data_cache'</span>: <span class="string">'detection_data_cache'</span>,</span><br><span class="line"> <span class="string">'dwg_file_cache'</span>: <span class="string">'dwg_file_cache'</span>,</span><br><span class="line"> <span class="string">'log_data_cache'</span>: <span class="string">'log_data_cache'</span>,</span><br><span class="line"> <span class="string">'log_dir'</span>: <span class="string">'.log'</span>,</span><br><span class="line"> <span class="string">'log_name'</span>: <span class="string">'service'</span>,</span><br><span class="line"> <span class="string">'message_data_cache'</span>: <span class="string">'message_data_cache'</span>,</span><br><span class="line"> <span class="string">'mid_data_cache'</span>: <span class="string">'mid_data_cache'</span>,</span><br><span class="line"> <span class="string">'origin_data_cache'</span>: <span class="string">'origin_data_cache'</span>,</span><br><span class="line"> <span class="string">'result_data_cache'</span>: <span class="string">'result_data_cache'</span>}</span><br></pre></td></tr></tbody></table></figure>
<h2 id="loguru">loguru</h2>
<p><a href="https://pypi.org/project/loguru/">loguru</a> 是一个使 python 日志使用更加方便的包</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://loguru.readthedocs.io/en/stable/">loguru</a></p>
</li>
</ul>
<h3 id="Install-2">Install</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install loguru</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Usage">Usage</h3>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> loguru</span><br><span class="line"></span><br><span class="line">loguru.logger.add(<span class="string">"file.log"</span>, <span class="built_in">format</span>=<span class="string">"{time} {level} {message}"</span>, level=<span class="string">"DEBUG"</span>)</span><br><span class="line"></span><br><span class="line">loguru.logger.debug(<span class="string">"This is a debug message"</span>)</span><br><span class="line">loguru.logger.info(<span class="string">"This is an info message"</span>)</span><br><span class="line">loguru.logger.warning(<span class="string">"This is a warning message"</span>)</span><br><span class="line">loguru.logger.error(<span class="string">"This is an error message"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="pydantic">pydantic</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.youtube.com/watch?v=XIdQ6gO3Anc">https://www.youtube.com/watch?v=XIdQ6gO3Anc</a></p>
</li>
</ul>
<h2 id="pyscript">pyscript</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://pyscript.net/">https://pyscript.net/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://pyscript.com/@examples">official examples</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.freecodecamp.org/chinese/news/pyscript-python-front-end-framework/">https://www.freecodecamp.org/chinese/news/pyscript-python-front-end-framework/</a></p>
</li>
</ul>
<h2 id="gitpython">gitpython</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/gitpython-developers/GitPython">https://github.com/gitpython-developers/GitPython</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/msclock/sphinx-deployment">usage example 1 in sphinx_deployment</a></p>
</li>
</ul>
<h2 id="pyenv">pyenv</h2>
<p>轻松管理 python 版本。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">pip install pyenv</span><br><span class="line">curl https://pyenv.run | bash</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="subst">$(pyenv init - bash)</span>"</span></span><br><span class="line">pyenv install 3.10.6</span><br><span class="line">pyenv shell 3.10.6</span><br><span class="line">python --version</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/pyenv/pyenv">https://github.com/pyenv/pyenv</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>regex 正则</title>
    <url>/posts/c534b59e/</url>
    <content><![CDATA[<h2 id="resource">resource</h2>
<ul class="lvl-0">
<li class="lvl-2"><a href="https://regex101.com/">regex101</a>: build, test, and debug regular expressions.</li>
</ul>
<h2 id="及"><code>?&lt;=</code> 及 <code>?=</code></h2>
<p><code>?&lt;=</code> : 匹配以字符串开始，捕获 (存储)</p>
<p><code>?=</code>: 匹配以字符串结束，捕获 (存储)</p>
<p>正则表达式：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>(?&lt;=(href=")).{1,200}(?=("&gt;))</code>: 捕获以 <code>href="</code> 开头的字符串最长达到 200 个字符且以 <code>"&gt;</code> 结尾的字符串</p>
</li>
</ul>
<p>解释：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>(?&lt;=(href="))</code>: 匹配以 <code>href="</code> 开头的字符串，并且捕获 (存储) 到分组中</p>
</li>
<li class="lvl-2">
<p><code>(?=("&gt;))</code> : 匹配以 <code>"&gt;</code> 结尾的字符串，并且捕获 (存储) 到分组中</p>
</li>
</ul>
<span id="more"></span>
<p>示例如下：</p>
<p><img data-src="https://s2.loli.net/2022/09/30/V8kWG2NQwsSoPX4.png" alt="V8kWG2NQwsSoPX4."></p>
<p><code>?&lt;=(?:)</code> : 匹配以字符串开始，<strong>不</strong> 捕获 (存储)</p>
<p><code>?=(?:)</code>: 匹配以字符串结束，<strong>不</strong> 捕获 (存储)</p>
<p>正则表达式：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>(?&lt;=(?:href=")).{1,200}(?=(?:"&gt;))</code></p>
</li>
</ul>
<p>解释：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>(?&lt;=(?:href="))</code>: 匹配以 <code>href="</code> 开头的字符串，并且不捕获 (不存储) 到分组中</p>
</li>
<li class="lvl-2">
<p><code>(?=(?:"&gt;))</code>: 匹配以 <code>"&gt;</code> 结尾的字符串，并且不捕获 (不存储) 到分组中</p>
</li>
</ul>
<p>参考教程:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.cnblogs.com/whaozl/p/5462865.html">https://www.cnblogs.com/whaozl/p/5462865.html</a></p>
</li>
</ul>
<h2 id="和"><code>^</code> 和 <code>$</code></h2>
<p>在正则表达式中，<code>^</code> 表示字符串的开头，<code>$</code> 表示字符串的结尾。</p>
<p>例如，要匹配以 <code>hello</code> 开头的字符串，可以使用正则表达式 <code>^hello</code>。要匹配以 <code>world</code> 结尾的字符串，可以使用正则表达式 <code>world$</code>。</p>
<p>在使用正则表达式时，还需要注意转义字符的使用。例如，如果要匹配以<code>.</code> 开头的字符串，可以使用正则表达式 <code>\.</code>，其中 <code>\</code> 是转义字符，用于将<code>.</code> 转义为普通字符。</p>
<p>下面是一些示例正则表达式，用于匹配字符串的开头和结尾：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>^hello</code>：匹配以 hello 开头的字符串。</p>
</li>
<li class="lvl-2">
<p><code>world$</code>：匹配以 world 结尾的字符串。</p>
</li>
<li class="lvl-2">
<p><code>^\d+</code>：匹配以数字开头的字符串。</p>
</li>
<li class="lvl-2">
<p><code>^[a-zA-Z]+</code>：匹配以字母开头的字符串。</p>
</li>
<li class="lvl-2">
<p><code>\.txt$</code>：匹配以.txt 结尾的字符串。</p>
</li>
</ul>
<h2 id="name-pattern"><code>(?&lt;name&gt;pattern)</code></h2>
<p>命名捕获分组用于将捕获的内容存储到一个变量中，具体访问遵循特定的语言标准。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})</code>: 将捕获的内容存储到变量 <code>year</code>、<code>month</code> 和 <code>day</code> 中</p>
</li>
</ul>
<p>在 Python 中，可以使用 groupdict () 方法来获取一个字典，其中键是捕获组的名称，值是捕获组的值。</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r'(?P&lt;year&gt;\d{4})-(?P&lt;month&gt;\d{2})-(?P&lt;day&gt;\d{2})'</span></span><br><span class="line"><span class="keyword">match</span> = re.<span class="keyword">match</span>(pattern, <span class="string">'2022-01-01'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">    groups = <span class="keyword">match</span>.groupdict()</span><br><span class="line">    <span class="built_in">print</span>(groups[<span class="string">'year'</span>])  <span class="comment"># 输出: 2022</span></span><br><span class="line">    <span class="built_in">print</span>(groups[<span class="string">'month'</span>])  <span class="comment"># 输出: 01</span></span><br><span class="line">    <span class="built_in">print</span>(groups[<span class="string">'day'</span>])  <span class="comment"># 输出: 01</span></span><br></pre></td></tr></tbody></table></figure>
<p>在 C<ins> 中，标准库的正则表达式库 <code>&lt;regex&gt;</code> 不直接支持命名捕获组的语法。但可以使用第三方库，如 <code>Boost.Regex</code>，来实现命名捕获组的功能。以下是使用 <code>Boost.Regex在</code> C</ins> 中实现命名捕获组的示例：</p>
<figure class="highlight cpp"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/regex.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    std::string input = <span class="string">"2022-01-01"</span>;</span><br><span class="line">    <span class="function">boost::regex <span class="title">pattern</span><span class="params">(<span class="string">"(?&lt;year&gt;\\d{4})-(?&lt;month&gt;\\d{2})-(?&lt;day&gt;\\d{2})"</span>)</span></span>;</span><br><span class="line">    boost::smatch match;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (boost::<span class="built_in">regex_match</span>(input, match, pattern)) {</span><br><span class="line">        std::cout &lt;&lt; match[<span class="string">"year"</span>] &lt;&lt; std::endl;   <span class="comment">// 输出: 2022</span></span><br><span class="line">        std::cout &lt;&lt; match[<span class="string">"month"</span>] &lt;&lt; std::endl;  <span class="comment">// 输出: 01</span></span><br><span class="line">        std::cout &lt;&lt; match[<span class="string">"day"</span>] &lt;&lt; std::endl;    <span class="comment">// 输出: 01</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>scoop 包管理器</title>
    <url>/posts/f03ca1b6/</url>
    <content><![CDATA[<h2 id="Scoop">Scoop</h2>
<p>Windows 下的开源包管理器。</p>
<h3 id="install">install</h3>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># https://github.com/ScoopInstaller/Install#readme</span></span><br><span class="line"><span class="comment"># 下载安装脚本</span></span><br><span class="line"><span class="built_in">irm</span> get.scoop.sh <span class="literal">-outfile</span> <span class="string">'install.ps1'</span></span><br><span class="line"><span class="comment"># 配置安装</span></span><br><span class="line">.\install.ps1 <span class="literal">-RunAsAdmin</span> <span class="literal">-ScoopDir</span> <span class="string">'C:\Opt\Scoop'</span> <span class="literal">-ScoopGlobalDir</span> <span class="string">'C:\Opt\Scoop\App'</span></span><br></pre></td></tr></tbody></table></figure>
<blockquote>
<p>[!NOTE]<br>
Scoop 源比较多，多是开源。建议使用 choco。</p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>semantic release</title>
    <url>/posts/be37f9f6/</url>
    <content><![CDATA[<h2 id="资源">资源</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.conventionalcommits.org/en/v1.0.0/">语义化发布 (Semantic release)</a></td>
<td>sentimentalversioning</td>
<td> 规范 </td>
</tr>
<tr>
<td><a href="https://github.com/semantic-release/semantic-release">semantic-release</a></td>
<td>semantic-release</td>
<td> 工具 </td>
</tr>
<tr>
<td><a href="https://semver.org/">semantic version</a></td>
<td>semver</td>
<td> 规范 </td>
</tr>
<tr>
<td><a href="https://semantic-release.gitbook.io">semantic release gitbook</a></td>
<td>semantic-release</td>
<td> 文档</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="Semantic-Release">Semantic Release</h2>
<h3 id="Usage">Usage</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 本地测试</span></span><br><span class="line">semantic-release -d --no-ci</span><br></pre></td></tr></tbody></table></figure>
<h3 id="Angular-Standard-Commit">Angular Standard Commit</h3>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">&lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt;</span><br><span class="line">  │       │             │</span><br><span class="line">  │       │             └─⫸ Summary in present tense. Not capitalized. No period at the end.</span><br><span class="line">  │       │</span><br><span class="line">  │       └─⫸ Commit Scope: animations|bazel|benchpress|common|compiler|compiler-cli|core|</span><br><span class="line">  │                          elements|forms|http|language-service|localize|platform-browser|</span><br><span class="line">  │                          platform-browser-dynamic|platform-server|router|service-worker|</span><br><span class="line">  │                          upgrade|zone.js|packaging|changelog|docs-infra|migrations|ngcc|ve|</span><br><span class="line">  │                          devtools</span><br><span class="line">  │</span><br><span class="line">  └─⫸ Commit Type: build|ci|docs|feat|fix|perf|refactor|test</span><br><span class="line"></span><br><span class="line">Commit Message Body</span><br><span class="line"></span><br><span class="line">Commit Message Footer</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/angular/angular/blob/main/CONTRIBUTING.md#-commit-message-format">https://github.com/angular/angular/blob/main/CONTRIBUTING.md#-commit-message-format</a></p>
</li>
</ul>
<h3 id="Common-Conventional-Commit">Common Conventional Commit</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">type</span>&gt;[optional scope]: &lt;description&gt;</span><br><span class="line"></span><br><span class="line">[optional body]</span><br><span class="line"></span><br><span class="line">[optional footer(s)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Comment on https://www.conventionalcommits.org/en/v1.0.0/</span></span><br></pre></td></tr></tbody></table></figure>
<p>提交说明包含了下面的结构化元素，以向类库使用者表明其意图：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>fix: 类型 为 fix 的提交表示在代码库中修复了一个 bug（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#%E6%91%98%E8%A6%81">PATCH</a> 相对应）。</p>
</li>
<li class="lvl-2">
<p>feat: 类型 为 feat 的提交表示在代码库中新增了一个功能（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#%E6%91%98%E8%A6%81">MINOR</a> 相对应）。</p>
</li>
<li class="lvl-2">
<p>BREAKING CHANGE: 在脚注中包含 BREAKING CHANGE: 或 &lt;类型&gt;(范围) 后面有一个！的提交，表示引入了破坏性 API 变更（这和语义化版本中的 <a href="https://semver.org/lang/zh-CN/#%E6%91%98%E8%A6%81">MAJOR</a> 相对应）。 破坏性变更可以是任意 类型 提交的一部分。</p>
</li>
<li class="lvl-2">
<p>除 fix: 和 feat: 之外，也可以使用其它提交 类型 ，例如 <a href="https://github.com/conventional-changelog/commitlint/tree/master/%40commitlint/config-conventional">@commitlint/config-conventional</a>（基于 Angular 约定）中推荐的 build:、chore:、 ci:、docs:、style:、refactor:、perf:、test:，等等。</p>
</li>
<li class="lvl-2">
<p>脚注中除了 BREAKING CHANGE: <description> ，其它条目应该采用类似 <a href="https://git-scm.com/docs/git-interpret-trailers">git trailer format</a> 这样的惯例。</description></p>
</li>
</ul>
<p>其它提交类型在约定式提交规范中并没有强制限制，并且在语义化版本中没有隐式影响（除非它们包含 BREAKING CHANGE）。 可以为提交类型添加一个围在圆括号内的范围，以为其提供额外的上下文信息。例如 feat (parser): adds ability to parse arrays.。</p>
<h3 id="Release-Workflow">Release Workflow</h3>
<p>常用的 release workflow 方式有如下 3 种：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://semantic-release.gitbook.io/semantic-release/recipes/release-workflow/distribution-channels">Distribution channels</a></p>
</li>
<li class="lvl-2">
<p><a href="https://semantic-release.gitbook.io/semantic-release/recipes/release-workflow/maintenance-releases">Maintenance release</a></p>
</li>
<li class="lvl-2">
<p><a href="https://semantic-release.gitbook.io/semantic-release/recipes/release-workflow/pre-releases">Pre-release</a></p>
</li>
</ul>
<h3 id="QA">QA</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://stackoverflow.com/questions/18506508/whats-the-difference-between-tag-and-release?noredirect=1&amp;lq=1">Difference between release and tag</a></p>
</li>
</ul>
<h2 id="Integrate-with-CI">Integrate with CI</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/semantic-release">semantic-release</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/semantic-release/blob/master/docs/usage/configuration.md">semantic-release configuration</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/semantic-release/blob/master/docs/usage/ci-configuration.md#authentication">CI Authentication</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/semantic-release/tree/master/docs/recipes">semantic-release recipe</a></p>
</li>
<li class="lvl-2">
<p><a href="https://juejin.cn/post/7149727151464398885">在 CI/CD 中集成语义化发布介绍</a></p>
</li>
</ul>
<h3 id="GitLab-CI">GitLab CI</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/semantic-release/blob/master/docs/recipes/ci-configurations/gitlab-ci.md">GitLab CI recipe</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/gitlabhq/gitlabhq/blob/master/doc/ci/examples/semantic-release.md">gitlab official semantic release md</a></p>
</li>
</ul>
<h4 id="GitLab-CI-Configuration">GitLab CI Configuration</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/semantic-release/blob/master/docs/usage/ci-configuration.md#authentication">GITLAB_TOKEN</a>: 权限<a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html">认证</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/gitlab">gitlab plugin</a>: 用于 gitlab 发布 release 插件</p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/gitlab#assets">gitlab assets</a>: 用于附加到 release 的 assets</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://gitlab.com/msclock/gitlab-ci-templates">gitlab semantic release template</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/philips-software/odin/blob/main/.releaserc.yml">semantic release yaml configuration example</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/DanySK/semantic-release-preconfigured-conventional-commits/blob/master/.releaserc.yml">more yaml sharedable yaml configuration example</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/DanySK/publish-on-central/blob/master/release.config.js">semantic release js configuration example</a></p>
</li>
</ul>
<h3 id="Github-Action">Github Action</h3>
<p>要使用 semantic-release 工具配置项目的 GitHub Action 以实现自动化版本发布，需要做以下几步：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>安装 semantic-release 和相关插件。在项目的根目录下创建一个 package.json 文件，然后添加以下内容：</p>
</li>
</ul>
<figure class="highlight json"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"devDependencies"</span><span class="punctuation">:</span> <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"@semantic-release/changelog"</span><span class="punctuation">:</span> <span class="string">"^6.0.1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@semantic-release/git"</span><span class="punctuation">:</span> <span class="string">"^10.0.1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@semantic-release/commit-analyzer"</span><span class="punctuation">:</span> <span class="string">"^9.0.1"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@semantic-release/release-notes-generator"</span><span class="punctuation">:</span> <span class="string">"^11.0.2"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">"@semantic-release/github"</span><span class="punctuation">:</span> <span class="string">"^8.0.1"</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure>
<p>然后运行 npm install 来安装这些依赖.</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>创建一个.releaserc 文件来配置 semantic-release。在项目的根目录下创建一个.releaserc 文件，然后添加以下内容：</p>
</li>
</ul>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">{</span><br><span class="line">  "plugins": [</span><br><span class="line">    "@semantic-release/commit-analyzer",</span><br><span class="line">    "@semantic-release/release-notes-generator",</span><br><span class="line">    "@semantic-release/changelog",</span><br><span class="line">    "@semantic-release/github",</span><br><span class="line">    [</span><br><span class="line">      "@semantic-release/git",</span><br><span class="line">      {</span><br><span class="line">        "assets": ["CHANGELOG.md", "package.json"],</span><br><span class="line">        "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"</span><br><span class="line">      }</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>在 GitHub Actions 中配置 semantic-release。在.github/workflows 目录下创建一个新的 workflow 文件，例如 release.yml，然后添加以下内容：</p>
</li>
</ul>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Release</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Release</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">14</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">${{</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">}}</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npx</span> <span class="string">semantic-release</span></span><br></pre></td></tr></tbody></table></figure>
<p>这个 workflow 会在每次 push 到 main 分支时运行，自动分析 commit messages 来决定新的版本号，然后创建一个新的 GitHub release。</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/open-turo/actions-python/blob/main/release/action.yaml">https://github.com/open-turo/actions-python/blob/main/release/action.yaml</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/spaceship-prompt/spaceship-prompt/blob/master/.github/workflows/release.yml">https://github.com/spaceship-prompt/spaceship-prompt/blob/master/.github/workflows/release.yml</a></p>
</li>
</ul>
<h2 id="Semantic-Release-Plugin">Semantic Release Plugin</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/semantic-release/blob/master/docs/extending/plugins-list.md">semantic-release plugins</a>.</p>
</li>
</ul>
<h3 id="semantic-release-commit-analyzer">semantic-release/commit-analyzer</h3>
<p>用于解析提交消息，并判断是否需要执行发布 release</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/commit-analyzer#options">https://github.com/semantic-release/commit-analyzer#options</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/typegoose/typegoose/blob/master/.releaserc.js">custom config example</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/frender-rs/frender/blob/main/release.config.js">custom config example</a></p>
</li>
</ul>
<h3 id="semantic-release-release-notes-generator">semantic-release/release-notes-generator</h3>
<p>用于将 <code>commit-analyzer</code> 解析出的符合规范的提交消息筛选并根据规则 <a href="https://github.com/conventional-changelog/conventional-changelog-config-spec/blob/master/README.md">conventional changelog configuration spec</a> 生成发布信息说明</p>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/release-notes-generator#options">release-notes-generator options</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/typegoose/typegoose/blob/master/.releaserc.js">custom config example</a></p>
</li>
</ul>
<h3 id="semantic-release-changelog">semantic-release/changelog</h3>
<p>用于将 <code>release-notes-generator</code> 生成内容更新到 <code>CHANGELOG.md</code></p>
<h3 id="google-semantic-release-replace-plugin">google/semantic-release-replace-plugin</h3>
<p>用于在发布时替换内容.</p>
<p>在发布 release 时替换版本.</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="string">"@google/semantic-release-replace-plugin"</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">{</span></span><br><span class="line">    <span class="attr">"replacements"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"files"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"pyproject.toml"</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"from"</span><span class="punctuation">:</span> <span class="string">"^version = \".*\""</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"to"</span><span class="punctuation">:</span> <span class="string">"version = \"${nextRelease.version}\""</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">"countMatches"</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">}</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/jpoehnelt/semantic-release-replace-plugin">https://github.com/jpoehnelt/semantic-release-replace-plugin</a></p>
</li>
<li class="lvl-2">
<p><a href="https://gitlab.com/msclock/gitlab-ci-templates/-/blob/master/.releaserc.js">https://gitlab.com/msclock/gitlab-ci-templates/-/blob/master/.releaserc.js</a></p>
</li>
</ul>
<h3 id="semantic-release-git">semantic-release/git</h3>
<p>用于在触发发布时的提交更改回仓库，tag 将会创建在当前提交上</p>
<figure class="highlight jsonc"><table><tbody><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="string">"@semantic-release/git"</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">{</span></span><br><span class="line">        <span class="attr">"assets"</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">"CHANGELOG.md"</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="comment">// disable ci run with [skip ci]</span></span><br><span class="line">        <span class="attr">"message"</span><span class="punctuation">:</span> <span class="string">"chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"</span></span><br><span class="line">    <span class="punctuation">}</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/git/">https://github.com/semantic-release/git/</a></p>
</li>
</ul>
<h3 id="semantic-release-exec">semantic-release/exec</h3>
<p>语义发布插件执行自定义 shell 命令。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/DanySK/publish-on-central">use publishCmd to create annotated tags</a></p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/semantic-release/exec">https://github.com/semantic-release/exec</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>shell area</title>
    <url>/posts/8575ff4e/</url>
    <content><![CDATA[<h2 id="资源">资源</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://wangdoc.com/bash">wangdoc</a></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Tips">Tips</h2>
<h3 id="sh-bash">sh/bash</h3>
<p>-s: 类 unix 操作系统中用于运行带参数的 shell 脚本的命令。-s 选项用于指定脚本应该从标准输入而不是文件中读取其输入。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">wget -O - https://raw.githubusercontent.com/nektos/act/master/install.sh | sh -s - -b /usr/local/bin</span><br></pre></td></tr></tbody></table></figure>
<h3 id="set">set</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>set -o errexit 或 set -e 表示如果任何命令的退出状态码非零（即命令执行失败），则立即退出脚本。这有助于在脚本中遇到错误时停止执行后续的命令。</p>
</li>
<li class="lvl-2">
<p>set -o nounset 或 set -u 表示如果使用未定义的变量，则立即退出脚本。这有助于避免在脚本中使用未初始化的变量导致的错误。</p>
</li>
<li class="lvl-2">
<p>set -o pipefail 表示如果管道中的任何命令失败，则整个管道的退出状态码将是失败。默认情况下，管道的退出状态码是最后一个命令的退出状态码。这有助于在管道中的任何命令失败时及时捕获错误。</p>
</li>
<li class="lvl-2">
<p>set -x: 打开调试模式。在调试模式下，shell 会将执行的每个命令及其参数都打印出来，以便用户可以更好地了解脚本的执行过程和调试脚本中的错误。</p>
</li>
</ul>
<h3 id="log">log</h3>
<p>颜色高亮输出，兼容 sh/bash.</p>
<blockquote>
<p>[!TIP]<br>
在 POSIX sh 中，可以使用 ANSI 转义序列来实现颜色高亮输出。ANSI 转义序列是一些特殊的字符序列，它们可以在输出中表示一些特殊的含义，如颜色、样式等等。具体来说，ANSI 转义序列以 <code>\033[</code>开头，后面跟着一些数字和字符，用于指定要应用的颜色或样式。例如，<code>\033[31m</code> 表示将文本颜色设置为红色，<code>\033[1m</code> 表示将文本加粗等等。</p>
</blockquote>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://github.com/msclock/features.git">https://github.com/msclock/features.git</a></p>
</li>
</ul>
<h3 id="info">info</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"---------------- Env echo ----------------"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"it is <span class="subst">$(date)</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"current path: "</span><span class="string">"<span class="variable">$PWD</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"who is this: "</span><span class="string">"<span class="subst">$(whoami)</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"who is this : "</span><span class="string">"<span class="variable">$USER</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pip3 version: "</span><span class="string">"<span class="subst">$(pip3 --version)</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"distribution:<span class="subst">$(. /etc/os-release;echo $ID$VERSION_ID)</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="arch">arch</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Copyright (c) msclock. All rights reserved.</span></span><br><span class="line"><span class="comment"># Licensed under the MIT License.</span></span><br><span class="line"><span class="comment">#-------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># shellcheck disable=SC2034,SC2086</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Maintainer: msclock</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setup_arch set arch and suffix,</span></span><br><span class="line"><span class="comment"># fatal if architecture not supported.</span></span><br><span class="line"><span class="function"><span class="title">find_arch</span></span>() {</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">${ARCH:=$(uname -m)}</span> <span class="keyword">in</span></span><br><span class="line">    amd64)</span><br><span class="line">        ARCH=amd64</span><br><span class="line">        SUFFIX=$(<span class="built_in">uname</span> -s | <span class="built_in">tr</span> <span class="string">'[:upper:]'</span> <span class="string">'[:lower:]'</span>)-<span class="variable">${ARCH}</span></span><br><span class="line">        ;;</span><br><span class="line">    x86_64)</span><br><span class="line">        ARCH=amd64</span><br><span class="line">        SUFFIX=$(<span class="built_in">uname</span> -s | <span class="built_in">tr</span> <span class="string">'[:upper:]'</span> <span class="string">'[:lower:]'</span>)-<span class="variable">${ARCH}</span></span><br><span class="line">        ;;</span><br><span class="line">    arm64)</span><br><span class="line">        ARCH=arm64</span><br><span class="line">        SUFFIX=-<span class="variable">${ARCH}</span></span><br><span class="line">        ;;</span><br><span class="line">    s390x)</span><br><span class="line">        ARCH=s390x</span><br><span class="line">        SUFFIX=-<span class="variable">${ARCH}</span></span><br><span class="line">        ;;</span><br><span class="line">    aarch64)</span><br><span class="line">        ARCH=arm64</span><br><span class="line">        SUFFIX=-<span class="variable">${ARCH}</span></span><br><span class="line">        ;;</span><br><span class="line">    arm*)</span><br><span class="line">        ARCH=arm</span><br><span class="line">        SUFFIX=-<span class="variable">${ARCH}</span>hf</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        fatal <span class="string">"unsupported architecture <span class="variable">${ARCH}</span>"</span></span><br><span class="line">        ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="if">if</h3>
<p>变量匹配正则</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">branch=xxx_release_v2</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">"<span class="variable">$branch</span>"</span> | grep -q <span class="string">'release'</span>; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"This is a release version."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<p>命令执行正确</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> curl -m 3 github.com ; <span class="keyword">then</span></span><br><span class="line">    docker_hub=github.com ;</span><br><span class="line"><span class="keyword">elif</span> curl -m3 ghproxy.com/https://github.com ; <span class="keyword">then</span></span><br><span class="line">    docker_hub=ghproxy.com/https://github.com ;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"no docker registry"</span> ;</span><br><span class="line">    <span class="built_in">exit</span> -1 ;</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用逻辑运算符 &amp;&amp;（和）和 ||（或）来组合多个条件</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$var</span> -gt 10 ] &amp;&amp; [ <span class="variable">$var</span> -lt 20 ]; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Variable is between 10 and 20"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>n: 用于判断字符串是否非空，如果字符串的长度大于 0，则返回 true，否则返回 false。</p>
</li>
<li class="lvl-2">
<p>z: 用于判断字符串是否为空，如果字符串的长度等于 0，则返回 true，否则返回 false。</p>
</li>
</ul>
<p>全单词匹配，以单词开头或空格为分界</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">version=<span class="string">"Skip v1.0.0.beta tag creation in dry-run mode"</span></span><br><span class="line">pattern=<span class="string">"v1.0.0"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$version</span> =~ (^|[[:space:]])<span class="variable">$pattern</span>($|[[:space:]]) ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Match found"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"No match found"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>=~</code>：正则表达式匹配操作符，用于判断左侧的字符串是否与右侧的正则表达式匹配。</p>
</li>
<li class="lvl-2">
<p><code>(^|[[:space:]])</code>：表示匹配字符串的开头或者一个空格字符。</p>
</li>
<li class="lvl-2">
<p><code>$pattern</code>：表示要匹配的模式，即变量 $pattern 的值。</p>
</li>
<li class="lvl-2">
<p><code>($|[[:space:]])</code>：表示匹配字符串的结尾或者一个空格字符。</p>
</li>
</ul>
<h3 id="function">function</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>$0: 获取当前脚本或函数的名称</p>
</li>
<li class="lvl-2">
<p>$1: 获取第一个参数</p>
</li>
</ul>
<p>shift</p>
<p>获取第二个参数后面的所有参数，可以使用 shift 命令来移动参数位置，然后使用 $@或 $ 来获取剩余的参数。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">print_args</span></span>() {</span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"The remaining arguments are: <span class="variable">$@</span>"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>在这个函数中，shift 命令用于将第一个参数移动到 $1 中，将第二个参数移动到 $2 中，以此类推。然后，函数使用 $@来获取剩余的参数，并将它们作为一个单词列表输出。</p>
<p>例如，如果你调用 printargs 函数并传递 "hello"、“world"和"how"作为参数，它将打印出"The remaining arguments are: world how”。</p>
<p>返回值</p>
<p>函数可以使用 echo 命令来返回一个字符串。具体来说，echo 命令用于将一个或多个字符串输出到标准输出流中。如果需要将多个字符串连接起来返回，可以使用命令替换和引号来实现。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">concat</span></span>() {</span><br><span class="line">  <span class="built_in">local</span> result=<span class="string">"$1<span class="variable">$2</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">result=$(concat <span class="string">"hello"</span> <span class="string">"world"</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"The result is: <span class="variable">$result</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<p>在这个函数中，$1 和 $2 分别表示第一个和第二个参数。函数使用 $1 和 $2 将它们连接起来，并将结果存储在名为 result 的本地变量中。最后，函数使用 echo 命令将 result 的值输出到标准输出流中。</p>
<h3 id="和">:= 和 :-</h3>
<p>在 shell 中<code>:=</code> 和 <code>:-</code> 是 bash shell 中的变量赋值操作符。它们的作用是在变量未定义或为空时，给变量赋默认值。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>:=</code> 是在变量未定义或为空时赋值</p>
</li>
<li class="lvl-2">
<p><code>:-</code> 是在变量为空时赋值</p>
</li>
</ul>
<h3 id="get-dir-to-script">get dir to script</h3>
<p>获取执行路径到脚本的相对路径</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">SCRIPT_DIR=$(<span class="built_in">dirname</span> <span class="string">"<span class="subst">$(readlink -f <span class="string">"<span class="variable">$0</span>"</span>)</span>"</span>)</span><br><span class="line">CURRENT_DIR=$(<span class="built_in">readlink</span> -f <span class="string">"."</span>)</span><br><span class="line">RELATIVE_PATH=$(<span class="built_in">realpath</span> --relative-to=<span class="string">"<span class="variable">$CURRENT_DIR</span>"</span> <span class="string">"<span class="variable">$SCRIPT_DIR</span>"</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>使用当前执行路径和脚本所在路径计算相对路径</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">RELATIVE_PATH=$(<span class="built_in">dirname</span> <span class="string">"<span class="variable">$0</span>"</span>)</span><br></pre></td></tr></tbody></table></figure>
<p>使用脚本 <code>$0</code> 获取路径.</p>
<h3 id="getopt">getopt</h3>
<p>getopts 是 Bash shell 中用于解析命令行参数的工具。</p>
<h4 id="处理多个参数值">处理多个参数值</h4>
<p>如果处理多个参数值，可以使用一个循环来读取它们。例如</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">"a:"</span> opt; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">    a)</span><br><span class="line">      <span class="keyword">for</span> arg <span class="keyword">in</span> <span class="string">"<span class="variable">${OPTARG[@]}</span>"</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Option a: <span class="variable">$arg</span>"</span></span><br><span class="line">      <span class="keyword">done</span></span><br><span class="line">      ;;</span><br><span class="line">    \?)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Invalid option: -<span class="variable">$OPTARG</span>"</span> &gt;&amp;2</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<p>在这个例子中，-a 选项后面可以跟多个参数值，每个值都会被循环读取并处理。</p>
<h4 id="处理长选项">处理长选项</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">OPTIONS=$(getopt -o a:b:c --long alpha:,beta:,gamma: -- <span class="string">"<span class="variable">$@</span>"</span>)</span><br><span class="line"><span class="built_in">eval</span> <span class="built_in">set</span> -- <span class="string">"<span class="variable">$OPTIONS</span>"</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    -a|--alpha)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Option alpha: <span class="variable">$2</span>"</span></span><br><span class="line">      <span class="built_in">shift</span> 2</span><br><span class="line">      ;;</span><br><span class="line">    -b|--beta)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Option beta: <span class="variable">$2</span>"</span></span><br><span class="line">      <span class="built_in">shift</span> 2</span><br><span class="line">      ;;</span><br><span class="line">    -c|--gamma)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Option gamma"</span></span><br><span class="line">      <span class="built_in">shift</span></span><br><span class="line">      ;;</span><br><span class="line">    --)</span><br><span class="line">      <span class="built_in">shift</span></span><br><span class="line">      <span class="built_in">break</span></span><br><span class="line">      ;;</span><br><span class="line">    *)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Invalid option: <span class="variable">$1</span>"</span> &gt;&amp;2</span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="处理必选参数">处理必选参数</h4>
<p>处理必选参数，可以在 getopts 循环外部检查它们是否存在。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Missing required argument: foo"</span> &gt;&amp;2</span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">"a:"</span> opt; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">    a)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Option a: <span class="variable">$OPTARG</span>"</span></span><br><span class="line">      ;;</span><br><span class="line">    \?)</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Invalid option: -<span class="variable">$OPTARG</span>"</span> &gt;&amp;2</span><br><span class="line">      ;;</span><br><span class="line">  <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<p>在这个例子中，检查了是否存在必选参数 foo，如果不存在则退出脚本。</p>
<h3 id="get-filesystem-type">get filesystem type</h3>
<p>获取文件系统类型</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">filesystem=$(<span class="built_in">df</span> -T . | awk <span class="string">'NR==2 {print $2}'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$filesystem</span> == <span class="string">"ext4"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The file system is ext4."</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$filesystem</span> == <span class="string">"xfs"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The file system is xfs."</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="variable">$filesystem</span> == <span class="string">"btrfs"</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The file system is btrfs."</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Unknown file system and skip the code check because of the performance."</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="for">for</h3>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前文件属性</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> *; <span class="keyword">do</span> file <span class="variable">$f</span>;<span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="command-and-check">command and check</h3>
<p>执行命令并检查是否执行成功</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 执行失败设置错误退出码</span></span><br><span class="line">status=0</span><br><span class="line">pre-commit run --all-files || status=$?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断命令执行结果</span></span><br><span class="line"><span class="comment"># 等同于 `if ls; then`</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"命令执行成功"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"命令执行失败"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">command</span> -v cmake &amp;&gt;2 /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"cmake is working"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="here-doc-EOF">here doc(EOF)</h3>
<p>Shell 脚本中使用的两种特殊的输入重定向语法</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>‘EOF’: 使用单引号将 EOF 引起来可以防止文本中的变量扩展和命令替换</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;-<span class="string">'EOF'</span> &gt; temp.sh</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$VAR</span> <span class="comment"># $VAR 输出到文件时, 不会被环境变量替换</span></span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-</code>: 允许使用 EOF 时内部进行缩进</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">    Hello World! # 前面的缩进在输出时,被忽略</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure>
<p>更多使用示例</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | docker-compose up -f -</span></span><br><span class="line"><span class="string"># ...</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string"># ...</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cat &lt;&lt;EOF &gt; /etc/rancher/k3s/registries.yaml</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/rancher/k3s/registries.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string"># ...</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="array-or-map">array or map</h3>
<h4 id="map-访问">map 访问</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">declare</span> -A patterns_map</span><br><span class="line">patterns_map[<span class="string">"category1"</span>]=<span class="string">"pattern1"</span></span><br><span class="line">patterns_map[<span class="string">"category2"</span>]=<span class="string">"pattern2"</span></span><br><span class="line">patterns_map[<span class="string">"category3"</span>]=<span class="string">"pattern3"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Keys: <span class="variable">${!patterns_map[@]}</span>"</span> <span class="comment"># keys are treated as separate elements</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Values: <span class="variable">${patterns_map[@]}</span>"</span> <span class="comment"># values are treated as separate elements</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="str-to-array">str to array</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">input=<span class="string">"[clash,devcontainer]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为数组</span></span><br><span class="line">IFS=<span class="string">' '</span> <span class="built_in">read</span> -r -a array &lt;&lt;&lt; <span class="string">"<span class="subst">$(echo $input | tr -d '[]' | tr ',' ' ')</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历输出数组元素</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> <span class="string">"<span class="variable">${array[@]}</span>"</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$element</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">IFS=<span class="string">' '</span> <span class="built_in">read</span> -ra ry &lt;&lt;&lt; <span class="string">"<span class="subst">$(echo ${input//,/ } | tr -d '[]')</span>"</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> <span class="string">"<span class="variable">${ry[@]}</span>"</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$element</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">array=$(<span class="built_in">echo</span> <span class="variable">$input</span> | <span class="built_in">tr</span> -d <span class="string">'[]'</span> | <span class="built_in">tr</span> <span class="string">','</span> <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">readarray</span> -t array &lt;&lt;&lt; <span class="string">"<span class="variable">$array</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">"<span class="variable">${array[@]}</span>"</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$item</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="string-operation-boilerplate">string operation boilerplate</h3>
<p>常用的字符串运算符：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>{string#pattern}</code>: 从字符串的开头开始匹配并删除最短的 pattern。</p>
</li>
<li class="lvl-2">
<p><code>{string##pattern}</code>: 从字符串的开头开始匹配并删除最长的 pattern。</p>
</li>
<li class="lvl-2">
<p><code>{string/old/new}</code>: 替换字符串中第一个匹配的 old 为 new。</p>
</li>
<li class="lvl-2">
<p><code>{string//old/new}</code>: 替换字符串中所有匹配的 old 为 new。</p>
</li>
<li class="lvl-2">
<p><code>{string/#pattern/new}</code>: 如果字符串以 pattern 开头，则用 new 替换。</p>
</li>
<li class="lvl-2">
<p><code>{string/%pattern/new}</code>: 如果字符串以 pattern 结尾，则用 new 替换。</p>
</li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://wangdoc.com/bash/string#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E9%95%BF%E5%BA%A6">https://wangdoc.com/bash/string# 字符串的长度</a></p>
</li>
</ul>
<h4 id="string-old-new"><code>${string//old/new}</code></h4>
<p>全局替换匹配操作中的 <code>//</code> 表示全局替换，即将字符串中的所有匹配项都替换。/ 是用于分隔<code>替换的模式</code>和<code>替换字符串</code>的字符。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">${string//,/ }</span></span><br><span class="line"><span class="comment"># 将冒号替换为空格</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">${string//: / }</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">${string//;/\n}</span></span><br></pre></td></tr></tbody></table></figure>
<h4 id="string-pattern-new"><code>${string/%pattern/new}</code></h4>
<p>结尾匹配操作中的 <code>%</code> 是一个模式运算符，用于从字符串的末尾开始匹配并删除指定模式的内容</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 删除后缀</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">${filename%.*}</span>"</span></span><br><span class="line"><span class="comment"># 删除后缀**</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">${word%**}</span>"</span></span><br><span class="line"><span class="comment"># 删除后缀一个数字</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">${number%[0-9]}</span>"</span></span><br><span class="line"><span class="comment"># 删除末尾空格</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">${sentence% }</span>"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="envsubst">envsubst</h2>
<p>envsubst 用于文件变量替换</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt install gettext-base</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> username=<span class="built_in">test</span></span><br><span class="line"><span class="comment"># here doc</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; a.bash</span></span><br><span class="line"><span class="string">echo "pwd is ${PWD}"</span></span><br><span class="line"><span class="string">echo "username is ${username}"</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># envsubst</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">'EOF'</span> | envsubst &gt; b.bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pwd is <span class="variable">${PWD}</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"username is <span class="variable">${username}</span>"</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只替换 username</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">'EOF'</span> | envsubst <span class="string">'${username}'</span> &gt;b.bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pwd is <span class="variable">${PWD}</span>"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"username is <span class="variable">${username}</span>"</span></span><br><span class="line">EOF</span><br></pre></td></tr></tbody></table></figure>
<h2 id="date">date</h2>
<p>Linux 打印显示时间</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 输出当前年月日</span></span><br><span class="line">$ <span class="built_in">echo</span> $(<span class="built_in">date</span> +%F)</span><br><span class="line">2022-10-21</span><br><span class="line"><span class="comment"># 输出当前时间(时分)</span></span><br><span class="line">$ <span class="built_in">echo</span> $(<span class="built_in">date</span> +%R)</span><br><span class="line">16:50</span><br><span class="line"><span class="comment"># 输出当前时间(时分秒)</span></span><br><span class="line">$ <span class="built_in">echo</span> $(<span class="built_in">date</span> +%T)</span><br><span class="line">16:51:18</span><br><span class="line"><span class="comment"># 输出星期</span></span><br><span class="line">$ <span class="built_in">echo</span> $(<span class="built_in">date</span> +%A)</span><br><span class="line">Friday</span><br><span class="line"><span class="comment"># 自定义输出年月日</span></span><br><span class="line">$ <span class="built_in">echo</span> $(<span class="built_in">date</span> +%Y/%m/%d)</span><br><span class="line">2022/10/21</span><br><span class="line"><span class="comment"># 自定义暑促胡时分秒</span></span><br><span class="line">$ <span class="built_in">echo</span> $(<span class="built_in">date</span> +%H:%M:%S)</span><br><span class="line">16:52:50</span><br><span class="line"><span class="comment"># 组合输出日期及时间</span></span><br><span class="line">$ <span class="built_in">echo</span> $(<span class="built_in">date</span> +%F%n%T)</span><br><span class="line">2022-10-21 16:53:26</span><br></pre></td></tr></tbody></table></figure>
<h2 id="echo">echo</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>-e: 启动转义</p>
</li>
<li class="lvl-2">
<p>-n: 不追加换行</p>
</li>
</ul>
<h2 id="watch">watch</h2>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 每个1s运行后面的命令</span></span><br><span class="line">watch -n1 minikube kubectl -- get pod -A</span><br><span class="line"><span class="comment"># 每秒钟监视一次文件的变化，并在屏幕上显示文件的详细信息</span></span><br><span class="line">watch -n 1 <span class="built_in">ls</span> -l /path/to/file</span><br><span class="line"><span class="comment"># 每秒钟监视一次进程的状态</span></span><br><span class="line">watch -n 1 ps aux</span><br><span class="line"><span class="comment"># 每秒钟监视一次网络连接</span></span><br><span class="line">watch -n 1 netstat -an</span><br></pre></td></tr></tbody></table></figure>
<h2 id="curl">curl</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>-s/–silent: 静默，一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p>
</li>
<li class="lvl-2">
<p>-w: 选项支持很多不同的格式占位符，以便可以输出 cURL 请求的各种指标。以下是常见的格式占位符：</p>
<ul class="lvl-2">
<li class="lvl-4">%{time_total}：请求总时间，包括传输和处理时间。</li>
<li class="lvl-4">%{time_namelookup}：DNS 解析时间。</li>
<li class="lvl-4">%{time_connect}：建立连接所花费的时间。</li>
<li class="lvl-4">%{time_appconnect}：SSL / TLS 握手和建立连接所花费的时间。</li>
<li class="lvl-4">%{time_pretransfer}：从请求发出到开始传输数据所花费的时间。</li>
<li class="lvl-4">%{time_starttransfer}：从请求发出到第一个字节接收到所花费的时间。</li>
<li class="lvl-4">%{speed_download}：下载速度，以字节 / 秒为单位。</li>
<li class="lvl-4">%{speed_upload}：上传速度，以字节 / 秒为单位。</li>
<li class="lvl-4">%{http_code}：HTTP 响应码。</li>
<li class="lvl-4">%{url_effective}：请求的 URL（包括任何重定向后的 URL）。</li>
</ul>
</li>
<li class="lvl-2">
<p>-d: --data-urlencode POST 方法传递数据，区别在于会自动将发送的数据进行 URL 编码。</p>
<ul class="lvl-2">
<li class="lvl-4">URL 编码：将特殊字符替换编码，如空格替换为 %20。</li>
<li class="lvl-4">@: 读取本地文件，请求，如 curl -d ‘@./data.txt’ <a href="https://wangchujiang.com/upload">https://wangchujiang.com/upload</a></li>
</ul>
</li>
<li class="lvl-2">
<p>-H: -H “头部信息” 传递多个头部信息</p>
</li>
<li class="lvl-2">
<p>-m/–max-time:    设置最大传输时间 (s)</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># -s silent: 静默输出</span></span><br><span class="line"><span class="comment"># -w '\n%{http_code}\n': 添加换行格式化输出 http 的 code 码</span></span><br><span class="line"><span class="comment"># -d '{"log_verbose_level":1}': 请求输出</span></span><br><span class="line"><span class="comment"># —X POST: 请求 POST 方法</span></span><br><span class="line">curl -s -w <span class="string">'\n%{http_code}\n'</span> -d <span class="string">'{"log_verbose_level":1}'</span> -X POST localhost:8000/v2/logging</span><br></pre></td></tr></tbody></table></figure>
<h2 id="sed">sed</h2>
<h3 id="安装">安装</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>MacOS 用户可以在 MacPorts 或 Homebrew 上找到 GNU sed。</p>
</li>
<li class="lvl-2">
<p>在 Windows 上，你可以通过 Chocolatey 来 安装 GNU sed。</p>
</li>
</ul>
<h3 id="pattern-space-and-hold-space">pattern space and hold space</h3>
<h4 id="pattern-space">pattern space</h4>
<p>sed 一次只能处理一行。因为它没有可视化模式，所以会创建一个 模式空间 (pattern space)，这是一个内存空间，其中包含来自输入流的当前行（删除了尾部的任何换行符）。填充模式空间后，sed 将执行你的指令。当命令执行完时，sed 将模式空间中的内容打印到输出流，默认是 标准输出，但是可以将输出重定向到文件，甚至使用 --in-place=.bak 选项重定向到同一文件。然后，循环从下一个输入行再次开始。</p>
<h4 id="hold-space">hold space</h4>
<p>为了在遍历文件时提供一点灵活性，sed 还提供了 保留空间 (hold space)（有时也称为 保留缓冲区 (hold buffer)），即 sed 内存中为临时数据存储保留的空间。你可以将保留空间当作剪贴板，实际上，这正是本文所演示的内容：如何使用 sed 复制 / 剪切和粘贴。</p>
<h3 id="常用说明">常用说明</h3>
<h4 id="n">-n</h4>
<p>-n: 禁用显示输出。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">sed -n -e <span class="string">'/three/h'</span> example.txt</span><br></pre></td></tr></tbody></table></figure>
<h4 id="h-H-d">h H d</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> example.txt</span><br><span class="line">Line one</span><br><span class="line">Line three</span><br><span class="line">Line two</span><br></pre></td></tr></tbody></table></figure>
<p>h: 以覆盖的方式复制到 hold space。</p>
<p>H: 以追加的方式复制匹配行到 hold space。</p>
<p>g: 获得 hold space 内容，并替代当前 pattern space 中的文本。</p>
<p>G: 获得 hold space 内容，并追加到当前 pattern space 文本的后面。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 复制、删除、粘贴</span></span><br><span class="line">$ sed -n -e <span class="string">'/three/h;/three/d;/two/G;p'</span> example.txt</span><br><span class="line">Line one</span><br><span class="line">Line two</span><br><span class="line">Line three</span><br></pre></td></tr></tbody></table></figure>
<h4 id="常用sed操作">常用 sed 操作</h4>
<p>这里总结了常用的 sed 使用模式样例。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>a\ 在当前行下面插入文本。</p>
</li>
<li class="lvl-2">
<p>i\ 在当前行上面插入文本。</p>
</li>
<li class="lvl-2">
<p>c\ 把选定的行改为新的文本。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 删除#开头的行</span></span><br><span class="line">sed -i <span class="string">'/^#/ d'</span> path/to/file</span><br><span class="line"><span class="comment"># 在第二行后插入一行 "default-runtime": "nvidia",</span></span><br><span class="line">sed -i <span class="string">'2i\    "default-runtime": "nvidia",'</span> /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># bash\r: No such file or directory</span></span><br><span class="line">sed $<span class="string">'s/\r$//'</span> ./install.sh &gt; ./install.Unix.sh</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<p><img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221024/122455475.png" alt="image."><br>
<img data-src="https://raw.githubusercontent.com/msclock/images/main/images/20221024/122540157.png" alt="image."></p>
<h3 id="reference">reference</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.onitroad.com/jc/misc/insert-character-in-the-beginning-or-end-of-line-with-matched-pattern-in-sed.html">https://www.onitroad.com/jc/misc/insert-character-in-the-beginning-or-end-of-line-with-matched-pattern-in-sed.html</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/374606460">https://zhuanlan.zhihu.com/p/374606460</a></p>
</li>
<li class="lvl-2">
<p><a href="https://opensource.com/downloads/sed-cheat-sheet">sed opensource chart sheet</a></p>
</li>
</ul>
<h2 id="jq">jq</h2>
<p>json 操作命令。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 追加键值</span></span><br><span class="line"><span class="built_in">echo</span> {\"default-runtime\":\"nvidia\"} $(<span class="built_in">cat</span> /etc/docker/daemon.json) | jq -s <span class="string">'.[0] + .[1]'</span> | <span class="built_in">tee</span> /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 条件操作</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'2'</span> | jq <span class="string">'if . == 0 then "zero" elif . == 1 then "one" else "many" end'</span></span><br><span class="line"><span class="string">"many"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2 id="apt">apt</h2>
<p>apt package <a href="https://askubuntu.com/a/1216894">grades</a>.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install --install-suggests --no-install-recommends xxx</span><br></pre></td></tr></tbody></table></figure>
<h2 id="gzip-gunzip">gzip/gunzip</h2>
<blockquote>
<p>[!CAUTION]<br>
gzip 在 ubuntu/debian 使用 -d 解压存在重定向问题，建议使用 -dc 在保留原文件下解压.</p>
</blockquote>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">gzip -c linux_bin &gt; linux.gz</span><br><span class="line">gzip -dc linux.gz &gt; /usr/local/bin/linux_bin &amp;&amp; <span class="built_in">rm</span> linux.gz</span><br></pre></td></tr></tbody></table></figure>
<h2 id="vi">vi</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>/{xxx}: 搜索 xxx</p>
</li>
<li class="lvl-2">
<p>:{line_number}: 转到指定行数</p>
</li>
</ul>
<h2 id="tree">tree</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>-P pattern: &lt;范本样式&gt; 只显示符合范本样式的文件和目录名称。</p>
</li>
<li class="lvl-2">
<p>-I pattern: Do not list files that match the given pattern.</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">tree path/to/tree -I &lt;pattern to ignore&gt;</span><br></pre></td></tr></tbody></table></figure>
<h2 id="parallel">parallel</h2>
<p>常用选项：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>::: 后面接参数</p>
</li>
<li class="lvl-2">
<p>:::: 后面接文件</p>
</li>
<li class="lvl-2">
<p>-j、–jobs   并行任务数</p>
</li>
<li class="lvl-2">
<p>-N  每次输入的参数数量</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt update &amp;&amp; apt install parallel</span><br><span class="line">parallel <span class="built_in">echo</span> ::: a b c d e | <span class="built_in">tee</span> a.txt</span><br><span class="line"><span class="built_in">cat</span> a.txt | parallel <span class="built_in">echo</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="grep">grep</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-o</code>: 选项表示只输出匹配的部分</p>
</li>
<li class="lvl-2">
<p><code>-E</code>: 选项表示使用扩展正则表达式</p>
</li>
<li class="lvl-2">
<p><code>-P</code>: 选项表示使用 Perl 兼容的正则表达式（PCRE）进行匹配。PCRE 支持更多的正则表达式语法和功能，比传统的基本正则表达式更强大。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 获取每行最后一个字符串,`[^[:space:]]+` 表示匹配一个或多个非空白字符，`$` 表示匹配行尾。</span></span><br><span class="line">grep -oE <span class="string">'[^[:space:]]+$'</span> file.txt</span><br><span class="line"><span class="comment"># 第一个字符串</span></span><br><span class="line">grep -oE <span class="string">'^\S+'</span> file.txt</span><br></pre></td></tr></tbody></table></figure>
<h2 id="dirname-realpath-readlink">dirname/realpath/readlink</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>dirname: 去除文件名中的非目录部分</p>
</li>
<li class="lvl-2">
<p>realpath: 获取相对路径，比如 <code>realpath --relative-to=src dest</code> 用于获取 <code>src</code> 到 <code>dest</code> 的相对路径结果</p>
</li>
<li class="lvl-2">
<p>readlink: 获取链接或规范文件名，比如 <code>readlink -f src</code> 用于获取 <code>src</code> 绝对路径</p>
</li>
</ul>
<h2 id=""><code>$@</code>, <code>$*</code></h2>
<p><code>$@</code> 和 <code>$*</code> 都是特殊变量，用于获取所有传递给脚本或函数的参数。它们之间的区别在于如何对待参数中的空格。</p>
<p><code>$@</code> 将每个参数视为单独的单词，因此可以在引号中引用参数中的空格。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># script.sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$@</span></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">./script.sh arg1 <span class="string">"arg2 with spaces"</span> arg3</span><br></pre></td></tr></tbody></table></figure>
<p>那么在脚本中，$@将展开为：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">arg1</span><br><span class="line">arg2 with spaces</span><br><span class="line">arg3</span><br></pre></td></tr></tbody></table></figure>
<p><code>$*</code> 将所有参数视为单个字符串，并在参数之间插入一个字符。默认情况下，这个字符是空格。如果使用相同的命令调用脚本，<code>$*</code> 将展开为：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">arg1 arg2 with spaces arg3</span><br></pre></td></tr></tbody></table></figure>
<h2 id="uname">uname</h2>
<p>uname 用于打印系统信息</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a, --all                  按顺序打印全部信息，如果 -p 和 -i 的信息是未知，那么省略。</p>
</li>
<li class="lvl-2">
<p>-s, --kernel-name          打印内核名称。</p>
</li>
<li class="lvl-2">
<p>-n, --nodename             打印网络节点主机名称。</p>
</li>
<li class="lvl-2">
<p>-r, --kernel-release       打印内核 release。</p>
</li>
<li class="lvl-2">
<p>-v, --kernel-version       打印内核版本。</p>
</li>
<li class="lvl-2">
<p>-m, --machine              打印机器名称。</p>
</li>
<li class="lvl-2">
<p>-p, --processor            打印处理器名称。</p>
</li>
<li class="lvl-2">
<p>-i, --hardware-platform    打印硬件平台名称。</p>
</li>
<li class="lvl-2">
<p>-o, --operating-system     打印操作系统名称。</p>
</li>
</ul>
<h2 id="tee">tee</h2>
<p>tee 从标准输入读取数据并重定向到标准输出和文件</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>-a, --append               追加到文件中而不是覆盖。</p>
</li>
<li class="lvl-2">
<p>-i, --ignore-interrupts    忽略中断信号（Ctrl+c 中断操作无效）。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$USER</span>=\(root\) NOPASSWD:ALL | <span class="built_in">tee</span> /etc/sudoers.d/<span class="variable">$USER</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="systemctl">systemctl</h2>
<p>systemctl 命令 是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">systemctl start nfs-server.service . <span class="comment"># 启动nfs服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nfs-server.service <span class="comment"># 设置开机自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> nfs-server.service <span class="comment"># 停止开机自启动</span></span><br><span class="line">systemctl status nfs-server.service <span class="comment"># 查看服务当前状态</span></span><br><span class="line">systemctl restart nfs-server.service <span class="comment"># 重新启动某服务</span></span><br><span class="line">systemctl list-units --<span class="built_in">type</span>=service <span class="comment"># 查看所有已启动的服务</span></span><br></pre></td></tr></tbody></table></figure>
<p>彻底关闭防火墙：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status firewalld.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl stop firewalld.service</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></tbody></table></figure>
<p>一般修改完服务配置需要重载</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart kubelet</span><br></pre></td></tr></tbody></table></figure>
<p>删除服务，服务文件通常位于 /etc/systemd/system/ 或 /usr/lib/systemd/system/ 目录下</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/systemd/system/[service-name]</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/lib/systemd/system/[service-name]</span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重置失败的单元</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl reset-failed</span><br></pre></td></tr></tbody></table></figure>
<h2 id="mktemp">mktemp</h2>
<p>mktemp 是一个在 Unix 或类 Unix 系统（如 Linux 或 MacOS）中使用的命令，用于创建一个临时目录。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>mktemp 是一个命令行工具，用于创建一个临时文件或目录。</p>
</li>
<li class="lvl-2">
<p>-d 选项告诉 mktemp 创建一个目录，而不是文件。</p>
</li>
<li class="lvl-2">
<p>-t 选项用于指定临时文件或目录的模板字符串。</p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为 example.XXXXXX 的临时目录，其中 XXXXXX 是自动生成的随机字符。</span></span><br><span class="line"><span class="built_in">mktemp</span> -d -t example</span><br></pre></td></tr></tbody></table></figure>
<h2 id="tmux">tmux</h2>
<p><a href="http://tmux.github.io/">tmux</a> 是一个终端复用工具，它允许在一个终端窗口中同时运行多个终端会话。以下是 tmux 的一些常用命令和用法：</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt-get install tmux</span><br><span class="line">yum install -y tmux</span><br><span class="line"><span class="comment"># 启动tmux会话</span></span><br><span class="line">tmux</span><br></pre></td></tr></tbody></table></figure>
<h3 id="创建新窗口">创建新窗口</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用快捷键 Ctrl + b，然后按下 c 创建一个新窗口。</p>
</li>
<li class="lvl-2">
<p>或者使用命令：<code>tmux new-window</code></p>
</li>
</ul>
<h3 id="切换窗口">切换窗口</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用快捷键 Ctrl + b，然后按下数字键 0 到 9 切换到对应的窗口。</p>
</li>
<li class="lvl-2">
<p>或者使用命令：<code>tmux select-window -t &lt;window-index&gt;</code></p>
</li>
</ul>
<h3 id="滚动窗口">滚动窗口</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用快捷键 Ctrl + b，然后按下 <code>[</code>进入复制模式。</p>
</li>
<li class="lvl-2">
<p>使用上下箭头或 Page Up/Page Down 键滚动。</p>
</li>
<li class="lvl-2">
<p>按下 q 退出复制模式。</p>
</li>
</ul>
<h3 id="分割窗格">分割窗格</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用快捷键 Ctrl + b，然后按下 <code>%</code> 垂直分割当前窗格。</p>
</li>
<li class="lvl-2">
<p>使用快捷键 Ctrl + b，然后按下 ` 水平分割当前窗格。</p>
</li>
</ul>
<h3 id="切换窗格">切换窗格</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用快捷键 Ctrl + b，然后按下方向键切换到相邻的窗格。</p>
</li>
<li class="lvl-2">
<p>或者使用命令：<code>tmux select-pane -[UDLR]</code>, 其中，[UDLR] 表示上下左右方向。</p>
</li>
</ul>
<h3 id="退出tmux会话">退出 tmux 会话</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用快捷键 Ctrl + b，然后按下 d 将会话放入后台。</p>
</li>
<li class="lvl-2">
<p>或者使用命令：<code>tmux detach-client</code></p>
</li>
</ul>
<h2 id="shfmt">shfmt</h2>
<p>shfmt 广泛使用的 shell 格式化工具</p>
<p>说明说明</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 检查</span></span><br><span class="line">docker run --<span class="built_in">rm</span>  -v <span class="variable">$PWD</span>:/src -w /src \</span><br><span class="line">    peterdavehello/shfmt \</span><br><span class="line">    sh -c <span class="string">"find . -type f \( -name \"*.sh\" -o -exec grep -lE \"^#\!/usr/bin/env (bash|sh)$\" {} \; \) | xargs shfmt -d -i 4"</span></span><br><span class="line"><span class="comment"># 更正</span></span><br><span class="line">docker run --<span class="built_in">rm</span>  -v <span class="variable">$PWD</span>:/src -w /src \</span><br><span class="line">    peterdavehello/shfmt \</span><br><span class="line">    sh -c <span class="string">"find . -type f \( -name \"*.sh\" -o -exec grep -lE \"^#\!/usr/bin/env (bash|sh)$\" {} \; \) | xargs shfmt -d -i 4 -w"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="getent">getent</h2>
<p>getent 是一个用于获取系统数据库中的条目的命令。它可以用于获取用户、组、主机等信息。通过指定不同的数据库类型，可以获取不同类型的条目。</p>
<p>要获取系统中所有用户的列表，可以使用以下命令：<code>getent passwd</code></p>
<p>要获取系统中所有组的列表，可以使用以下命令：<code>getent group</code> 或 <code>getent group &lt;group_name&gt; | cut -d: -f4 | tr ',' '\n'</code></p>
<h2 id="tail">tail</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>+&lt;num&gt;</code>: 从 num 行开始显示，如 <code>docker ps | tail +2</code> 代表跳过第一行表头数据显示</p>
</li>
</ul>
<h2 id="head">head</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>-&lt;num&gt;</code>: 从头显示 num 行，如 <code>ps -ef | grep dockerd | head -1</code> 代表从第一行显示一行</p>
</li>
</ul>
<h2 id="tr">tr</h2>
<p>将字符进行替换压缩和删除</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">input=<span class="string">"[clash,devcontainer]"</span></span><br><span class="line"><span class="comment"># 将字符串转换为数组</span></span><br><span class="line">IFS=<span class="string">' '</span> <span class="built_in">read</span> -ra array &lt;&lt;&lt; <span class="string">"<span class="subst">$(echo $input | tr -d '[]' | tr ',' ' ')</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历输出数组元素</span></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> <span class="string">"<span class="variable">${array[@]}</span>"</span>; <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$element</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="find">find</h2>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查找子文件夹下jobs和templates下yml后缀并用sed操作每个文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># +: 一次性传给exec处理</span></span><br><span class="line">find <span class="built_in">jobs</span> templates -<span class="built_in">type</span> f -name <span class="string">"*.yml"</span> -<span class="built_in">exec</span> sed -i <span class="string">"s@<span class="variable">$_prefix</span>.*@<span class="variable">$_image_name</span>@g"</span> {} +</span><br></pre></td></tr></tbody></table></figure>
<h2 id="ping">ping</h2>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ping -c 3 google.com</span><br></pre></td></tr></tbody></table></figure>
<h2 id="update-alternatives">update-alternatives</h2>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有可用的java</span></span><br><span class="line">update-alternatives --list java</span><br><span class="line"><span class="comment"># 设置java为默认版本</span></span><br><span class="line">update-alternatives --config java</span><br><span class="line"></span><br><span class="line">update-alternatives --get-selections | grep java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置llvm-cov为默认版本</span></span><br><span class="line">update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-12 100</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh 实践</title>
    <url>/posts/2985153235/</url>
    <content><![CDATA[<h2 id="ssh">ssh</h2>
<h3 id="安装">安装</h3>
<p>ssh 服务需要安装 ssh 服务端</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">apt install openssh-server</span><br></pre></td></tr></tbody></table></figure>
<p>查看当前 ssh 开启情况</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></tbody></table></figure>
<span id="more"></span>
<p>手动开启 ssh 服务</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></tbody></table></figure>
<h3 id="qa">qa</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper</p>
</li>
</ul>
<p>需要<a href="https://stackoverflow.com/questions/67534354/jenkins-ssh-pipeline-steps-a-terminal-is-required-to-read-the-password">配置</a>非 root 用户登录密码提示.</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$USER</span> ALL=\(root\) NOPASSWD:ALL | <span class="built_in">tee</span> /etc/sudoers.d/<span class="variable">$USER</span> \</span><br><span class="line">    &amp;&amp; <span class="built_in">chmod</span> 0440 /etc/sudoers.d/<span class="variable">$USER</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="ssh-keygen">ssh-keygen</h2>
<p>ssh-keygen 可用于生产 ssh 验证密钥，供 scp 及 ssh 等工具</p>
<p>生产 ssh 密钥</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></tbody></table></figure>
<p>使用示例</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 传输文件到远程</span></span><br><span class="line">scp -P 22 local_file_path username@remote_host:remote_file_path</span><br><span class="line"><span class="comment"># 执行远程命令</span></span><br><span class="line">ssh -p 22 username@remote_host <span class="string">'command_to_execute'</span></span><br></pre></td></tr></tbody></table></figure>
<p>将公钥添加到服务器。将 id_rsa.pub 文件的内容复制并粘贴到服务器的～/.ssh/authorized_keys 文件中。</p>
<h2 id="ssh-copy-id">ssh-copy-id</h2>
<p>使用该工具上传公钥到服务器，可实现免密登录</p>
<p>安装 ssh-copy-id</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Windows</span></span><br><span class="line">choco install ssh-copy-id</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 将本地上传到远程</span></span><br><span class="line">ssh-copy-id root@192.168.145.128</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>terminal 实践</title>
    <url>/posts/bbf1bf81/</url>
    <content><![CDATA[<h2 id="常用字体">常用字体</h2>
<ul class="lvl-0">
<li class="lvl-2"><a href="https://dejavu-fonts.github.io/Download.html">Dejavu Font</a></li>
<li class="lvl-2"><a href="https://www.nerdfonts.com/">Nerd Font</a></li>
<li class="lvl-2"><a href="https://www.jetbrains.com/lp/mono/">jetbrain mono</a>: JetBrainsMono NF</li>
<li class="lvl-2"><a href="https://github.com/laishulu/Sarasa-Term-SC-Nerd">Sarasa-Term-SC-Nerd</a></li>
<li class="lvl-2"><a href="https://github.com/subframe7536/maple-font">maple ui</a></li>
</ul>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.wintools.info/index.php/advanced-system-font-changer">wintools font changer</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/snowie2000/mactype">better font rendering for windows</a></p>
</li>
</ul>
<h2 id="powershell">powershell</h2>
<p>下载 Powershell、Windows terminal，并设置透明度及默认的 shell 为 PS。</p>
<p>修改颜色，复制 One Half Dark，并修改名称 One Half Dark (moded) 颜色为<code>#001B26</code>。</p>
<p>修改字体类 <a href="https://www.nerdfonts.com/">Nerd Font</a>，推荐 <a href="https://www.jetbrains.com/lp/mono/">JetBrain Mono</a>。</p>
<span id="more"></span>
<p>配置 PS 命令脚本</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">winget install Microsoft.Powershell</span><br><span class="line">choco install neovim grep</span><br><span class="line">winget install  DEVCOM.JetBrainsMonoNerdFont</span><br><span class="line"><span class="comment"># 创建自定义脚本</span></span><br><span class="line">nvim .config/powershell/user_profile.ps1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加脚本</span></span><br><span class="line"><span class="built_in">PS</span> C:\Users\msclo&gt; <span class="built_in">cat</span> .\.config\powershell\user_profile.ps1</span><br><span class="line"><span class="comment"># Alias</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-Alias</span> vim nvim</span><br><span class="line"><span class="built_in">Set-Alias</span> ll <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">Set-Alias</span> g git</span><br><span class="line"><span class="built_in">Set-Alias</span> less <span class="string">'C:\Program Files\Git\usr\bin\less.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生效 profile</span></span><br><span class="line">nvim <span class="variable">$PROFILE</span></span><br><span class="line"><span class="comment"># 添加 profile</span></span><br><span class="line">C:\Users\msclo&gt; <span class="built_in">cat</span> <span class="variable">$PROFILE</span></span><br><span class="line">. <span class="variable">$env:USERPROFILE</span>\.config\powershell\user_profile.ps1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># posh-git</span></span><br><span class="line"><span class="built_in">Install-Module</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser <span class="literal">-Force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># omp，参考 https://ohmyposh.dev/</span></span><br><span class="line">choco install/upgrade <span class="built_in">oh</span><span class="literal">-my-posh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 omp 到 user_profile.ps1</span></span><br><span class="line"><span class="built_in">Set-Alias</span> <span class="built_in">oh</span><span class="literal">-my-posh</span> <span class="string">'C:\Program Files (x86)\oh-my-posh\bin\oh-my-posh'</span></span><br><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> init pwsh <span class="literal">--config</span> <span class="string">"<span class="variable">$env:POSH_THEMES_PATH</span>/takuya.omp.json"</span> | <span class="built_in">Invoke-Expression</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># terminal icons，添加到 user_profile.ps1 中</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> Terminal<span class="literal">-Icons</span> <span class="literal">-Repository</span> PSGallery <span class="literal">-Force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Z，跟踪常用目录自动跳转</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> Z <span class="literal">-Force</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PSReadline，跟踪历史命令</span></span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PSReadline <span class="literal">-AllowPrerelease</span> <span class="literal">-Scope</span> CurrentUser <span class="literal">-Force</span> <span class="literal">-SkipPublisherCheck</span></span><br><span class="line"><span class="built_in">Set-PSReadlineOption</span> <span class="literal">-PredictionSource</span> <span class="built_in">History</span></span><br><span class="line"><span class="built_in">Set-PSReadlineOption</span> <span class="literal">-PredictionViewStyle</span> ListView</span><br><span class="line"></span><br><span class="line"><span class="comment"># fzf，历史命令查找</span></span><br><span class="line">choco install fzf</span><br><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PSFzf <span class="literal">-Force</span></span><br><span class="line"><span class="built_in">Set-PsFzfOption</span> <span class="literal">-PSReadlineChordProvider</span> <span class="string">'Ctrl+f'</span> <span class="literal">-PSReadlineChordReversedHistory</span> <span class="string">'Ctrl+r'</span></span><br></pre></td></tr></tbody></table></figure>
<p>最终完整 user_profile.ps1</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Prompt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># git</span></span><br><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Icons</span></span><br><span class="line"><span class="built_in">Import-Module</span> Terminal<span class="literal">-Icons</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># oh-my-posh</span></span><br><span class="line"><span class="built_in">Set-Alias</span> <span class="built_in">oh</span><span class="literal">-my-posh</span> <span class="string">'C:\Program Files (x86)\oh-my-posh\bin\oh-my-posh'</span></span><br><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> init pwsh <span class="literal">--config</span> <span class="string">"<span class="variable">$env:POSH_THEMES_PATH</span>/takuya.omp.json"</span> | <span class="built_in">Invoke-Expression</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PSReadline history</span></span><br><span class="line"><span class="built_in">Set-PSReadlineOption</span> <span class="literal">-BellStyle</span> None</span><br><span class="line"><span class="built_in">Set-PSReadlineKeyHandler</span> <span class="literal">-Chord</span> <span class="string">'Ctrl+d'</span> <span class="literal">-Function</span> DeleteChar</span><br><span class="line"><span class="built_in">Set-PSReadlineOption</span> <span class="literal">-PredictionSource</span> <span class="built_in">History</span></span><br><span class="line"><span class="built_in">Set-PSReadlineOption</span> <span class="literal">-PredictionViewStyle</span> ListView</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fzf</span></span><br><span class="line"><span class="built_in">Set-PsFzfOption</span> <span class="literal">-PSReadlineChordProvider</span> <span class="string">'Ctrl+f'</span> <span class="literal">-PSReadlineChordReversedHistory</span> <span class="string">'Ctrl+r'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alias</span></span><br><span class="line"><span class="built_in">Set-Alias</span> vim nvim</span><br><span class="line"><span class="built_in">Set-Alias</span> ll <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">Set-Alias</span> g git</span><br><span class="line"><span class="built_in">Set-Alias</span> less <span class="string">'C:\Program Files\Git\usr\bin\less.exe'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Utilities</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">which</span> <span class="params">(<span class="variable">$command</span>)</span></span>{</span><br><span class="line">    <span class="built_in">Get-Command</span> <span class="literal">-Name</span> <span class="variable">$command</span> <span class="literal">-ErrorAction</span> SilentlyContinue |</span><br><span class="line">        <span class="built_in">Select-Object</span> <span class="literal">-ExpandProperty</span> Path <span class="literal">-ErrorAction</span> SilentlyContinue</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># Watch</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watch-Command</span></span> {</span><br><span class="line">    <span class="function">[<span class="type">CmdletBinding</span>(<span class="type">SupportsShouldProcess</span>=<span class="variable">$True</span>,<span class="type">ConfirmImpact</span>=<span class="string">'High'</span>)]</span></span><br><span class="line">    <span class="keyword">param</span> (</span><br><span class="line">        [<span class="type">Parameter</span>(<span class="type">Mandatory</span>=<span class="variable">$True</span>,</span><br><span class="line">                   <span class="type">ValueFromPipeline</span>=<span class="variable">$True</span>,</span><br><span class="line">                   <span class="type">ValueFromPipelineByPropertyName</span>=<span class="variable">$True</span>)]</span><br><span class="line">        [<span class="built_in">string</span>]<span class="variable">$command</span>,</span><br><span class="line"></span><br><span class="line">        [<span class="type">Parameter</span>(<span class="type">Mandatory</span>=<span class="variable">$False</span>,</span><br><span class="line">                   <span class="type">ValueFromPipeline</span>=<span class="variable">$True</span>,</span><br><span class="line">                   <span class="type">ValueFromPipelineByPropertyName</span>=<span class="variable">$True</span>)]</span><br><span class="line">        [<span class="built_in">int</span>]<span class="variable">$interval</span> = <span class="number">2</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">process</span> {</span><br><span class="line">        <span class="variable">$cmd</span> = [<span class="type">scriptblock</span>]::Create(<span class="variable">$command</span>);</span><br><span class="line">        <span class="keyword">While</span>(<span class="variable">$True</span>) {</span><br><span class="line">            <span class="variable">$output</span> = <span class="variable">$cmd</span>.Invoke();</span><br><span class="line">            <span class="built_in">cls</span>;</span><br><span class="line">            <span class="built_in">Write-Host</span> <span class="string">"Command: "</span> <span class="variable">$command</span>;</span><br><span class="line">            <span class="built_in">Write-Host</span> (<span class="variable">$output</span> | <span class="built_in">Out-String</span>);</span><br><span class="line">            <span class="built_in">sleep</span> <span class="variable">$interval</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="iwr">iwr</h3>
<p>powershell 下类似 curl 工具命令</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line"><span class="built_in">iwr</span> https://example.com/file.zip <span class="literal">-OutFile</span> file.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页内容</span></span><br><span class="line"><span class="built_in">iwr</span> https://example.com/page.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将响应保存到变量中</span></span><br><span class="line"><span class="variable">$response</span> = <span class="built_in">iwr</span> https://example.com/api/<span class="keyword">data</span> <span class="literal">-UseBasicParsing</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="net">net</h3>
<p>显示连接过的 wifi 密码</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">netsh wlan show profiles</span><br><span class="line">netsh wlan show profiles name=<span class="string">"wifi name"</span> key=<span class="built_in">clear</span></span><br></pre></td></tr></tbody></table></figure>
<p>显示 ip</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ipconfig /all</span><br><span class="line"><span class="built_in">curl</span> <span class="literal">-L</span> ip.tool.lu</span><br></pre></td></tr></tbody></table></figure>
<p>检验网络连通</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">ping pi address <span class="literal">-t</span></span><br></pre></td></tr></tbody></table></figure>
<p>连接远程桌面</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">mstsc</span><br></pre></td></tr></tbody></table></figure>
<h3 id="disk">disk</h3>
<p>检验磁盘扇区</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">chkdsk</span><br><span class="line"><span class="comment"># 进行修复</span></span><br><span class="line">chkdsk /<span class="built_in">r</span></span><br></pre></td></tr></tbody></table></figure>
<p>打开性能监控</p>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">perform.msc</span><br></pre></td></tr></tbody></table></figure>
<h3 id="net-2">net</h3>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># list all user</span></span><br><span class="line">net user</span><br><span class="line"><span class="comment"># del user</span></span><br><span class="line">net user [<span class="type">user</span>-<span class="type">name</span>] /<span class="built_in">del</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="sfc">sfc</h3>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line">sfc /scannow</span><br></pre></td></tr></tbody></table></figure>
<h3 id="服务">服务</h3>
<figure class="highlight powershell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">sc</span> create ceshi binpath= D:\ceshi\ceshi.exe <span class="built_in">type</span>= own <span class="built_in">start</span>= auto displayname= ceshi</span><br><span class="line">net <span class="built_in">start</span> ceshi</span><br><span class="line">net stop ceshi</span><br><span class="line"><span class="built_in">sc</span> delete <span class="string">"ceshi"</span></span><br></pre></td></tr></tbody></table></figure>
<h2 id="zsh">zsh</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/unixorn/awesome-zsh-plugins">awesome-zsh-plugins</a></td>
<td>unixorn</td>
<td>zsh plugins</td>
</tr>
<tr>
<td><a href="https://github.com/devcontainers-contrib/features/tree/main/src/zsh-plugins">devcontainer zsh-plugins</a></td>
<td>devcontainers-contrib</td>
<td>devcontainer zsh plugins</td>
</tr>
<tr>
<td><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">ohmyzsh themes</a></td>
<td>ohmyzsh</td>
<td>themes</td>
</tr>
</tbody>
</table>
<h3 id="zsh-2">zsh</h3>
<p>通过 devcontainer 插件安装 zsh</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/devcontainers/features.git &amp;&amp; CONFIGURE_ZSH_AS_DEFAULT_SHELL=<span class="literal">true</span> USERNAME=<span class="variable">$USER</span> ./features/src/common-utils/install.sh</span><br></pre></td></tr></tbody></table></figure>
<h2 id="fzf">fzf</h2>
<h3 id="Usage">Usage</h3>
<h4 id="Install">Install</h4>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 https://github.com/junegunn/fzf.git ~/.fzf</span><br></pre></td></tr></tbody></table></figure>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.linode.com/docs/guides/how-to-use-fzf/">how to use fzf</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>tools</title>
    <url>/posts/eafade77/</url>
    <content><![CDATA[<h2 id="常用-windows-工具">常用 windows 工具</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/hellzerg/optimizer">Optimizer</a></td>
<td>hellzerg</td>
<td> 系统优化 </td>
</tr>
<tr>
<td><a href="https://github.com/henrypp/memreduct">memreduct</a></td>
<td>henrypp</td>
<td> 内存自动清理 </td>
</tr>
<tr>
<td><a href="https://github.com/Fndroid/clash_for_windows_pkg">CFW</a></td>
<td>Fndroid</td>
<td>clash windows 客户端 </td>
</tr>
<tr>
<td><a href="https://github.com/the1812/Malware-Patch">Malware-Patch</a></td>
<td>the1812</td>
<td> 阻止中国流氓软件的管理员授权</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="开发工具">开发工具</h2>
<table>
<thead>
<tr>
<th>资源</th>
<th>组织</th>
<th>类型 </th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/0xpayne/gpt-migrate">gpt-migrate</a></td>
<td>0xpayne</td>
<td> 跨语言转换 </td>
</tr>
<tr>
<td><a href="https://github.com/okteto/okteto">okteto</a></td>
<td>okteto</td>
<td>k8s 云开发 </td>
</tr>
<tr>
<td><a href="https://github.com/zurawiki/gptcommit">gptcommit</a></td>
<td>zurawiki</td>
<td>git 辅助工具</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>VM</title>
    <url>/posts/a555d500/</url>
    <content><![CDATA[<h2 id="QEMU">QEMU</h2>
<ul class="lvl-0">
<li class="lvl-2">download: choco install qemu</li>
<li class="lvl-2">EFI: <a href="https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd">https://releases.linaro.org/components/kernel/uefi-linaro/latest/release/qemu64/QEMU_EFI.fd</a></li>
</ul>
<h3 id="aarch64-VM">aarch64 VM</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/s806903/article/details/127651807">https://blog.csdn.net/s806903/article/details/127651807</a></p>
</li>
</ul>
<p>准备好 aarch64 镜像 test.img。</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 磁盘大小</span></span><br><span class="line">qemu-img.exe create -f qcow2 vm_disk.img 25G</span><br><span class="line"><span class="comment"># 创建</span></span><br><span class="line">qemu-system-aarch64.exe -m 4000 -cpu cortex-a72 -smp 4 -M virt -device nec-usb-xhci -device usb-kbd -device usb-mouse -device VGA -hda vm_disk.img -bios QEMU_EFI.fd -cdrom aarch64-dvd.iso</span><br></pre></td></tr></tbody></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>-m 4000 表示分配给虚拟机的内存最大 4000MB</p>
</li>
<li class="lvl-2">
<p>-cpu cortex-a72 指定 CPU 类型，还可以选择 cortex-a53、cortex-a57 等</p>
</li>
<li class="lvl-2">
<p>-smp 4,cores=4,threads=1,sockets=1 指定虚拟机最大使用的 CPU 核心数等</p>
</li>
<li class="lvl-2">
<p>-M virt 指定虚拟机类型为 virt，具体支持的类型可以使用 qemu-system-aarch64 -M help 查看</p>
</li>
<li class="lvl-2">
<p>-bios QEMU_EFI.fd  指定 UEFI 固件文件</p>
</li>
<li class="lvl-2">
<p>-net nic,model=pcnet 启用网络功能</p>
</li>
<li class="lvl-2">
<p>-device nec-usb-xhci -device usb-kbd -device usb-mouse  启用 USB 鼠标等设备</p>
</li>
<li class="lvl-2">
<p>-device VGA 启用 VGA 视图，对于图形化的 Linux 这条很重要！</p>
</li>
<li class="lvl-2">
<p>-drive if=none,file=Z:\uos.iso,id=cdrom,media=cdrom 指定光驱使用镜像文件</p>
</li>
<li class="lvl-2">
<p>-device virtio-scsi-device -device scsi-cd,drive=cdrom 指定光驱硬件类型</p>
</li>
</ul>
<h3 id="snapshot">snapshot</h3>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://cloud.tencent.com/developer/techpedia/2000/14599">https://cloud.tencent.com/developer/techpedia/2000/14599</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">qemu-img snapshot -c snapshot_name vm_disk.img</span><br><span class="line">qemu-img snapshot -a snapshot_name vm_disk.img</span><br><span class="line">qemu-img snapshot -l vm_disk.img</span><br></pre></td></tr></tbody></table></figure>
<h2 id="VMware-MacOS">VMware MacOS</h2>
<p>links:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://blog.csdn.net/u012039040/article/details/129666171">https://blog.csdn.net/u012039040/article/details/129666171</a></p>
</li>
<li class="lvl-2">
<p><a href="https://zhuanlan.zhihu.com/p/649809292">https://zhuanlan.zhihu.com/p/649809292</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.sysnettechsolutions.com/en/download-vmware-tools/">macos vmware tools</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>VM</tag>
      </tags>
  </entry>
  <entry>
    <title>yaml 实践</title>
    <url>/posts/af15a2a7/</url>
    <content><![CDATA[<p>本文总结了常用的 yaml 格式技巧。</p>
<h2 id="＞"><code>|</code>, <code>＞</code>, <code>|+</code>, <code>|-</code></h2>
<p>yaml 针对缩进要求比较严格，也诞生了特殊的格式标记。</p>
<h3 id=""><code>|</code></h3>
<p>将保留每行尾部的换行符 <code>\n</code>。</p>
<h3 id="-2"><code>&gt;</code></h3>
<p>将删除每行尾部的换行符 <code>\n</code>，则看似多行文本，则会用空格拼接为一行。</p>
<p>可通过添加空行或行首缩进添加一个空格来强制保留换行符。</p>
<span id="more"></span>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">some_value:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  a</span></span><br><span class="line"><span class="string">  b  # 空一行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="string">c</span></span><br><span class="line">  <span class="string">d</span></span><br><span class="line">    <span class="string">e</span>   <span class="comment"># 行首加一个空格</span></span><br><span class="line">  <span class="string">f</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="attr">same_value:</span> <span class="string">a</span> <span class="string">b\nc</span> <span class="string">d\n</span>  <span class="string">e\nf\n</span></span><br></pre></td></tr></tbody></table></figure>
<h3 id="-3"><code>+-</code></h3>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>+</code>: 表示保留文字块末尾的换行。</p>
</li>
<li class="lvl-2">
<p><code>-</code>: 表示删除字符串末尾的换行。</p>
</li>
</ul>
<h2 id="anchor">anchor</h2>
<h3 id="数组">数组</h3>
<p>在 YAML 中，可以使用锚点（&amp;）和别名（*）来拼接数组。锚点用于创建一个可以被多次引用的值，而别名用于引用这个值。</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个锚点</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">&amp;anchor</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用别名引用锚点</span></span><br><span class="line"><span class="bullet">-</span> <span class="meta">*anchor</span></span><br><span class="line"><span class="bullet">-</span> <span class="meta">*anchor</span></span><br></pre></td></tr></tbody></table></figure>
<p>在上面的示例中，首先定义了一个锚点 &amp; anchor，它包含了一个数组 [1, 2, 3]。然后，使用别名 * anchor 来引用这个锚点，将其拼接到数组中</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>开发资源导航</title>
    <url>/posts/4c738f59/</url>
    <content><![CDATA[<p>搜集了主要的导航工具。</p>
<h2 id="参考文档">参考文档</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://opensource.com/downloads/cheat-sheets">opensource 文档</a></p>
</li>
<li class="lvl-2">
<p><a href="https://opensource.com/tags/python">opensource python</a></p>
</li>
</ul>
<span id="more"></span>
<h2 id="各种工具">各种工具</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://www.johngo689.com/3202/">https://www.johngo689.com/3202/</a></p>
</li>
<li class="lvl-2">
<p><a href="https://crontab.pro/">crontab</a></p>
</li>
<li class="lvl-2">
<p><a href="https://github.com/alist-org/alist">alist</a></p>
</li>
<li class="lvl-2">
<p><a href="https://www.freedidi.com/8852.html">Cheat Engine</a></p>
</li>
</ul>
<h2 id="社区">社区</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><a href="https://dev.to/">https://dev.to/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
  </entry>
  <entry>
    <title>四大坑</title>
    <url>/posts/4140928383/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8286aeeee7f4d9d08b9421192f9d74b95afb72c7e77b4f7a4346a67177e3415b">1f193f8f0f58fcc41d0a678093d3b4c59b65574ba7bfc72411e24467bb969d9f0d01757f38ead6993d446f062b3f8fc64041145dddea4cb2a2641ecbd940a6c55fe6e2eab5cee313235302da7c0e3db3bf2f8ddb4dd0e828e787a6ad223ca9dd21f91633d0c6c9de8e00581b413f12d5442b2dd8b4b99d87b68ecd9466bf30a62db757b2a00a26d1b247006fbd6dc2ddb9f5ae54bc3479fbf2ffd76f148109bba56484d9b8f68716468264f4e6bfa556bf3380cf8efc38ae8287c233a3144d96c44c86ace1376fabd9978ca0b7a484dca9dc3611fb8bf7c210f2ac8552227f089fd4b367e49d1690deab4b63b1751678488f91daa9f2fe73cb32078a28f021a3abdde3b3c3301c00f5e038b05098bddd4dd8ec5a5ed041bf021da846f40a52e43f05c9c49d276d4501691ea54d21d33ec5d91750d10f23db50c19483d9e199dbccfe063f13344cb51f01a6edb7aed0ed54cc1bc8fe91dd1c9f5367f5d51e694dc311b565cf8c5f58525009598860504c85d10790f9ee45a713e0b2e46e0f39caf85af340aaff051be511d5f0656cc50f426a9043e5b958dca1dda0d5e9fec7b55f72107a2ed61b2f389e785bf312565ae0e5d447d77c0b6fc310935fead2f5afa69971c42f8111d03c2d602b8db74d28da55dc42edd9802882e574c00914f1494f7bf78242b90b66d838edda1ab81909aaee57bcb70455d1370f1031d8fe52e0c5f373417ed82d5a475b21c83a3490be9e49775b08098ab0aa8f6693da47c4809e0cefee8b5134c1fb6d676394114274f6ae2632a46613c8ff718cb58e539240e490985cdb21a4ec37a9914754091c901a603a041f67d3c0b2665d0aaf83d6ad8df53995e66c904e9f1bd1b513bbd65a998fd29029b26c695be3aeba4027c636ac077376c14ffba8646bc8c0b7a48691f0eccef1e17a9d20a29257f3211e47607d06db79d31e83c75b9eaa1bef1cdfc7b7bc82afd83b87eb8d6e80d951fcdf84a1eb89e0acd8f214984371b2fd6e9fa31cdc4fd4b631acbdc23882c5db17a4abedfc6a45152c1df7087b33f9753f35752bc4afc474034acd7e7b1c033581b5213d79ea11d6fd1ae27ee721d498c288e4ca2700bd39dbf20c988baab2bbdd47f4bdd00279ea722b0214ca3692794f1d510e7e5d6ca2673b2e2bbe167660f7a57a3324cf19d4f3419cec4504562d5fdde36853c8bf75f25a22be354c2c7f49bc58adabfb45091bc41b222c4f63e8cad9f6ddac5a0ba4e168708afcefe6a88372f3275e6c022567a275fa977e0a8a56b7dcdba34d72be2530e9737754d61b5a292b2497b36f4a50cb50a839450d4bf26619dc21b70a805b68b54381d5d11bd36f56e0634851f378bc4c7f5c4b8783bf36af27a4f2a6ff422d1a5440d7d608851538a444c091a522e7085271467a4871d6eb73057fb28f184111f0144c6f5bd0e702c7f6b306b7e584f13807b947800b29205ba739a939e014075b10428c2054ea73bc9c044fe0d3991b2ef5aa5a409732fc6a8ab859f35618944ef28a4d121568775a4c08a36aae8c907a667a75708e4e4831e8719d34b3fe27f57e9bbbe946d71f071d0b53891309e28b43ce2eb0be0269ec9f3745a73c98e797615472bd8270239a498773a92ac5745bba084d9daaa3a78fe19b3b09c2267cc38edbc7f2a4375fa8bb2a177ea736d5d77f8c8b9f19390907d6cc144032806be54fbca420c05242553e6f8a0544fbb8f61e6276c371c180a18837e14adccedeceb304774cc9b5dc293eba015b1ddc6b93794f59b4495eeb5080c063367a38368dbe76a55013b738ccb626defe8110820f55d61a49682172e566ef48d87df246aa9b2bc124d8ac777ba3f5d92d415be0e9b8f6b34dc53c8f127ff30b65e260fc9f1a08c454d88557a19faefab1c78ade5fe027bb2f4c1c6c646fdfa61263c4efc127455ae200efdd12d01591da58a77e65bdaf5ed1263a4e1565f54ee1cf61fa6c875ee7497aad3f351a426ffb61d617c9990ffebff181599448ee2bc2ed6e4cf2955a3be5065fd406199342f27777522bd1d882d8746a2685412d523f3788be791a50541e7c7d9afa2516ee7317e371b2d403c095c5bb343c97525e549d484916f7a7b4e7a627bcc473279084c6c77c786aab69937ed17d66ea0f152ddad4d44acb9dc09f130ce57433e3ba9993281955cec23c032d605fff6a1cd3d3be2b944979916cb8a5c25975f7cb9b22b78134a18bbdc3b2eb74704b60b8ca9081ed3020dcef28183b61689b52fbc55cde1aff07fe9d1f8aee785a601152f8068567a9d00dbb290e9cbfb570091dfb0fb7e1e1137a2c8165892dc1d85ca4ce00bdd1742079476faa26ce505e4c573df8a6ad73bb9fce40ebe1f11e4e5381ce1557b7d6399d7421cb15695e03041d4513b40f9a8ed603a2aa94dc7e086bb47c7bf7adfb067f125218d3b4509a9393df5cc36612ed232cbf6a625944e08a54e2ff8149757ba2e801b0b9c51b9f2b62191d7420bf7a38b9ca092672f787bd4c8dff9cd8f9e53afdadeac749cd4d825c05960b3f1243b69d207463fa8ee0ba723a300beabad33ce4f461b618c084fd68ca06a91c54f01fc7975f5a9f355564a5b423ef761387bf71a6b11862bb06d38bfe00c6f5ab753542c3e44c84399cf4b270c0a75fcc96081c22d445c4caa14b8587bcb39351e4f66faf1eb6b73d3e7dea6c1d331b19ffee374e991d3ac21ac5bb1fc220c64c72e97632efd4c140c2d27b9fb0ce8001fcc8f7dd9857c5a3105e02311cba057afc026bd0121ece9c48e1411171c8aa182db6ce105b15a8f4daf1a9bcf1ba4b31cb27861045fa5e0c9ecb066c586707f801e576a3ac4cd8a5eecccc736b3a2ca596e8efdf9c92dcb692776709b805735102ceadf320966aa91a51232a2a8f5c717edf3bc28649485997cf31481556b995422e87121063bb0793d24a27572f87010beaea3cceb08bde1187e654b433b1474a077689a6c4742b4bad260674ae7f92835c58f81d4fb73842108b8c503824ed6c27be23fd1266af469859012b1edab661cccec43bbf7d23807d5d6a37ba83b875b76f68e71f8146562b00fb227a3893ce3080331d355fe5c3825ef79fff84e62b1dd0e3e563f03d9dbaea8fe7fd26da9b7dc82d8389dfed07ac3df1d3510172a2221272d1b6f761da19cef56016a4af34cf6941e11e693b55dedfecc890c153394f4d86d465fd76da23b77ad179aaea22282087e02df64e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>secret</category>
      </categories>
      <tags>
        <tag>secret</tag>
      </tags>
  </entry>
  <entry>
    <title>学习</title>
    <url>/posts/19161441/</url>
    <content><![CDATA[<h2 id="5w2h"><code>5w2h</code></h2>
<p>5W2H 是一种问题分析方法，用于解决问题或制定计划。5W 代表 What、Why、Where、When、Who，2H 代表 How、How much。这种方法可以帮助我们全面地了解问题或计划，从而更好地解决问题或制定计划。</p>
<pre><code class="highlight mermaid">mindmap
  root((5w2h))
    1.5w
      1.why 为什么
      2.what 是什么
      3.where 何处
      4.when 何时
      5.who 谁负责
    2.2h
      1.how 怎么做
      2.how much 花销</code></pre>
<h3 id="5w的内容"><code>5w</code> 的内容</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>why—— 为什么？为什么要这么做？理由何在？原因是什么？</p>
</li>
<li class="lvl-2">
<p>what—— 是什么？目的是什么？作什么工作？</p>
</li>
<li class="lvl-2">
<p>where—— 何处？在哪里做？从哪里入手？</p>
</li>
<li class="lvl-2">
<p>when—— 何时？什么时间完成？什么时机最适宜？</p>
</li>
<li class="lvl-2">
<p>who—— 谁？有谁来承担？谁来完成？谁负责？</p>
</li>
</ul>
<h3 id="2h的内容"><code>2h</code> 的内容</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>how—— 怎么做？如何提高效率？如何实施？方法怎么样？</p>
</li>
<li class="lvl-2">
<p>how much—— 多少？做到什么程度？数量如何？质量水平如何？费用产出如何？</p>
</li>
</ul>
<span id="more"></span>
<h2 id="Programming">Programming</h2>
<p>第一大步：认知，了解了解百科定义解决了什么问题同类技术有哪些了解技术组成部分思考为什么技术会出现</p>
<p>第二大步：学语法，学用法视频博客书文档</p>
<p>第三大步：局部练习，小型实战，搭建环境遇到坑多思考，多提炼，多记录，多写博客</p>
<p>第四大步：上手实际项目，开源项目</p>
<p>第五大步：造轮子，写源码</p>
<h2 id="学习">学习</h2>
<p>学习转化能力</p>
<pre><code class="highlight mermaid">mindmap
  root((学习))
    1.定义
      1.从有限的例子找出规律
      2.将信息压缩成知识
    2.原则
      1.明确知识的输入输出
      2.用例子重塑输入输出
      3.理清关系和拆分知识
      4.用新例子验证知识
    2.方法
      1.思维导图
      2.费曼技巧</code></pre>
<h2 id="费曼技巧">费曼技巧</h2>
<p>费曼技巧着重强调方法只不过是为达成目的的一种手段，手段可以选择，目的才是核心。它仅包括学习及解释两步。</p>
<pre><code class="highlight mermaid">mindmap
  root((feynman))
    1.学习: 通过各种手段学习
    2.解释: 通过解释并解决问题
    3.更正: 通过验证进行反馈学习</code></pre>
<h2 id="分析">分析</h2>
<p>Step 1, 现象<br>
Step 2, 数据统计<br>
Step 3, 分析规律 -&gt; 原因 / 问题<br>
Step 4, 结论<br>
Step 5, 自我认知，自我对比，看法<br>
Step 6, 思考，反省</p>
]]></content>
      <categories>
        <category>secret</category>
      </categories>
  </entry>
  <entry>
    <title>记忆和想象方法</title>
    <url>/posts/796530809/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8dd7807410359fe1da75d489a0ad7b6b121e5a33b24d109966f16b6e7f01843a">1f193f8f0f58fcc41d0a678093d3b4c5aa3d077d28acead2cecc0b9bb362c6cf0ce6fd189271dbdc57a093d74c2653ef8fef61d77ee0464f085c143bccccb8632db9147815af70ecbd8447d713d08aa51f50a8d6ddbb0164437a9d72f88047a6fd587c32a760320ddd44c5898febd67170ec7c806516bcbd00a80e7802467d952dd835d71e1fa0a4a433a3b8fea89a723355c7ed7629bf9df3bf375dd5a91474f3e764e9a66b06416e39d98f2699f9c83b9fea3acb5574156e640a2ce8a4eb6796935d547da3cf203f6e5b6eec952f138144782f79170eeb52a5d55240341d50c2d053a9bcd7c18fa4d9e62ca5a9e1dfa7965b63220c28343e5a0550dbcfdd12cf260f006a4c4edc800a837d34812cc6626d5629fd8f600922e8d02049b50c3ce8bf64ce7fa50996dde31ac0e57e9c799a18ae3f2cf12cd2207d265d96de8ce8d7d1a4a64144044b6f766b64600b5a281cc4b673837729a811ef6e13c9cf63028a8d193e5ae652f0c25ef86e023af3f4baa018196109686949ccabde9b234f11e736866c7021285e6a132f40c9aab980d829efbbf75e444e8179dc7732a32e234f14e54a6d4eb6772998debc856eaf4d16cab28e1f9bdad5047dc7f87f279fcaa81e6c48631f543486d81b47a9c95b870d83d8945bd3e607b72024a9c3ce61129972395d8362403494485cd81d8af8a1e64d5ce41ebce94040e54d9d3dd254fec20444a0e4110de781f0c6288dacc45cfdec78f3506d26fd421dfd2c456d9811a24a2f349b9233d7520b93b9ce8192f44d7e9d776f69479ab27de5ad2b7b67110f47b860e65554d4d41e5853d2bf2a8a329b5a12ebccc3396386bef674b031e7ece6886135215d44a91cfbcac398201704582845b125fc5fc9f4f6368d34b96f08a02e41d253e7ba53e85bf5ccd590d35b2804a2c0c9fcaf425fccc05f7eef981da5f8f9d011d0b5cda84f488962138e17c1abb447331821683fb2eb18cdbc5089947c2da9166965d83e891fdca55d904099a633e8ddb4eb00811b1d14f1e5dae77b8b5f18c599f9bc758835ac335bb02d52e37648564a974656bf4f840695a941a88153edc4d831e36b72c3daa88ac47f2ad0add38aef18ff7227201602766bb4a30d582e2f496ab8ea18c362f4e11469c070414429e5fe606c07a731ef45e109b0e75783b928d685dea278171541cf494708c113dd36e89c95b6997dc47f09d79b182c96fed063ef6d4db1a81f1bdaf13b6c6625181d11c732367d3412c95095bb788d16d64bd5dea17fbd7182c408b07b56b6f85db044445cc04762250cf056b8429e8079ca7678b9e68061242cbaf695ef4a4b837c5ed7f10f10981c624a462cbb6360092df3d1d388e4911e61151b695d329575250b6463f746e5e3b1edc1ff14baf58cf4ee3d50d235af004e239b9edcdb94bad0b0c2ad706854dcdc903fe198a3afa40bf8850a0dd6a18c48e9664ab41fd10962359576b323c092b7612e12852d01a16a6fe4d50ac769c5d9f86a2a5f20908aa4ef074977ccf4045cf24476616282843802e93d1c28445c24de2e9f6d84ab4edfc4372d0ea6d546cf5b4bf8b4fa0b44cff68dbe6016394d96ddc149fe05e507349c3979ebea94ed5a7f23ad2bdee72edd88cb881d622f09a9248d073c88ea20b0aaea113882983e295d228b2768b36363659aaae7b30873a642fbcef0a1ccf29a7019e8c23462b8af30d93c500aed51e0248e66f4ed16e04e0f8380cf2ab4b7614a5500d2eae1ed3384a571ccbf38cf19ec425f75a3b1328cdaae22d5014b81d9257e573ff1dc866304196cb13f74ec9a0de066ca8fe70721894641fd5653aee3d517395916907ee108ba6ecd9b587a00e2e5013584c3c9a22f5cf0ab4a5d92a945d61cac47d95af5da06f7c5f7e331b40a73061545688fd81a3c3e3e5636133eebcffa690b250a8b101fe39a40702797b3fd4eb082b43a7311fe176e8bded9a9be95d84c63ae1d336d0de747a238d736f96f789234f90e4f5fb520567feae646b43ca2d3be1cbc57187b09e496cde83bc6a7f23f622182aeeb8466ec6a083941f0a709086148a94ed3041575da65d4fa83c3e5841e1e7102c59875fb8907f40d71d145519c00e248c382aae30b37b422dd61d76ce4f55ca17a4989c5e40ae63f5d74aa4290f1e02eff0b9b95197dc45e5a7d304a80162db062c06964749de787fb99d222b65e73b31468728639804a9739bd1d6c7d784254214ba1699bb4835b3191299525d0c0012fec223d56de9e9cb4cc76ef3e64384984</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>secret</category>
      </categories>
      <tags>
        <tag>secret</tag>
        <tag>记忆</tag>
      </tags>
  </entry>
  <entry>
    <title>态度</title>
    <url>/posts/459958868/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3b3e34211883b2d22c80d2eaa8f2a8a082911051ec04491ebafdc88a7debd164">1f193f8f0f58fcc41d0a678093d3b4c5eeecdd1b7b5dbd55dc10a13897196ba76fc797bc2bb63abe1dc7ac3453b89dbe55d35309d50e909bd49a35edfab97c97539e5de4a9e6d93cb8920386c27cc9bd8eb40063b4f673ffea7ec0f3ccff6109067b57538c80970fe6fdc85dc3707a2c32582987131310805376a62f3ea695bd87d2e13b6b7c31cc091362320d9030ed98ff55cccf07be975eb6f94f77be89264f4627a3e606e93752d67a7015e874060220452fda27c528d74c0c9a18d9251d33531448bc45936c2b1a37dcff56a05d3d3edd2f09868b8b5daf7303ab3a244ecd06988255200a89cc8f151ee825e2b4bf3951c56f06ffbdec42fb32857f9b3ff1c7691e25581b8be3cbf9b0f746168c9053d5d725f990cf3a457f17fa9481c83805491ba0e25838b3e2dafd3b53fa151d16d923d336ec7e5d6f5801b3aa7af611561e9e28d481575ccdedd3b1288f315a27bcc281ac31290728123630d4053ff90b1d9a90da3e1671e9da06e4c3b795c952b04cebbeccaa84679183de0543630354309a7d229fdabf5c9dd5ba5f8b56</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>secret</category>
      </categories>
      <tags>
        <tag>secret</tag>
      </tags>
  </entry>
</search>
